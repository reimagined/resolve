// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`base config works correctly [server] 1`] = `
"
import '$resolve.guardOnlyServer'
import commands_0_instance from \\"<MONOREPO_DIR>/tools/scripts/test/alias/files/testCommands.js\\"
import { jsonSerializeState as serializeState_0_instance } from \\"@resolve-js/core\\"
import { jsonDeserializeState as deserializeState_0_instance } from \\"@resolve-js/core\\"
import { disabledEncryption as encryption_0_instance } from \\"@resolve-js/runtime-base\\"
const constructorBindFunction =
    (
      constructorFunction,
      compileTimeOptions,
      compileTimeImports,
      runTimeOptions,
      runTimeImports
    ) => constructorFunction(
      { ...compileTimeOptions, ...runTimeOptions },
      { ...compileTimeImports, ...runTimeImports }
    )
const idempotentFunction = value => value
const name_0 = \\"Todo\\"
const commands_0 = commands_0_instance
const serializeState_0 = serializeState_0_instance
const deserializeState_0 = deserializeState_0_instance
const encryption_0 = encryption_0_instance

const aggregates = []

aggregates.push({
  name: name_0
, commands: commands_0
, serializeState: serializeState_0
, deserializeState: deserializeState_0
, encryption: encryption_0
, commandHttpResponseMode: 'event'
})

export default aggregates
"
`;

exports[`base(v2) config works correctly [server] 1`] = `
"
import '$resolve.guardOnlyServer'
import commands_0_instance from \\"<MONOREPO_DIR>/tools/scripts/test/alias/files/testCommands.js\\"
import { jsonSerializeState as serializeState_0_instance } from \\"@resolve-js/core\\"
import { jsonDeserializeState as deserializeState_0_instance } from \\"@resolve-js/core\\"
import { disabledEncryption as encryption_0_instance } from \\"@resolve-js/runtime-base\\"
import commands_1_instance from \\"<MONOREPO_DIR>/tools/scripts/test/alias/files/testCommands.js\\"
import { jsonSerializeState as serializeState_1_instance } from \\"@resolve-js/core\\"
import { jsonDeserializeState as deserializeState_1_instance } from \\"@resolve-js/core\\"
import { disabledEncryption as encryption_1_instance } from \\"@resolve-js/runtime-base\\"
const constructorBindFunction =
    (
      constructorFunction,
      compileTimeOptions,
      compileTimeImports,
      runTimeOptions,
      runTimeImports
    ) => constructorFunction(
      { ...compileTimeOptions, ...runTimeOptions },
      { ...compileTimeImports, ...runTimeImports }
    )
const idempotentFunction = value => value
const name_0 = \\"Todo\\"
const commands_0 = commands_0_instance
const serializeState_0 = serializeState_0_instance
const deserializeState_0 = deserializeState_0_instance
const encryption_0 = encryption_0_instance
const name_1 = \\"Item\\"
const commands_1 = commands_1_instance
const serializeState_1 = serializeState_1_instance
const deserializeState_1 = deserializeState_1_instance
const encryption_1 = encryption_1_instance

const aggregates = []

aggregates.push({
  name: name_0
, commands: commands_0
, serializeState: serializeState_0
, deserializeState: deserializeState_0
, encryption: encryption_0
, commandHttpResponseMode: 'event'
})

aggregates.push({
  name: name_1
, commands: commands_1
, serializeState: serializeState_1
, deserializeState: deserializeState_1
, encryption: encryption_1
, commandHttpResponseMode: 'event'
})

export default aggregates
"
`;

exports[`config with commands as module works correctly [server] 1`] = `
"
import '$resolve.guardOnlyServer'
import commands_0_constructor from \\"<MONOREPO_DIR>/tools/scripts/test/alias/files/testCommandsAsModule.js\\"
import commands_0_import_testCommandsAsModule from \\"<MONOREPO_DIR>/tools/scripts/test/alias/files/testCommandsAsModule.js\\"
import { jsonSerializeState as serializeState_0_instance } from \\"@resolve-js/core\\"
import { jsonDeserializeState as deserializeState_0_instance } from \\"@resolve-js/core\\"
import { disabledEncryption as encryption_0_instance } from \\"@resolve-js/runtime-base\\"
const constructorBindFunction =
    (
      constructorFunction,
      compileTimeOptions,
      compileTimeImports,
      runTimeOptions,
      runTimeImports
    ) => constructorFunction(
      { ...compileTimeOptions, ...runTimeOptions },
      { ...compileTimeImports, ...runTimeImports }
    )
const idempotentFunction = value => value
const name_0 = \\"Todo\\"
const commands_0_imports = { [\\"testCommandsAsModule\\"]: commands_0_import_testCommandsAsModule }
const commands_0_options = {}
const commands_0 = commands_0_constructor(
      commands_0_options,
      commands_0_imports
    )
const serializeState_0 = serializeState_0_instance
const deserializeState_0 = deserializeState_0_instance
const encryption_0 = encryption_0_instance

const aggregates = []

aggregates.push({
  name: name_0
, commands: commands_0
, serializeState: serializeState_0
, deserializeState: deserializeState_0
, encryption: encryption_0
, commandHttpResponseMode: 'event'
})

export default aggregates
"
`;

exports[`config with projection works correctly [server] 1`] = `
"
import '$resolve.guardOnlyServer'
import commands_0_instance from \\"<MONOREPO_DIR>/tools/scripts/test/alias/files/testCommands.js\\"
import { jsonSerializeState as serializeState_0_instance } from \\"@resolve-js/core\\"
import { jsonDeserializeState as deserializeState_0_instance } from \\"@resolve-js/core\\"
import projection_0_instance from \\"<MONOREPO_DIR>/tools/scripts/test/alias/files/testProjection.js\\"
import { disabledEncryption as encryption_0_instance } from \\"@resolve-js/runtime-base\\"
const constructorBindFunction =
    (
      constructorFunction,
      compileTimeOptions,
      compileTimeImports,
      runTimeOptions,
      runTimeImports
    ) => constructorFunction(
      { ...compileTimeOptions, ...runTimeOptions },
      { ...compileTimeImports, ...runTimeImports }
    )
const idempotentFunction = value => value
const name_0 = \\"Todo\\"
const commands_0 = commands_0_instance
const serializeState_0 = serializeState_0_instance
const deserializeState_0 = deserializeState_0_instance
const projection_0_hash = \\"<INVARIANT_HASH>\\"
const projection_0 = projection_0_instance
const encryption_0 = encryption_0_instance

const aggregates = []

aggregates.push({
  name: name_0
, commands: commands_0
, serializeState: serializeState_0
, deserializeState: deserializeState_0
, projection: projection_0
, invariantHash: projection_0_hash
, encryption: encryption_0
, commandHttpResponseMode: 'event'
})

export default aggregates
"
`;

exports[`config with schedulers works correctly [server] 1`] = `
"
import '$resolve.guardOnlyServer'
import commands_0_instance from \\"<MONOREPO_DIR>/tools/scripts/test/alias/files/testCommands.js\\"
import { jsonSerializeState as serializeState_0_instance } from \\"@resolve-js/core\\"
import { jsonDeserializeState as deserializeState_0_instance } from \\"@resolve-js/core\\"
import { disabledEncryption as encryption_0_instance } from \\"@resolve-js/runtime-base\\"
const constructorBindFunction =
    (
      constructorFunction,
      compileTimeOptions,
      compileTimeImports,
      runTimeOptions,
      runTimeImports
    ) => constructorFunction(
      { ...compileTimeOptions, ...runTimeOptions },
      { ...compileTimeImports, ...runTimeImports }
    )
const idempotentFunction = value => value
const name_0 = \\"Todo\\"
const commands_0 = commands_0_instance
const serializeState_0 = serializeState_0_instance
const deserializeState_0 = deserializeState_0_instance
const encryption_0 = encryption_0_instance

const aggregates = []

aggregates.push({
  name: name_0
, commands: commands_0
, serializeState: serializeState_0
, deserializeState: deserializeState_0
, encryption: encryption_0
, commandHttpResponseMode: 'event'
})

export default aggregates
"
`;
