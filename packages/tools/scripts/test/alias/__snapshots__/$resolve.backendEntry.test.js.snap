// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`works correctly 1`] = `
"

    import '$resolve.guardOnlyServer'
    import { getLog, entryPointMarker } from '@resolve-js/runtime-base'
    
    const log = getLog('backendDynamicImportEntry')
    const runtimeOptions = {
  \\"importMode\\": \\"dynamic\\"
}

    const handler = async (...args) => {
      const immediatePromiseResult = await immediatePromise
      if (immediatePromiseResult != null) {
        throw immediatePromiseResult
      }
      try {
        if(!global.initPromise) {
          const interopRequireDefault = require('@babel/runtime/helpers/interopRequireDefault')
          global.serverAssemblies = interopRequireDefault(
            require('$resolve.serverAssemblies')
          ).default
          
          const entryFactory = interopRequireDefault(
            require(\\"@resolve-js/runtime-aws-serverless\\")
          )[\\"default\\"] 
          
          const { entry } = entryFactory(runtimeOptions)
          
          global.entry = entry
          global.initPromise = entry(serverAssemblies)
        }
        const worker = await initPromise
        return await worker(...args)
      } catch(error) {
        log.error('Lambda handler fatal error: ', error)
        throw error
      }
    }

    const immediatePromise = (async () => {
      try {
        await Promise.resolve()
        const runtimeModule = require(\\"@resolve-js/runtime-aws-serverless\\")
        const { execMode } = await runtimeModule[\\"default\\"]()
        if(execMode === 'immediate') {
          log.debug('\\"execMode\\" set to \\"immediate\\", executing worker') 
          handler().catch((error) => log.error('Immediate handler execution error: ', error))
        }
        return null
      } catch(error) {
        log.error('Immediate require error: ', error)
        return error
      }
    })()

    export { entryPointMarker }
    export default handler
  
"
`;
