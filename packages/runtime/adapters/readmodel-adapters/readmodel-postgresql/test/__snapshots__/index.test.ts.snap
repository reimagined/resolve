// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`@resolve-js/readmodel-postgresql-serverless method "drop" 1`] = `
Array [
  Array [
    "connect",
  ],
  Array [
    "query",
    "SELECT 0 AS \\"defunct\\"",
  ],
  Array [
    "connect",
  ],
  Array [
    "query",
    "SELECT 0 AS \\"defunct\\"",
  ],
  Array [
    "query",
    "
      CREATE TABLE IF NOT EXISTS \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\"(
        \\"EventSubscriber\\" VARCHAR(190) NOT NULL,
        \\"IsPaused\\" BOOLEAN NOT NULL,
        \\"EventTypes\\" JSONB NOT NULL,
        \\"AggregateIds\\" JSONB NOT NULL,
        \\"XaKey\\" VARCHAR(190) NULL,
        \\"Cursor\\" JSONB NULL,
        \\"SuccessEvent\\" JSONB NULL,
        \\"FailedEvent\\" JSONB NULL,
        \\"Errors\\" JSONB NULL,
        \\"Schema\\" JSONB NULL,
        PRIMARY KEY(\\"EventSubscriber\\")
      );
      
      CREATE TABLE IF NOT EXISTS \\"databaseName\\".\\"tablePrefix__databaseName__TRX__\\"(
        \\"XaKey\\" VARCHAR(190) NOT NULL,
        \\"XaValue\\" VARCHAR(190) NOT NULL,
        \\"Timestamp\\" BIGINT,
        PRIMARY KEY(\\"XaKey\\")
      );
    ",
  ],
  Array [
    "query",
    "WITH \\"CleanTrx\\" AS (
          DELETE FROM \\"databaseName\\".\\"tablePrefix__databaseName__TRX__\\"
          WHERE \\"Timestamp\\" < CAST(extract(epoch from clock_timestamp()) * 1000 AS BIGINT) - 86400000
          RETURNING *
        )
        SELECT CASE WHEN \\"B\\".\\"XaValue\\" IS NOT NULL THEN pg_terminate_backend(CAST(\\"B\\".\\"XaValue\\" AS INT))
        ELSE NULL END FROM \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\" \\"A\\"
        LEFT JOIN \\"databaseName\\".\\"tablePrefix__databaseName__TRX__\\" \\"B\\"
        ON \\"A\\".\\"XaKey\\" = \\"B\\".\\"XaKey\\"
        WHERE \\"A\\".\\"EventSubscriber\\" = 'readModelName1'
        AND COALESCE((SELECT LEAST(Count(\\"CleanTrx\\".*), 0) FROM \\"CleanTrx\\"), 0) = 0
        ",
  ],
  Array [
    "query",
    "WITH \\"CTE\\" AS (
         SELECT * FROM \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\"
         WHERE \\"EventSubscriber\\" = 'readModelName1'
         FOR UPDATE NOWAIT
        )
         INSERT INTO \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\"(
          \\"EventSubscriber\\", \\"EventTypes\\", \\"AggregateIds\\", \\"IsPaused\\"
         ) VALUES (
           'readModelName1',
           'null',
           'null',
           COALESCE(NULLIF((SELECT Count(\\"CTE\\".*) < 2 FROM \\"CTE\\"), TRUE), FALSE)
         )
         ON CONFLICT (\\"EventSubscriber\\") DO UPDATE SET
         \\"EventTypes\\" = 'null',
         \\"AggregateIds\\" = 'null'
      ",
  ],
  Array [
    "query",
    "
      CREATE TABLE IF NOT EXISTS \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\"(
        \\"EventSubscriber\\" VARCHAR(190) NOT NULL,
        \\"IsPaused\\" BOOLEAN NOT NULL,
        \\"EventTypes\\" JSONB NOT NULL,
        \\"AggregateIds\\" JSONB NOT NULL,
        \\"XaKey\\" VARCHAR(190) NULL,
        \\"Cursor\\" JSONB NULL,
        \\"SuccessEvent\\" JSONB NULL,
        \\"FailedEvent\\" JSONB NULL,
        \\"Errors\\" JSONB NULL,
        \\"Schema\\" JSONB NULL,
        PRIMARY KEY(\\"EventSubscriber\\")
      );
      
      CREATE TABLE IF NOT EXISTS \\"databaseName\\".\\"tablePrefix__databaseName__TRX__\\"(
        \\"XaKey\\" VARCHAR(190) NOT NULL,
        \\"XaValue\\" VARCHAR(190) NOT NULL,
        \\"Timestamp\\" BIGINT,
        PRIMARY KEY(\\"XaKey\\")
      );
    ",
  ],
  Array [
    "query",
    "WITH \\"CleanTrx\\" AS (
          DELETE FROM \\"databaseName\\".\\"tablePrefix__databaseName__TRX__\\"
          WHERE \\"Timestamp\\" < CAST(extract(epoch from clock_timestamp()) * 1000 AS BIGINT) - 86400000
          RETURNING *
        )
        SELECT CASE WHEN \\"B\\".\\"XaValue\\" IS NOT NULL THEN pg_terminate_backend(CAST(\\"B\\".\\"XaValue\\" AS INT))
        ELSE NULL END FROM \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\" \\"A\\"
        LEFT JOIN \\"databaseName\\".\\"tablePrefix__databaseName__TRX__\\" \\"B\\"
        ON \\"A\\".\\"XaKey\\" = \\"B\\".\\"XaKey\\"
        WHERE \\"A\\".\\"EventSubscriber\\" = 'readModelName2'
        AND COALESCE((SELECT LEAST(Count(\\"CleanTrx\\".*), 0) FROM \\"CleanTrx\\"), 0) = 0
        ",
  ],
  Array [
    "query",
    "WITH \\"CTE\\" AS (
         SELECT * FROM \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\"
         WHERE \\"EventSubscriber\\" = 'readModelName2'
         FOR UPDATE NOWAIT
        )
         INSERT INTO \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\"(
          \\"EventSubscriber\\", \\"EventTypes\\", \\"AggregateIds\\", \\"IsPaused\\"
         ) VALUES (
           'readModelName2',
           'null',
           'null',
           COALESCE(NULLIF((SELECT Count(\\"CTE\\".*) < 2 FROM \\"CTE\\"), TRUE), FALSE)
         )
         ON CONFLICT (\\"EventSubscriber\\") DO UPDATE SET
         \\"EventTypes\\" = 'null',
         \\"AggregateIds\\" = 'null'
      ",
  ],
  Array [
    "query",
    "
    CREATE TABLE \\"databaseName\\".\\"tablePrefixtable1\\" (
      \\"test\\" JSONB, \\"id\\" JSONB
    );

    
      ALTER TABLE \\"databaseName\\".\\"tablePrefixtable1\\"
      ADD CONSTRAINT \\"id-type-validation\\"
      CHECK (jsonb_typeof(\\"id\\") = 'string');

      CREATE UNIQUE INDEX \\"tablePrefixtable1-id-extracted-field\\"
      ON \\"databaseName\\".\\"tablePrefixtable1\\" (
      CAST((\\"id\\" ->> '$') AS VARCHAR(190)));
     
      CREATE UNIQUE INDEX \\"tablePrefixtable1-id-full-field\\"
      ON \\"databaseName\\".\\"tablePrefixtable1\\" (
        \\"id\\"
      );
    

    COMMENT ON TABLE \\"databaseName\\".\\"tablePrefixtable1\\"
    IS 'RESOLVE-readModelName1';
  ",
  ],
  Array [
    "query",
    "INSERT INTO \\"databaseName\\".\\"tablePrefixtable1\\"(\\"id\\", \\"test\\")
      VALUES(CAST('\\"id-1\\"' AS JSONB), CAST('true' AS JSONB));
    ",
  ],
  Array [
    "query",
    "INSERT INTO \\"databaseName\\".\\"tablePrefixtable1\\"(\\"id\\", \\"test\\")
      VALUES(CAST('\\"id-2\\"' AS JSONB), CAST('true' AS JSONB));
    ",
  ],
  Array [
    "query",
    "
    CREATE TABLE \\"databaseName\\".\\"tablePrefixtable2\\" (
      \\"test\\" JSONB, \\"id\\" JSONB
    );

    
      ALTER TABLE \\"databaseName\\".\\"tablePrefixtable2\\"
      ADD CONSTRAINT \\"id-type-validation\\"
      CHECK (jsonb_typeof(\\"id\\") = 'string');

      CREATE UNIQUE INDEX \\"tablePrefixtable2-id-extracted-field\\"
      ON \\"databaseName\\".\\"tablePrefixtable2\\" (
      CAST((\\"id\\" ->> '$') AS VARCHAR(190)));
     
      CREATE UNIQUE INDEX \\"tablePrefixtable2-id-full-field\\"
      ON \\"databaseName\\".\\"tablePrefixtable2\\" (
        \\"id\\"
      );
    

    COMMENT ON TABLE \\"databaseName\\".\\"tablePrefixtable2\\"
    IS 'RESOLVE-readModelName2';
  ",
  ],
  Array [
    "query",
    "INSERT INTO \\"databaseName\\".\\"tablePrefixtable2\\"(\\"id\\", \\"test\\")
      VALUES(CAST('\\"id-3\\"' AS JSONB), CAST('true' AS JSONB));
    ",
  ],
  Array [
    "query",
    "INSERT INTO \\"databaseName\\".\\"tablePrefixtable2\\"(\\"id\\", \\"test\\")
      VALUES(CAST('\\"id-4\\"' AS JSONB), CAST('true' AS JSONB));
    ",
  ],
  Array [
    "query",
    "INSERT INTO \\"databaseName\\".\\"tablePrefixtable2\\"(\\"id\\", \\"test\\")
      VALUES(CAST('\\"id-5\\"' AS JSONB), CAST('true' AS JSONB));
    ",
  ],
  Array [
    "query",
    "SELECT Count(*) AS \\"Count\\"
    FROM \\"databaseName\\".\\"tablePrefixtable1\\"
    ;",
  ],
  Array [
    "query",
    "SELECT Count(*) AS \\"Count\\"
    FROM \\"databaseName\\".\\"tablePrefixtable2\\"
    ;",
  ],
  Array [
    "query",
    "
      CREATE TABLE IF NOT EXISTS \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\"(
        \\"EventSubscriber\\" VARCHAR(190) NOT NULL,
        \\"IsPaused\\" BOOLEAN NOT NULL,
        \\"EventTypes\\" JSONB NOT NULL,
        \\"AggregateIds\\" JSONB NOT NULL,
        \\"XaKey\\" VARCHAR(190) NULL,
        \\"Cursor\\" JSONB NULL,
        \\"SuccessEvent\\" JSONB NULL,
        \\"FailedEvent\\" JSONB NULL,
        \\"Errors\\" JSONB NULL,
        \\"Schema\\" JSONB NULL,
        PRIMARY KEY(\\"EventSubscriber\\")
      );
      
      CREATE TABLE IF NOT EXISTS \\"databaseName\\".\\"tablePrefix__databaseName__TRX__\\"(
        \\"XaKey\\" VARCHAR(190) NOT NULL,
        \\"XaValue\\" VARCHAR(190) NOT NULL,
        \\"Timestamp\\" BIGINT,
        PRIMARY KEY(\\"XaKey\\")
      );
    ",
  ],
  Array [
    "query",
    "WITH \\"CleanTrx\\" AS (
          DELETE FROM \\"databaseName\\".\\"tablePrefix__databaseName__TRX__\\"
          WHERE \\"Timestamp\\" < CAST(extract(epoch from clock_timestamp()) * 1000 AS BIGINT) - 86400000
          RETURNING *
        )
        SELECT CASE WHEN \\"B\\".\\"XaValue\\" IS NOT NULL THEN pg_terminate_backend(CAST(\\"B\\".\\"XaValue\\" AS INT))
        ELSE NULL END FROM \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\" \\"A\\"
        LEFT JOIN \\"databaseName\\".\\"tablePrefix__databaseName__TRX__\\" \\"B\\"
        ON \\"A\\".\\"XaKey\\" = \\"B\\".\\"XaKey\\"
        WHERE \\"A\\".\\"EventSubscriber\\" = 'readModelName1'
        AND COALESCE((SELECT LEAST(Count(\\"CleanTrx\\".*), 0) FROM \\"CleanTrx\\"), 0) = 0
        ",
  ],
  Array [
    "query",
    "WITH \\"CTE\\" AS (
         SELECT * FROM \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\"
         WHERE \\"EventSubscriber\\" = 'readModelName1'
         FOR NO KEY UPDATE NOWAIT
       )
        UPDATE \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\"
        SET \\"Cursor\\" = NULL,
        \\"SuccessEvent\\" = NULL,
        \\"FailedEvent\\" = NULL,
        \\"Errors\\" = NULL,
        \\"IsPaused\\" = TRUE
        WHERE \\"EventSubscriber\\" = 'readModelName1'
        AND (SELECT Count(\\"CTE\\".*) FROM \\"CTE\\") = 1
      ",
  ],
  Array [
    "query",
    "SELECT \\"CLS\\".\\"relname\\" AS \\"tableName\\"
    FROM \\"pg_catalog\\".\\"pg_class\\" \\"CLS\\"
    LEFT JOIN \\"pg_catalog\\".\\"pg_description\\" \\"DESC\\"
    ON \\"CLS\\".\\"oid\\" = \\"DESC\\".\\"objoid\\"
    LEFT JOIN \\"pg_catalog\\".\\"pg_namespace\\" \\"NS\\"
    ON \\"CLS\\".\\"relnamespace\\" = \\"NS\\".\\"oid\\"
    WHERE \\"DESC\\".\\"description\\" = 'RESOLVE-readModelName1'
    AND \\"NS\\".\\"nspname\\" = 'databaseName'
    AND \\"CLS\\".\\"relkind\\" = 'r'
    ;",
  ],
  Array [
    "query",
    "WITH \\"CleanTrx\\" AS (
          DELETE FROM \\"databaseName\\".\\"tablePrefix__databaseName__TRX__\\"
          WHERE \\"Timestamp\\" < CAST(extract(epoch from clock_timestamp()) * 1000 AS BIGINT) - 86400000
          RETURNING *
        )
        SELECT CASE WHEN \\"B\\".\\"XaValue\\" IS NOT NULL THEN pg_terminate_backend(CAST(\\"B\\".\\"XaValue\\" AS INT))
        ELSE NULL END FROM \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\" \\"A\\"
        LEFT JOIN \\"databaseName\\".\\"tablePrefix__databaseName__TRX__\\" \\"B\\"
        ON \\"A\\".\\"XaKey\\" = \\"B\\".\\"XaKey\\"
        WHERE \\"A\\".\\"EventSubscriber\\" = 'readModelName1'
        AND COALESCE((SELECT LEAST(Count(\\"CleanTrx\\".*), 0) FROM \\"CleanTrx\\"), 0) = 0
        ",
  ],
  Array [
    "query",
    "WITH \\"CTE\\" AS (
         SELECT * FROM \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\"
         WHERE \\"EventSubscriber\\" = 'readModelName1'
         FOR UPDATE NOWAIT
        )
         DELETE FROM \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\"
         WHERE \\"EventSubscriber\\" = 'readModelName1'
         AND (SELECT Count(\\"CTE\\".*) FROM \\"CTE\\") = 1
      ",
  ],
  Array [
    "query",
    "
      CREATE TABLE IF NOT EXISTS \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\"(
        \\"EventSubscriber\\" VARCHAR(190) NOT NULL,
        \\"IsPaused\\" BOOLEAN NOT NULL,
        \\"EventTypes\\" JSONB NOT NULL,
        \\"AggregateIds\\" JSONB NOT NULL,
        \\"XaKey\\" VARCHAR(190) NULL,
        \\"Cursor\\" JSONB NULL,
        \\"SuccessEvent\\" JSONB NULL,
        \\"FailedEvent\\" JSONB NULL,
        \\"Errors\\" JSONB NULL,
        \\"Schema\\" JSONB NULL,
        PRIMARY KEY(\\"EventSubscriber\\")
      );
      
      CREATE TABLE IF NOT EXISTS \\"databaseName\\".\\"tablePrefix__databaseName__TRX__\\"(
        \\"XaKey\\" VARCHAR(190) NOT NULL,
        \\"XaValue\\" VARCHAR(190) NOT NULL,
        \\"Timestamp\\" BIGINT,
        PRIMARY KEY(\\"XaKey\\")
      );
    ",
  ],
  Array [
    "query",
    "WITH \\"CleanTrx\\" AS (
          DELETE FROM \\"databaseName\\".\\"tablePrefix__databaseName__TRX__\\"
          WHERE \\"Timestamp\\" < CAST(extract(epoch from clock_timestamp()) * 1000 AS BIGINT) - 86400000
          RETURNING *
        )
        SELECT CASE WHEN \\"B\\".\\"XaValue\\" IS NOT NULL THEN pg_terminate_backend(CAST(\\"B\\".\\"XaValue\\" AS INT))
        ELSE NULL END FROM \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\" \\"A\\"
        LEFT JOIN \\"databaseName\\".\\"tablePrefix__databaseName__TRX__\\" \\"B\\"
        ON \\"A\\".\\"XaKey\\" = \\"B\\".\\"XaKey\\"
        WHERE \\"A\\".\\"EventSubscriber\\" = 'readModelName2'
        AND COALESCE((SELECT LEAST(Count(\\"CleanTrx\\".*), 0) FROM \\"CleanTrx\\"), 0) = 0
        ",
  ],
  Array [
    "query",
    "WITH \\"CTE\\" AS (
         SELECT * FROM \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\"
         WHERE \\"EventSubscriber\\" = 'readModelName2'
         FOR NO KEY UPDATE NOWAIT
       )
        UPDATE \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\"
        SET \\"Cursor\\" = NULL,
        \\"SuccessEvent\\" = NULL,
        \\"FailedEvent\\" = NULL,
        \\"Errors\\" = NULL,
        \\"IsPaused\\" = TRUE
        WHERE \\"EventSubscriber\\" = 'readModelName2'
        AND (SELECT Count(\\"CTE\\".*) FROM \\"CTE\\") = 1
      ",
  ],
  Array [
    "query",
    "SELECT \\"CLS\\".\\"relname\\" AS \\"tableName\\"
    FROM \\"pg_catalog\\".\\"pg_class\\" \\"CLS\\"
    LEFT JOIN \\"pg_catalog\\".\\"pg_description\\" \\"DESC\\"
    ON \\"CLS\\".\\"oid\\" = \\"DESC\\".\\"objoid\\"
    LEFT JOIN \\"pg_catalog\\".\\"pg_namespace\\" \\"NS\\"
    ON \\"CLS\\".\\"relnamespace\\" = \\"NS\\".\\"oid\\"
    WHERE \\"DESC\\".\\"description\\" = 'RESOLVE-readModelName2'
    AND \\"NS\\".\\"nspname\\" = 'databaseName'
    AND \\"CLS\\".\\"relkind\\" = 'r'
    ;",
  ],
  Array [
    "query",
    "WITH \\"CleanTrx\\" AS (
          DELETE FROM \\"databaseName\\".\\"tablePrefix__databaseName__TRX__\\"
          WHERE \\"Timestamp\\" < CAST(extract(epoch from clock_timestamp()) * 1000 AS BIGINT) - 86400000
          RETURNING *
        )
        SELECT CASE WHEN \\"B\\".\\"XaValue\\" IS NOT NULL THEN pg_terminate_backend(CAST(\\"B\\".\\"XaValue\\" AS INT))
        ELSE NULL END FROM \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\" \\"A\\"
        LEFT JOIN \\"databaseName\\".\\"tablePrefix__databaseName__TRX__\\" \\"B\\"
        ON \\"A\\".\\"XaKey\\" = \\"B\\".\\"XaKey\\"
        WHERE \\"A\\".\\"EventSubscriber\\" = 'readModelName2'
        AND COALESCE((SELECT LEAST(Count(\\"CleanTrx\\".*), 0) FROM \\"CleanTrx\\"), 0) = 0
        ",
  ],
  Array [
    "query",
    "WITH \\"CTE\\" AS (
         SELECT * FROM \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\"
         WHERE \\"EventSubscriber\\" = 'readModelName2'
         FOR UPDATE NOWAIT
        )
         DELETE FROM \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\"
         WHERE \\"EventSubscriber\\" = 'readModelName2'
         AND (SELECT Count(\\"CTE\\".*) FROM \\"CTE\\") = 1
      ",
  ],
  Array [
    "end",
  ],
  Array [
    "end",
  ],
]
`;

exports[`@resolve-js/readmodel-postgresql-serverless methods "defineTable", "insert", "find", "findOne" 1`] = `
Array [
  Array [
    "connect",
  ],
  Array [
    "query",
    "SELECT 0 AS \\"defunct\\"",
  ],
  Array [
    "query",
    "
      CREATE TABLE IF NOT EXISTS \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\"(
        \\"EventSubscriber\\" VARCHAR(190) NOT NULL,
        \\"IsPaused\\" BOOLEAN NOT NULL,
        \\"EventTypes\\" JSONB NOT NULL,
        \\"AggregateIds\\" JSONB NOT NULL,
        \\"XaKey\\" VARCHAR(190) NULL,
        \\"Cursor\\" JSONB NULL,
        \\"SuccessEvent\\" JSONB NULL,
        \\"FailedEvent\\" JSONB NULL,
        \\"Errors\\" JSONB NULL,
        \\"Schema\\" JSONB NULL,
        PRIMARY KEY(\\"EventSubscriber\\")
      );
      
      CREATE TABLE IF NOT EXISTS \\"databaseName\\".\\"tablePrefix__databaseName__TRX__\\"(
        \\"XaKey\\" VARCHAR(190) NOT NULL,
        \\"XaValue\\" VARCHAR(190) NOT NULL,
        \\"Timestamp\\" BIGINT,
        PRIMARY KEY(\\"XaKey\\")
      );
    ",
  ],
  Array [
    "query",
    "WITH \\"CleanTrx\\" AS (
          DELETE FROM \\"databaseName\\".\\"tablePrefix__databaseName__TRX__\\"
          WHERE \\"Timestamp\\" < CAST(extract(epoch from clock_timestamp()) * 1000 AS BIGINT) - 86400000
          RETURNING *
        )
        SELECT CASE WHEN \\"B\\".\\"XaValue\\" IS NOT NULL THEN pg_terminate_backend(CAST(\\"B\\".\\"XaValue\\" AS INT))
        ELSE NULL END FROM \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\" \\"A\\"
        LEFT JOIN \\"databaseName\\".\\"tablePrefix__databaseName__TRX__\\" \\"B\\"
        ON \\"A\\".\\"XaKey\\" = \\"B\\".\\"XaKey\\"
        WHERE \\"A\\".\\"EventSubscriber\\" = 'readModelName'
        AND COALESCE((SELECT LEAST(Count(\\"CleanTrx\\".*), 0) FROM \\"CleanTrx\\"), 0) = 0
        ",
  ],
  Array [
    "query",
    "WITH \\"CTE\\" AS (
         SELECT * FROM \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\"
         WHERE \\"EventSubscriber\\" = 'readModelName'
         FOR UPDATE NOWAIT
        )
         INSERT INTO \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\"(
          \\"EventSubscriber\\", \\"EventTypes\\", \\"AggregateIds\\", \\"IsPaused\\"
         ) VALUES (
           'readModelName',
           'null',
           'null',
           COALESCE(NULLIF((SELECT Count(\\"CTE\\".*) < 2 FROM \\"CTE\\"), TRUE), FALSE)
         )
         ON CONFLICT (\\"EventSubscriber\\") DO UPDATE SET
         \\"EventTypes\\" = 'null',
         \\"AggregateIds\\" = 'null'
      ",
  ],
  Array [
    "query",
    "
    CREATE TABLE \\"databaseName\\".\\"tablePrefixEntries\\" (
      \\"name\\" JSONB, \\"id\\" JSONB
    );

    
      ALTER TABLE \\"databaseName\\".\\"tablePrefixEntries\\"
      ADD CONSTRAINT \\"id-type-validation\\"
      CHECK (jsonb_typeof(\\"id\\") = 'string');

      CREATE UNIQUE INDEX \\"tablePrefixEntries-id-extracted-field\\"
      ON \\"databaseName\\".\\"tablePrefixEntries\\" (
      CAST((\\"id\\" ->> '$') AS VARCHAR(190)));
     
      CREATE UNIQUE INDEX \\"tablePrefixEntries-id-full-field\\"
      ON \\"databaseName\\".\\"tablePrefixEntries\\" (
        \\"id\\"
      );
    

    COMMENT ON TABLE \\"databaseName\\".\\"tablePrefixEntries\\"
    IS 'RESOLVE-readModelName';
  ",
  ],
  Array [
    "query",
    "INSERT INTO \\"databaseName\\".\\"tablePrefixEntries\\"(\\"id\\", \\"name\\")
      VALUES(CAST('\\"id-1\\"' AS JSONB), CAST('\\"First entry\\"' AS JSONB));
    ",
  ],
  Array [
    "query",
    "INSERT INTO \\"databaseName\\".\\"tablePrefixEntries\\"(\\"id\\", \\"name\\")
      VALUES(CAST('\\"id-2\\"' AS JSONB), CAST('\\"Second entry\\"' AS JSONB));
    ",
  ],
  Array [
    "query",
    "INSERT INTO \\"databaseName\\".\\"tablePrefixEntries\\"(\\"id\\", \\"name\\")
      VALUES(CAST('\\"id-3\\"' AS JSONB), CAST('\\"Second entry\\"' AS JSONB));
    ",
  ],
  Array [
    "query",
    "INSERT INTO \\"databaseName\\".\\"tablePrefixEntries\\"(\\"id\\", \\"name\\")
      VALUES(CAST('\\"id-4\\"' AS JSONB), CAST('\\"First entry\\"' AS JSONB));
    ",
  ],
  Array [
    "query",
    "INSERT INTO \\"databaseName\\".\\"tablePrefixEntries\\"(\\"id\\", \\"name\\")
      VALUES(CAST('\\"id-5\\"' AS JSONB), CAST('\\"Second entry\\"' AS JSONB));
    ",
  ],
  Array [
    "query",
    "SELECT * FROM \\"databaseName\\".\\"tablePrefixEntries\\"
    
    ORDER BY \\"id\\" ASC
    
    OFFSET 0
    LIMIT 268435455
  ;",
  ],
  Array [
    "query",
    "SELECT * FROM \\"databaseName\\".\\"tablePrefixEntries\\"
    
    ORDER BY \\"id\\" DESC
    
    OFFSET 0
    LIMIT 268435455
  ;",
  ],
  Array [
    "query",
    "SELECT * FROM \\"databaseName\\".\\"tablePrefixEntries\\"
    WHERE 
    (((\\"id\\" = CAST('\\"id-3\\"' AS JSONB)) and (not (\\"id\\" is null)) and (not (CAST('\\"id-3\\"' AS JSONB) is null))) or      
    ((\\"id\\" is null) and (CAST('\\"id-3\\"' AS JSONB) is null)))
   
    OFFSET 0
    LIMIT 1;",
  ],
  Array [
    "query",
    "SELECT * FROM \\"databaseName\\".\\"tablePrefixEntries\\"
    WHERE (
    (((\\"name\\" = CAST('\\"Second entry\\"' AS JSONB)) and (not (\\"name\\" is null)) and (not (CAST('\\"Second entry\\"' AS JSONB) is null))) or      
    ((\\"name\\" is null) and (CAST('\\"Second entry\\"' AS JSONB) is null)))
   AND 
    (((\\"id\\" = CAST('\\"id-2\\"' AS JSONB)) and (not (\\"id\\" is null)) and (not (CAST('\\"id-2\\"' AS JSONB) is null))) or      
    ((\\"id\\" is null) and (CAST('\\"id-2\\"' AS JSONB) is null)))
  ) OR (NOT (
    (((\\"id\\" >= CAST('\\"id-1\\"' AS JSONB)) and (not (\\"id\\" is null)) and (not (CAST('\\"id-1\\"' AS JSONB) is null))) or
    ((\\"id\\" is null) and (CAST('\\"id-1\\"' AS JSONB) is null)))
  )) 
    
    
    OFFSET 0
    LIMIT 268435455
  ;",
  ],
  Array [
    "query",
    "
      CREATE TABLE IF NOT EXISTS \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\"(
        \\"EventSubscriber\\" VARCHAR(190) NOT NULL,
        \\"IsPaused\\" BOOLEAN NOT NULL,
        \\"EventTypes\\" JSONB NOT NULL,
        \\"AggregateIds\\" JSONB NOT NULL,
        \\"XaKey\\" VARCHAR(190) NULL,
        \\"Cursor\\" JSONB NULL,
        \\"SuccessEvent\\" JSONB NULL,
        \\"FailedEvent\\" JSONB NULL,
        \\"Errors\\" JSONB NULL,
        \\"Schema\\" JSONB NULL,
        PRIMARY KEY(\\"EventSubscriber\\")
      );
      
      CREATE TABLE IF NOT EXISTS \\"databaseName\\".\\"tablePrefix__databaseName__TRX__\\"(
        \\"XaKey\\" VARCHAR(190) NOT NULL,
        \\"XaValue\\" VARCHAR(190) NOT NULL,
        \\"Timestamp\\" BIGINT,
        PRIMARY KEY(\\"XaKey\\")
      );
    ",
  ],
  Array [
    "query",
    "WITH \\"CleanTrx\\" AS (
          DELETE FROM \\"databaseName\\".\\"tablePrefix__databaseName__TRX__\\"
          WHERE \\"Timestamp\\" < CAST(extract(epoch from clock_timestamp()) * 1000 AS BIGINT) - 86400000
          RETURNING *
        )
        SELECT CASE WHEN \\"B\\".\\"XaValue\\" IS NOT NULL THEN pg_terminate_backend(CAST(\\"B\\".\\"XaValue\\" AS INT))
        ELSE NULL END FROM \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\" \\"A\\"
        LEFT JOIN \\"databaseName\\".\\"tablePrefix__databaseName__TRX__\\" \\"B\\"
        ON \\"A\\".\\"XaKey\\" = \\"B\\".\\"XaKey\\"
        WHERE \\"A\\".\\"EventSubscriber\\" = 'readModelName'
        AND COALESCE((SELECT LEAST(Count(\\"CleanTrx\\".*), 0) FROM \\"CleanTrx\\"), 0) = 0
        ",
  ],
  Array [
    "query",
    "WITH \\"CTE\\" AS (
         SELECT * FROM \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\"
         WHERE \\"EventSubscriber\\" = 'readModelName'
         FOR NO KEY UPDATE NOWAIT
       )
        UPDATE \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\"
        SET \\"Cursor\\" = NULL,
        \\"SuccessEvent\\" = NULL,
        \\"FailedEvent\\" = NULL,
        \\"Errors\\" = NULL,
        \\"IsPaused\\" = TRUE
        WHERE \\"EventSubscriber\\" = 'readModelName'
        AND (SELECT Count(\\"CTE\\".*) FROM \\"CTE\\") = 1
      ",
  ],
  Array [
    "query",
    "SELECT \\"CLS\\".\\"relname\\" AS \\"tableName\\"
    FROM \\"pg_catalog\\".\\"pg_class\\" \\"CLS\\"
    LEFT JOIN \\"pg_catalog\\".\\"pg_description\\" \\"DESC\\"
    ON \\"CLS\\".\\"oid\\" = \\"DESC\\".\\"objoid\\"
    LEFT JOIN \\"pg_catalog\\".\\"pg_namespace\\" \\"NS\\"
    ON \\"CLS\\".\\"relnamespace\\" = \\"NS\\".\\"oid\\"
    WHERE \\"DESC\\".\\"description\\" = 'RESOLVE-readModelName'
    AND \\"NS\\".\\"nspname\\" = 'databaseName'
    AND \\"CLS\\".\\"relkind\\" = 'r'
    ;",
  ],
  Array [
    "query",
    "WITH \\"CleanTrx\\" AS (
          DELETE FROM \\"databaseName\\".\\"tablePrefix__databaseName__TRX__\\"
          WHERE \\"Timestamp\\" < CAST(extract(epoch from clock_timestamp()) * 1000 AS BIGINT) - 86400000
          RETURNING *
        )
        SELECT CASE WHEN \\"B\\".\\"XaValue\\" IS NOT NULL THEN pg_terminate_backend(CAST(\\"B\\".\\"XaValue\\" AS INT))
        ELSE NULL END FROM \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\" \\"A\\"
        LEFT JOIN \\"databaseName\\".\\"tablePrefix__databaseName__TRX__\\" \\"B\\"
        ON \\"A\\".\\"XaKey\\" = \\"B\\".\\"XaKey\\"
        WHERE \\"A\\".\\"EventSubscriber\\" = 'readModelName'
        AND COALESCE((SELECT LEAST(Count(\\"CleanTrx\\".*), 0) FROM \\"CleanTrx\\"), 0) = 0
        ",
  ],
  Array [
    "query",
    "WITH \\"CTE\\" AS (
         SELECT * FROM \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\"
         WHERE \\"EventSubscriber\\" = 'readModelName'
         FOR UPDATE NOWAIT
        )
         DELETE FROM \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\"
         WHERE \\"EventSubscriber\\" = 'readModelName'
         AND (SELECT Count(\\"CTE\\".*) FROM \\"CTE\\") = 1
      ",
  ],
  Array [
    "end",
  ],
]
`;

exports[`@resolve-js/readmodel-postgresql-serverless methods "defineTable", "insert", "update", "count", "delete" 1`] = `
Array [
  Array [
    "connect",
  ],
  Array [
    "query",
    "SELECT 0 AS \\"defunct\\"",
  ],
  Array [
    "query",
    "
      CREATE TABLE IF NOT EXISTS \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\"(
        \\"EventSubscriber\\" VARCHAR(190) NOT NULL,
        \\"IsPaused\\" BOOLEAN NOT NULL,
        \\"EventTypes\\" JSONB NOT NULL,
        \\"AggregateIds\\" JSONB NOT NULL,
        \\"XaKey\\" VARCHAR(190) NULL,
        \\"Cursor\\" JSONB NULL,
        \\"SuccessEvent\\" JSONB NULL,
        \\"FailedEvent\\" JSONB NULL,
        \\"Errors\\" JSONB NULL,
        \\"Schema\\" JSONB NULL,
        PRIMARY KEY(\\"EventSubscriber\\")
      );
      
      CREATE TABLE IF NOT EXISTS \\"databaseName\\".\\"tablePrefix__databaseName__TRX__\\"(
        \\"XaKey\\" VARCHAR(190) NOT NULL,
        \\"XaValue\\" VARCHAR(190) NOT NULL,
        \\"Timestamp\\" BIGINT,
        PRIMARY KEY(\\"XaKey\\")
      );
    ",
  ],
  Array [
    "query",
    "WITH \\"CleanTrx\\" AS (
          DELETE FROM \\"databaseName\\".\\"tablePrefix__databaseName__TRX__\\"
          WHERE \\"Timestamp\\" < CAST(extract(epoch from clock_timestamp()) * 1000 AS BIGINT) - 86400000
          RETURNING *
        )
        SELECT CASE WHEN \\"B\\".\\"XaValue\\" IS NOT NULL THEN pg_terminate_backend(CAST(\\"B\\".\\"XaValue\\" AS INT))
        ELSE NULL END FROM \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\" \\"A\\"
        LEFT JOIN \\"databaseName\\".\\"tablePrefix__databaseName__TRX__\\" \\"B\\"
        ON \\"A\\".\\"XaKey\\" = \\"B\\".\\"XaKey\\"
        WHERE \\"A\\".\\"EventSubscriber\\" = 'readModelName'
        AND COALESCE((SELECT LEAST(Count(\\"CleanTrx\\".*), 0) FROM \\"CleanTrx\\"), 0) = 0
        ",
  ],
  Array [
    "query",
    "WITH \\"CTE\\" AS (
         SELECT * FROM \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\"
         WHERE \\"EventSubscriber\\" = 'readModelName'
         FOR UPDATE NOWAIT
        )
         INSERT INTO \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\"(
          \\"EventSubscriber\\", \\"EventTypes\\", \\"AggregateIds\\", \\"IsPaused\\"
         ) VALUES (
           'readModelName',
           'null',
           'null',
           COALESCE(NULLIF((SELECT Count(\\"CTE\\".*) < 2 FROM \\"CTE\\"), TRUE), FALSE)
         )
         ON CONFLICT (\\"EventSubscriber\\") DO UPDATE SET
         \\"EventTypes\\" = 'null',
         \\"AggregateIds\\" = 'null'
      ",
  ],
  Array [
    "query",
    "
    CREATE TABLE \\"databaseName\\".\\"tablePrefixShoppingLists\\" (
      \\"createdAt\\" JSONB, \\"name\\" JSONB, \\"id\\" JSONB
    );

    
      ALTER TABLE \\"databaseName\\".\\"tablePrefixShoppingLists\\"
      ADD CONSTRAINT \\"id-type-validation\\"
      CHECK (jsonb_typeof(\\"id\\") = 'string');

      CREATE UNIQUE INDEX \\"tablePrefixShoppingLists-id-extracted-field\\"
      ON \\"databaseName\\".\\"tablePrefixShoppingLists\\" (
      CAST((\\"id\\" ->> '$') AS VARCHAR(190)));
     
      CREATE UNIQUE INDEX \\"tablePrefixShoppingLists-id-full-field\\"
      ON \\"databaseName\\".\\"tablePrefixShoppingLists\\" (
        \\"id\\"
      );
    

    COMMENT ON TABLE \\"databaseName\\".\\"tablePrefixShoppingLists\\"
    IS 'RESOLVE-readModelName';
  ",
  ],
  Array [
    "query",
    "INSERT INTO \\"databaseName\\".\\"tablePrefixShoppingLists\\"(\\"id\\", \\"name\\", \\"createdAt\\")
      VALUES(CAST('\\"id-1\\"' AS JSONB), CAST('\\"Products\\"' AS JSONB), CAST('1' AS JSONB));
    ",
  ],
  Array [
    "query",
    "INSERT INTO \\"databaseName\\".\\"tablePrefixShoppingLists\\"(\\"id\\", \\"name\\", \\"createdAt\\")
      VALUES(CAST('\\"id-2\\"' AS JSONB), CAST('\\"Medicines\\"' AS JSONB), CAST('2' AS JSONB));
    ",
  ],
  Array [
    "query",
    "UPDATE \\"databaseName\\".\\"tablePrefixShoppingLists\\"
    SET \\"name\\" = CAST('\\"Products-NEW\\"' AS JSONB)  WHERE 
    (((\\"id\\" = CAST('\\"id-1\\"' AS JSONB)) and (not (\\"id\\" is null)) and (not (CAST('\\"id-1\\"' AS JSONB) is null))) or      
    ((\\"id\\" is null) and (CAST('\\"id-1\\"' AS JSONB) is null)))
   ;",
  ],
  Array [
    "query",
    "SELECT Count(*) AS \\"Count\\"
    FROM \\"databaseName\\".\\"tablePrefixShoppingLists\\"
    WHERE 
    (((\\"id\\" = CAST('\\"id-1\\"' AS JSONB)) and (not (\\"id\\" is null)) and (not (CAST('\\"id-1\\"' AS JSONB) is null))) or      
    ((\\"id\\" is null) and (CAST('\\"id-1\\"' AS JSONB) is null)))
   ;",
  ],
  Array [
    "query",
    "INSERT INTO \\"databaseName\\".\\"tablePrefixShoppingLists\\"(\\"id\\", \\"name\\")
      VALUES(CAST('\\"id-1\\"' AS JSONB), CAST('\\"Products-NEW\\"' AS JSONB));
    ",
  ],
  Array [
    "query",
    "DELETE FROM \\"databaseName\\".\\"tablePrefixShoppingLists\\"
    WHERE 
    (((\\"id\\" = CAST('\\"id-2\\"' AS JSONB)) and (not (\\"id\\" is null)) and (not (CAST('\\"id-2\\"' AS JSONB) is null))) or      
    ((\\"id\\" is null) and (CAST('\\"id-2\\"' AS JSONB) is null)))
   ;",
  ],
  Array [
    "query",
    "SELECT Count(*) AS \\"Count\\"
    FROM \\"databaseName\\".\\"tablePrefixShoppingLists\\"
    WHERE 
    (((\\"id\\" = CAST('\\"id-3\\"' AS JSONB)) and (not (\\"id\\" is null)) and (not (CAST('\\"id-3\\"' AS JSONB) is null))) or      
    ((\\"id\\" is null) and (CAST('\\"id-3\\"' AS JSONB) is null)))
   ;",
  ],
  Array [
    "query",
    "INSERT INTO \\"databaseName\\".\\"tablePrefixShoppingLists\\"(\\"id\\", \\"name\\")
      VALUES(CAST('\\"id-3\\"' AS JSONB), CAST('\\"Entries\\"' AS JSONB));
    ",
  ],
  Array [
    "query",
    "SELECT Count(*) AS \\"Count\\"
    FROM \\"databaseName\\".\\"tablePrefixShoppingLists\\"
    ;",
  ],
  Array [
    "query",
    "
      CREATE TABLE IF NOT EXISTS \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\"(
        \\"EventSubscriber\\" VARCHAR(190) NOT NULL,
        \\"IsPaused\\" BOOLEAN NOT NULL,
        \\"EventTypes\\" JSONB NOT NULL,
        \\"AggregateIds\\" JSONB NOT NULL,
        \\"XaKey\\" VARCHAR(190) NULL,
        \\"Cursor\\" JSONB NULL,
        \\"SuccessEvent\\" JSONB NULL,
        \\"FailedEvent\\" JSONB NULL,
        \\"Errors\\" JSONB NULL,
        \\"Schema\\" JSONB NULL,
        PRIMARY KEY(\\"EventSubscriber\\")
      );
      
      CREATE TABLE IF NOT EXISTS \\"databaseName\\".\\"tablePrefix__databaseName__TRX__\\"(
        \\"XaKey\\" VARCHAR(190) NOT NULL,
        \\"XaValue\\" VARCHAR(190) NOT NULL,
        \\"Timestamp\\" BIGINT,
        PRIMARY KEY(\\"XaKey\\")
      );
    ",
  ],
  Array [
    "query",
    "WITH \\"CleanTrx\\" AS (
          DELETE FROM \\"databaseName\\".\\"tablePrefix__databaseName__TRX__\\"
          WHERE \\"Timestamp\\" < CAST(extract(epoch from clock_timestamp()) * 1000 AS BIGINT) - 86400000
          RETURNING *
        )
        SELECT CASE WHEN \\"B\\".\\"XaValue\\" IS NOT NULL THEN pg_terminate_backend(CAST(\\"B\\".\\"XaValue\\" AS INT))
        ELSE NULL END FROM \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\" \\"A\\"
        LEFT JOIN \\"databaseName\\".\\"tablePrefix__databaseName__TRX__\\" \\"B\\"
        ON \\"A\\".\\"XaKey\\" = \\"B\\".\\"XaKey\\"
        WHERE \\"A\\".\\"EventSubscriber\\" = 'readModelName'
        AND COALESCE((SELECT LEAST(Count(\\"CleanTrx\\".*), 0) FROM \\"CleanTrx\\"), 0) = 0
        ",
  ],
  Array [
    "query",
    "WITH \\"CTE\\" AS (
         SELECT * FROM \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\"
         WHERE \\"EventSubscriber\\" = 'readModelName'
         FOR NO KEY UPDATE NOWAIT
       )
        UPDATE \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\"
        SET \\"Cursor\\" = NULL,
        \\"SuccessEvent\\" = NULL,
        \\"FailedEvent\\" = NULL,
        \\"Errors\\" = NULL,
        \\"IsPaused\\" = TRUE
        WHERE \\"EventSubscriber\\" = 'readModelName'
        AND (SELECT Count(\\"CTE\\".*) FROM \\"CTE\\") = 1
      ",
  ],
  Array [
    "query",
    "SELECT \\"CLS\\".\\"relname\\" AS \\"tableName\\"
    FROM \\"pg_catalog\\".\\"pg_class\\" \\"CLS\\"
    LEFT JOIN \\"pg_catalog\\".\\"pg_description\\" \\"DESC\\"
    ON \\"CLS\\".\\"oid\\" = \\"DESC\\".\\"objoid\\"
    LEFT JOIN \\"pg_catalog\\".\\"pg_namespace\\" \\"NS\\"
    ON \\"CLS\\".\\"relnamespace\\" = \\"NS\\".\\"oid\\"
    WHERE \\"DESC\\".\\"description\\" = 'RESOLVE-readModelName'
    AND \\"NS\\".\\"nspname\\" = 'databaseName'
    AND \\"CLS\\".\\"relkind\\" = 'r'
    ;",
  ],
  Array [
    "query",
    "WITH \\"CleanTrx\\" AS (
          DELETE FROM \\"databaseName\\".\\"tablePrefix__databaseName__TRX__\\"
          WHERE \\"Timestamp\\" < CAST(extract(epoch from clock_timestamp()) * 1000 AS BIGINT) - 86400000
          RETURNING *
        )
        SELECT CASE WHEN \\"B\\".\\"XaValue\\" IS NOT NULL THEN pg_terminate_backend(CAST(\\"B\\".\\"XaValue\\" AS INT))
        ELSE NULL END FROM \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\" \\"A\\"
        LEFT JOIN \\"databaseName\\".\\"tablePrefix__databaseName__TRX__\\" \\"B\\"
        ON \\"A\\".\\"XaKey\\" = \\"B\\".\\"XaKey\\"
        WHERE \\"A\\".\\"EventSubscriber\\" = 'readModelName'
        AND COALESCE((SELECT LEAST(Count(\\"CleanTrx\\".*), 0) FROM \\"CleanTrx\\"), 0) = 0
        ",
  ],
  Array [
    "query",
    "WITH \\"CTE\\" AS (
         SELECT * FROM \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\"
         WHERE \\"EventSubscriber\\" = 'readModelName'
         FOR UPDATE NOWAIT
        )
         DELETE FROM \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\"
         WHERE \\"EventSubscriber\\" = 'readModelName'
         AND (SELECT Count(\\"CTE\\".*) FROM \\"CTE\\") = 1
      ",
  ],
  Array [
    "end",
  ],
]
`;

exports[`@resolve-js/readmodel-postgresql-serverless operator "$inc" 1`] = `
Array [
  Array [
    "connect",
  ],
  Array [
    "query",
    "SELECT 0 AS \\"defunct\\"",
  ],
  Array [
    "query",
    "
      CREATE TABLE IF NOT EXISTS \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\"(
        \\"EventSubscriber\\" VARCHAR(190) NOT NULL,
        \\"IsPaused\\" BOOLEAN NOT NULL,
        \\"EventTypes\\" JSONB NOT NULL,
        \\"AggregateIds\\" JSONB NOT NULL,
        \\"XaKey\\" VARCHAR(190) NULL,
        \\"Cursor\\" JSONB NULL,
        \\"SuccessEvent\\" JSONB NULL,
        \\"FailedEvent\\" JSONB NULL,
        \\"Errors\\" JSONB NULL,
        \\"Schema\\" JSONB NULL,
        PRIMARY KEY(\\"EventSubscriber\\")
      );
      
      CREATE TABLE IF NOT EXISTS \\"databaseName\\".\\"tablePrefix__databaseName__TRX__\\"(
        \\"XaKey\\" VARCHAR(190) NOT NULL,
        \\"XaValue\\" VARCHAR(190) NOT NULL,
        \\"Timestamp\\" BIGINT,
        PRIMARY KEY(\\"XaKey\\")
      );
    ",
  ],
  Array [
    "query",
    "WITH \\"CleanTrx\\" AS (
          DELETE FROM \\"databaseName\\".\\"tablePrefix__databaseName__TRX__\\"
          WHERE \\"Timestamp\\" < CAST(extract(epoch from clock_timestamp()) * 1000 AS BIGINT) - 86400000
          RETURNING *
        )
        SELECT CASE WHEN \\"B\\".\\"XaValue\\" IS NOT NULL THEN pg_terminate_backend(CAST(\\"B\\".\\"XaValue\\" AS INT))
        ELSE NULL END FROM \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\" \\"A\\"
        LEFT JOIN \\"databaseName\\".\\"tablePrefix__databaseName__TRX__\\" \\"B\\"
        ON \\"A\\".\\"XaKey\\" = \\"B\\".\\"XaKey\\"
        WHERE \\"A\\".\\"EventSubscriber\\" = 'readModelName'
        AND COALESCE((SELECT LEAST(Count(\\"CleanTrx\\".*), 0) FROM \\"CleanTrx\\"), 0) = 0
        ",
  ],
  Array [
    "query",
    "WITH \\"CTE\\" AS (
         SELECT * FROM \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\"
         WHERE \\"EventSubscriber\\" = 'readModelName'
         FOR UPDATE NOWAIT
        )
         INSERT INTO \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\"(
          \\"EventSubscriber\\", \\"EventTypes\\", \\"AggregateIds\\", \\"IsPaused\\"
         ) VALUES (
           'readModelName',
           'null',
           'null',
           COALESCE(NULLIF((SELECT Count(\\"CTE\\".*) < 2 FROM \\"CTE\\"), TRUE), FALSE)
         )
         ON CONFLICT (\\"EventSubscriber\\") DO UPDATE SET
         \\"EventTypes\\" = 'null',
         \\"AggregateIds\\" = 'null'
      ",
  ],
  Array [
    "query",
    "
    CREATE TABLE \\"databaseName\\".\\"tablePrefixvalues\\" (
      \\"value\\" JSONB, \\"arr\\" JSONB, \\"obj\\" JSONB, \\"id\\" JSONB
    );

    
      ALTER TABLE \\"databaseName\\".\\"tablePrefixvalues\\"
      ADD CONSTRAINT \\"id-type-validation\\"
      CHECK (jsonb_typeof(\\"id\\") = 'string');

      CREATE UNIQUE INDEX \\"tablePrefixvalues-id-extracted-field\\"
      ON \\"databaseName\\".\\"tablePrefixvalues\\" (
      CAST((\\"id\\" ->> '$') AS VARCHAR(190)));
     
      CREATE UNIQUE INDEX \\"tablePrefixvalues-id-full-field\\"
      ON \\"databaseName\\".\\"tablePrefixvalues\\" (
        \\"id\\"
      );
    

    COMMENT ON TABLE \\"databaseName\\".\\"tablePrefixvalues\\"
    IS 'RESOLVE-readModelName';
  ",
  ],
  Array [
    "query",
    "INSERT INTO \\"databaseName\\".\\"tablePrefixvalues\\"(\\"id\\", \\"value\\", \\"obj\\", \\"arr\\")
      VALUES(CAST('\\"id-1\\"' AS JSONB), CAST('1' AS JSONB), CAST('{\\"value\\":1}' AS JSONB), CAST('[{\\"value\\":1}]' AS JSONB));
    ",
  ],
  Array [
    "query",
    "UPDATE \\"databaseName\\".\\"tablePrefixvalues\\"
    SET \\"value\\" = CAST(( (SELECT CAST(CASE
            WHEN jsonb_typeof(\\"inline-table-0\\".\\"val\\") = 'string' THEN quote_ident(
              CAST(\\"inline-table-0\\".\\"val\\"  #>> '{}' AS VARCHAR) ||
              CAST('1' AS VARCHAR)
            )
            WHEN jsonb_typeof(\\"inline-table-0\\".\\"val\\") = 'number' THEN CAST((
              CAST(\\"inline-table-0\\".\\"val\\"  #>> '{}' AS DECIMAL(48, 16)) +
              CAST(1 AS DECIMAL(48, 16))
            ) AS VARCHAR)
            ELSE (
              SELECT 'Invalid JSON type for $inc operation'
              FROM \\"pg_catalog\\".\\"pg_class\\"
            )
          END AS JSONB) AS \\"pg_catalog\\" FROM (
            SELECT \\"value\\" AS \\"val\\"
          ) \\"inline-table-0\\") ) AS JSONB), \\"obj\\" = (SELECT jsonb_set(\\"inline-table-1\\".\\"val\\", '{\\"value\\"}', CAST(CASE
            WHEN jsonb_typeof(\\"inline-table-1\\".\\"val\\" #> '{\\"value\\"}' ) = 'string' THEN quote_ident(
              CAST(\\"inline-table-1\\".\\"val\\" #>> '{\\"value\\"}' AS VARCHAR) ||
              CAST('1' AS VARCHAR)
            )
            WHEN jsonb_typeof(\\"inline-table-1\\".\\"val\\" #> '{\\"value\\"}' ) = 'number' THEN CAST((
              CAST(\\"inline-table-1\\".\\"val\\" #>> '{\\"value\\"}' AS DECIMAL(48, 16)) +
              CAST(1 AS DECIMAL(48, 16))
            ) AS VARCHAR)
            ELSE (
              SELECT 'Invalid JSON type for $inc operation'
              FROM \\"pg_catalog\\".\\"pg_class\\"
            )
          END AS JSONB)) AS \\"pg_catalog\\" FROM (
            SELECT \\"obj\\" AS \\"val\\"
          ) \\"inline-table-1\\"
          ), \\"arr\\" = (SELECT jsonb_set(\\"inline-table-2\\".\\"val\\", '{0,\\"value\\"}', CAST(CASE
            WHEN jsonb_typeof(\\"inline-table-2\\".\\"val\\" #> '{0,\\"value\\"}' ) = 'string' THEN quote_ident(
              CAST(\\"inline-table-2\\".\\"val\\" #>> '{0,\\"value\\"}' AS VARCHAR) ||
              CAST('1' AS VARCHAR)
            )
            WHEN jsonb_typeof(\\"inline-table-2\\".\\"val\\" #> '{0,\\"value\\"}' ) = 'number' THEN CAST((
              CAST(\\"inline-table-2\\".\\"val\\" #>> '{0,\\"value\\"}' AS DECIMAL(48, 16)) +
              CAST(1 AS DECIMAL(48, 16))
            ) AS VARCHAR)
            ELSE (
              SELECT 'Invalid JSON type for $inc operation'
              FROM \\"pg_catalog\\".\\"pg_class\\"
            )
          END AS JSONB)) AS \\"pg_catalog\\" FROM (
            SELECT \\"arr\\" AS \\"val\\"
          ) \\"inline-table-2\\"
          ) WHERE 
    (((\\"id\\" = CAST('\\"id-1\\"' AS JSONB)) and (not (\\"id\\" is null)) and (not (CAST('\\"id-1\\"' AS JSONB) is null))) or      
    ((\\"id\\" is null) and (CAST('\\"id-1\\"' AS JSONB) is null)))
   ;",
  ],
  Array [
    "query",
    "UPDATE \\"databaseName\\".\\"tablePrefixvalues\\"
    SET \\"value\\" = CAST(( (SELECT CAST(CASE
            WHEN jsonb_typeof(\\"inline-table-0\\".\\"val\\") = 'string' THEN quote_ident(
              CAST(\\"inline-table-0\\".\\"val\\"  #>> '{}' AS VARCHAR) ||
              CAST('-1' AS VARCHAR)
            )
            WHEN jsonb_typeof(\\"inline-table-0\\".\\"val\\") = 'number' THEN CAST((
              CAST(\\"inline-table-0\\".\\"val\\"  #>> '{}' AS DECIMAL(48, 16)) +
              CAST(-1 AS DECIMAL(48, 16))
            ) AS VARCHAR)
            ELSE (
              SELECT 'Invalid JSON type for $inc operation'
              FROM \\"pg_catalog\\".\\"pg_class\\"
            )
          END AS JSONB) AS \\"pg_catalog\\" FROM (
            SELECT \\"value\\" AS \\"val\\"
          ) \\"inline-table-0\\") ) AS JSONB), \\"obj\\" = (SELECT jsonb_set(\\"inline-table-1\\".\\"val\\", '{\\"value\\"}', CAST(CASE
            WHEN jsonb_typeof(\\"inline-table-1\\".\\"val\\" #> '{\\"value\\"}' ) = 'string' THEN quote_ident(
              CAST(\\"inline-table-1\\".\\"val\\" #>> '{\\"value\\"}' AS VARCHAR) ||
              CAST('-1' AS VARCHAR)
            )
            WHEN jsonb_typeof(\\"inline-table-1\\".\\"val\\" #> '{\\"value\\"}' ) = 'number' THEN CAST((
              CAST(\\"inline-table-1\\".\\"val\\" #>> '{\\"value\\"}' AS DECIMAL(48, 16)) +
              CAST(-1 AS DECIMAL(48, 16))
            ) AS VARCHAR)
            ELSE (
              SELECT 'Invalid JSON type for $inc operation'
              FROM \\"pg_catalog\\".\\"pg_class\\"
            )
          END AS JSONB)) AS \\"pg_catalog\\" FROM (
            SELECT \\"obj\\" AS \\"val\\"
          ) \\"inline-table-1\\"
          ), \\"arr\\" = (SELECT jsonb_set(\\"inline-table-2\\".\\"val\\", '{0,\\"value\\"}', CAST(CASE
            WHEN jsonb_typeof(\\"inline-table-2\\".\\"val\\" #> '{0,\\"value\\"}' ) = 'string' THEN quote_ident(
              CAST(\\"inline-table-2\\".\\"val\\" #>> '{0,\\"value\\"}' AS VARCHAR) ||
              CAST('-1' AS VARCHAR)
            )
            WHEN jsonb_typeof(\\"inline-table-2\\".\\"val\\" #> '{0,\\"value\\"}' ) = 'number' THEN CAST((
              CAST(\\"inline-table-2\\".\\"val\\" #>> '{0,\\"value\\"}' AS DECIMAL(48, 16)) +
              CAST(-1 AS DECIMAL(48, 16))
            ) AS VARCHAR)
            ELSE (
              SELECT 'Invalid JSON type for $inc operation'
              FROM \\"pg_catalog\\".\\"pg_class\\"
            )
          END AS JSONB)) AS \\"pg_catalog\\" FROM (
            SELECT \\"arr\\" AS \\"val\\"
          ) \\"inline-table-2\\"
          ) WHERE 
    (((\\"id\\" = CAST('\\"id-1\\"' AS JSONB)) and (not (\\"id\\" is null)) and (not (CAST('\\"id-1\\"' AS JSONB) is null))) or      
    ((\\"id\\" is null) and (CAST('\\"id-1\\"' AS JSONB) is null)))
   ;",
  ],
  Array [
    "query",
    "UPDATE \\"databaseName\\".\\"tablePrefixvalues\\"
    SET \\"value\\" = CAST(( (SELECT CAST(CASE
            WHEN jsonb_typeof(\\"inline-table-0\\".\\"val\\") = 'string' THEN quote_ident(
              CAST(\\"inline-table-0\\".\\"val\\"  #>> '{}' AS VARCHAR) ||
              CAST('0.42' AS VARCHAR)
            )
            WHEN jsonb_typeof(\\"inline-table-0\\".\\"val\\") = 'number' THEN CAST((
              CAST(\\"inline-table-0\\".\\"val\\"  #>> '{}' AS DECIMAL(48, 16)) +
              CAST(0.42 AS DECIMAL(48, 16))
            ) AS VARCHAR)
            ELSE (
              SELECT 'Invalid JSON type for $inc operation'
              FROM \\"pg_catalog\\".\\"pg_class\\"
            )
          END AS JSONB) AS \\"pg_catalog\\" FROM (
            SELECT \\"value\\" AS \\"val\\"
          ) \\"inline-table-0\\") ) AS JSONB), \\"obj\\" = (SELECT jsonb_set(\\"inline-table-1\\".\\"val\\", '{\\"value\\"}', CAST(CASE
            WHEN jsonb_typeof(\\"inline-table-1\\".\\"val\\" #> '{\\"value\\"}' ) = 'string' THEN quote_ident(
              CAST(\\"inline-table-1\\".\\"val\\" #>> '{\\"value\\"}' AS VARCHAR) ||
              CAST('0.42' AS VARCHAR)
            )
            WHEN jsonb_typeof(\\"inline-table-1\\".\\"val\\" #> '{\\"value\\"}' ) = 'number' THEN CAST((
              CAST(\\"inline-table-1\\".\\"val\\" #>> '{\\"value\\"}' AS DECIMAL(48, 16)) +
              CAST(0.42 AS DECIMAL(48, 16))
            ) AS VARCHAR)
            ELSE (
              SELECT 'Invalid JSON type for $inc operation'
              FROM \\"pg_catalog\\".\\"pg_class\\"
            )
          END AS JSONB)) AS \\"pg_catalog\\" FROM (
            SELECT \\"obj\\" AS \\"val\\"
          ) \\"inline-table-1\\"
          ), \\"arr\\" = (SELECT jsonb_set(\\"inline-table-2\\".\\"val\\", '{0,\\"value\\"}', CAST(CASE
            WHEN jsonb_typeof(\\"inline-table-2\\".\\"val\\" #> '{0,\\"value\\"}' ) = 'string' THEN quote_ident(
              CAST(\\"inline-table-2\\".\\"val\\" #>> '{0,\\"value\\"}' AS VARCHAR) ||
              CAST('0.42' AS VARCHAR)
            )
            WHEN jsonb_typeof(\\"inline-table-2\\".\\"val\\" #> '{0,\\"value\\"}' ) = 'number' THEN CAST((
              CAST(\\"inline-table-2\\".\\"val\\" #>> '{0,\\"value\\"}' AS DECIMAL(48, 16)) +
              CAST(0.42 AS DECIMAL(48, 16))
            ) AS VARCHAR)
            ELSE (
              SELECT 'Invalid JSON type for $inc operation'
              FROM \\"pg_catalog\\".\\"pg_class\\"
            )
          END AS JSONB)) AS \\"pg_catalog\\" FROM (
            SELECT \\"arr\\" AS \\"val\\"
          ) \\"inline-table-2\\"
          ) WHERE 
    (((\\"id\\" = CAST('\\"id-1\\"' AS JSONB)) and (not (\\"id\\" is null)) and (not (CAST('\\"id-1\\"' AS JSONB) is null))) or      
    ((\\"id\\" is null) and (CAST('\\"id-1\\"' AS JSONB) is null)))
   ;",
  ],
  Array [
    "query",
    "UPDATE \\"databaseName\\".\\"tablePrefixvalues\\"
    SET \\"value\\" = CAST(( (SELECT CAST(CASE
            WHEN jsonb_typeof(\\"inline-table-0\\".\\"val\\") = 'string' THEN quote_ident(
              CAST(\\"inline-table-0\\".\\"val\\"  #>> '{}' AS VARCHAR) ||
              CAST('-0.42' AS VARCHAR)
            )
            WHEN jsonb_typeof(\\"inline-table-0\\".\\"val\\") = 'number' THEN CAST((
              CAST(\\"inline-table-0\\".\\"val\\"  #>> '{}' AS DECIMAL(48, 16)) +
              CAST(-0.42 AS DECIMAL(48, 16))
            ) AS VARCHAR)
            ELSE (
              SELECT 'Invalid JSON type for $inc operation'
              FROM \\"pg_catalog\\".\\"pg_class\\"
            )
          END AS JSONB) AS \\"pg_catalog\\" FROM (
            SELECT \\"value\\" AS \\"val\\"
          ) \\"inline-table-0\\") ) AS JSONB), \\"obj\\" = (SELECT jsonb_set(\\"inline-table-1\\".\\"val\\", '{\\"value\\"}', CAST(CASE
            WHEN jsonb_typeof(\\"inline-table-1\\".\\"val\\" #> '{\\"value\\"}' ) = 'string' THEN quote_ident(
              CAST(\\"inline-table-1\\".\\"val\\" #>> '{\\"value\\"}' AS VARCHAR) ||
              CAST('-0.42' AS VARCHAR)
            )
            WHEN jsonb_typeof(\\"inline-table-1\\".\\"val\\" #> '{\\"value\\"}' ) = 'number' THEN CAST((
              CAST(\\"inline-table-1\\".\\"val\\" #>> '{\\"value\\"}' AS DECIMAL(48, 16)) +
              CAST(-0.42 AS DECIMAL(48, 16))
            ) AS VARCHAR)
            ELSE (
              SELECT 'Invalid JSON type for $inc operation'
              FROM \\"pg_catalog\\".\\"pg_class\\"
            )
          END AS JSONB)) AS \\"pg_catalog\\" FROM (
            SELECT \\"obj\\" AS \\"val\\"
          ) \\"inline-table-1\\"
          ), \\"arr\\" = (SELECT jsonb_set(\\"inline-table-2\\".\\"val\\", '{0,\\"value\\"}', CAST(CASE
            WHEN jsonb_typeof(\\"inline-table-2\\".\\"val\\" #> '{0,\\"value\\"}' ) = 'string' THEN quote_ident(
              CAST(\\"inline-table-2\\".\\"val\\" #>> '{0,\\"value\\"}' AS VARCHAR) ||
              CAST('-0.42' AS VARCHAR)
            )
            WHEN jsonb_typeof(\\"inline-table-2\\".\\"val\\" #> '{0,\\"value\\"}' ) = 'number' THEN CAST((
              CAST(\\"inline-table-2\\".\\"val\\" #>> '{0,\\"value\\"}' AS DECIMAL(48, 16)) +
              CAST(-0.42 AS DECIMAL(48, 16))
            ) AS VARCHAR)
            ELSE (
              SELECT 'Invalid JSON type for $inc operation'
              FROM \\"pg_catalog\\".\\"pg_class\\"
            )
          END AS JSONB)) AS \\"pg_catalog\\" FROM (
            SELECT \\"arr\\" AS \\"val\\"
          ) \\"inline-table-2\\"
          ) WHERE 
    (((\\"id\\" = CAST('\\"id-1\\"' AS JSONB)) and (not (\\"id\\" is null)) and (not (CAST('\\"id-1\\"' AS JSONB) is null))) or      
    ((\\"id\\" is null) and (CAST('\\"id-1\\"' AS JSONB) is null)))
   ;",
  ],
  Array [
    "query",
    "
      CREATE TABLE IF NOT EXISTS \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\"(
        \\"EventSubscriber\\" VARCHAR(190) NOT NULL,
        \\"IsPaused\\" BOOLEAN NOT NULL,
        \\"EventTypes\\" JSONB NOT NULL,
        \\"AggregateIds\\" JSONB NOT NULL,
        \\"XaKey\\" VARCHAR(190) NULL,
        \\"Cursor\\" JSONB NULL,
        \\"SuccessEvent\\" JSONB NULL,
        \\"FailedEvent\\" JSONB NULL,
        \\"Errors\\" JSONB NULL,
        \\"Schema\\" JSONB NULL,
        PRIMARY KEY(\\"EventSubscriber\\")
      );
      
      CREATE TABLE IF NOT EXISTS \\"databaseName\\".\\"tablePrefix__databaseName__TRX__\\"(
        \\"XaKey\\" VARCHAR(190) NOT NULL,
        \\"XaValue\\" VARCHAR(190) NOT NULL,
        \\"Timestamp\\" BIGINT,
        PRIMARY KEY(\\"XaKey\\")
      );
    ",
  ],
  Array [
    "query",
    "WITH \\"CleanTrx\\" AS (
          DELETE FROM \\"databaseName\\".\\"tablePrefix__databaseName__TRX__\\"
          WHERE \\"Timestamp\\" < CAST(extract(epoch from clock_timestamp()) * 1000 AS BIGINT) - 86400000
          RETURNING *
        )
        SELECT CASE WHEN \\"B\\".\\"XaValue\\" IS NOT NULL THEN pg_terminate_backend(CAST(\\"B\\".\\"XaValue\\" AS INT))
        ELSE NULL END FROM \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\" \\"A\\"
        LEFT JOIN \\"databaseName\\".\\"tablePrefix__databaseName__TRX__\\" \\"B\\"
        ON \\"A\\".\\"XaKey\\" = \\"B\\".\\"XaKey\\"
        WHERE \\"A\\".\\"EventSubscriber\\" = 'readModelName'
        AND COALESCE((SELECT LEAST(Count(\\"CleanTrx\\".*), 0) FROM \\"CleanTrx\\"), 0) = 0
        ",
  ],
  Array [
    "query",
    "WITH \\"CTE\\" AS (
         SELECT * FROM \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\"
         WHERE \\"EventSubscriber\\" = 'readModelName'
         FOR NO KEY UPDATE NOWAIT
       )
        UPDATE \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\"
        SET \\"Cursor\\" = NULL,
        \\"SuccessEvent\\" = NULL,
        \\"FailedEvent\\" = NULL,
        \\"Errors\\" = NULL,
        \\"IsPaused\\" = TRUE
        WHERE \\"EventSubscriber\\" = 'readModelName'
        AND (SELECT Count(\\"CTE\\".*) FROM \\"CTE\\") = 1
      ",
  ],
  Array [
    "query",
    "SELECT \\"CLS\\".\\"relname\\" AS \\"tableName\\"
    FROM \\"pg_catalog\\".\\"pg_class\\" \\"CLS\\"
    LEFT JOIN \\"pg_catalog\\".\\"pg_description\\" \\"DESC\\"
    ON \\"CLS\\".\\"oid\\" = \\"DESC\\".\\"objoid\\"
    LEFT JOIN \\"pg_catalog\\".\\"pg_namespace\\" \\"NS\\"
    ON \\"CLS\\".\\"relnamespace\\" = \\"NS\\".\\"oid\\"
    WHERE \\"DESC\\".\\"description\\" = 'RESOLVE-readModelName'
    AND \\"NS\\".\\"nspname\\" = 'databaseName'
    AND \\"CLS\\".\\"relkind\\" = 'r'
    ;",
  ],
  Array [
    "query",
    "WITH \\"CleanTrx\\" AS (
          DELETE FROM \\"databaseName\\".\\"tablePrefix__databaseName__TRX__\\"
          WHERE \\"Timestamp\\" < CAST(extract(epoch from clock_timestamp()) * 1000 AS BIGINT) - 86400000
          RETURNING *
        )
        SELECT CASE WHEN \\"B\\".\\"XaValue\\" IS NOT NULL THEN pg_terminate_backend(CAST(\\"B\\".\\"XaValue\\" AS INT))
        ELSE NULL END FROM \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\" \\"A\\"
        LEFT JOIN \\"databaseName\\".\\"tablePrefix__databaseName__TRX__\\" \\"B\\"
        ON \\"A\\".\\"XaKey\\" = \\"B\\".\\"XaKey\\"
        WHERE \\"A\\".\\"EventSubscriber\\" = 'readModelName'
        AND COALESCE((SELECT LEAST(Count(\\"CleanTrx\\".*), 0) FROM \\"CleanTrx\\"), 0) = 0
        ",
  ],
  Array [
    "query",
    "WITH \\"CTE\\" AS (
         SELECT * FROM \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\"
         WHERE \\"EventSubscriber\\" = 'readModelName'
         FOR UPDATE NOWAIT
        )
         DELETE FROM \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\"
         WHERE \\"EventSubscriber\\" = 'readModelName'
         AND (SELECT Count(\\"CTE\\".*) FROM \\"CTE\\") = 1
      ",
  ],
  Array [
    "end",
  ],
]
`;

exports[`@resolve-js/readmodel-postgresql-serverless operator "$set" 1`] = `
Array [
  Array [
    "connect",
  ],
  Array [
    "query",
    "SELECT 0 AS \\"defunct\\"",
  ],
  Array [
    "query",
    "
      CREATE TABLE IF NOT EXISTS \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\"(
        \\"EventSubscriber\\" VARCHAR(190) NOT NULL,
        \\"IsPaused\\" BOOLEAN NOT NULL,
        \\"EventTypes\\" JSONB NOT NULL,
        \\"AggregateIds\\" JSONB NOT NULL,
        \\"XaKey\\" VARCHAR(190) NULL,
        \\"Cursor\\" JSONB NULL,
        \\"SuccessEvent\\" JSONB NULL,
        \\"FailedEvent\\" JSONB NULL,
        \\"Errors\\" JSONB NULL,
        \\"Schema\\" JSONB NULL,
        PRIMARY KEY(\\"EventSubscriber\\")
      );
      
      CREATE TABLE IF NOT EXISTS \\"databaseName\\".\\"tablePrefix__databaseName__TRX__\\"(
        \\"XaKey\\" VARCHAR(190) NOT NULL,
        \\"XaValue\\" VARCHAR(190) NOT NULL,
        \\"Timestamp\\" BIGINT,
        PRIMARY KEY(\\"XaKey\\")
      );
    ",
  ],
  Array [
    "query",
    "WITH \\"CleanTrx\\" AS (
          DELETE FROM \\"databaseName\\".\\"tablePrefix__databaseName__TRX__\\"
          WHERE \\"Timestamp\\" < CAST(extract(epoch from clock_timestamp()) * 1000 AS BIGINT) - 86400000
          RETURNING *
        )
        SELECT CASE WHEN \\"B\\".\\"XaValue\\" IS NOT NULL THEN pg_terminate_backend(CAST(\\"B\\".\\"XaValue\\" AS INT))
        ELSE NULL END FROM \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\" \\"A\\"
        LEFT JOIN \\"databaseName\\".\\"tablePrefix__databaseName__TRX__\\" \\"B\\"
        ON \\"A\\".\\"XaKey\\" = \\"B\\".\\"XaKey\\"
        WHERE \\"A\\".\\"EventSubscriber\\" = 'readModelName'
        AND COALESCE((SELECT LEAST(Count(\\"CleanTrx\\".*), 0) FROM \\"CleanTrx\\"), 0) = 0
        ",
  ],
  Array [
    "query",
    "WITH \\"CTE\\" AS (
         SELECT * FROM \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\"
         WHERE \\"EventSubscriber\\" = 'readModelName'
         FOR UPDATE NOWAIT
        )
         INSERT INTO \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\"(
          \\"EventSubscriber\\", \\"EventTypes\\", \\"AggregateIds\\", \\"IsPaused\\"
         ) VALUES (
           'readModelName',
           'null',
           'null',
           COALESCE(NULLIF((SELECT Count(\\"CTE\\".*) < 2 FROM \\"CTE\\"), TRUE), FALSE)
         )
         ON CONFLICT (\\"EventSubscriber\\") DO UPDATE SET
         \\"EventTypes\\" = 'null',
         \\"AggregateIds\\" = 'null'
      ",
  ],
  Array [
    "query",
    "
    CREATE TABLE \\"databaseName\\".\\"tablePrefixvalues\\" (
      \\"value\\" JSONB, \\"arr\\" JSONB, \\"obj\\" JSONB, \\"id\\" JSONB
    );

    
      ALTER TABLE \\"databaseName\\".\\"tablePrefixvalues\\"
      ADD CONSTRAINT \\"id-type-validation\\"
      CHECK (jsonb_typeof(\\"id\\") = 'string');

      CREATE UNIQUE INDEX \\"tablePrefixvalues-id-extracted-field\\"
      ON \\"databaseName\\".\\"tablePrefixvalues\\" (
      CAST((\\"id\\" ->> '$') AS VARCHAR(190)));
     
      CREATE UNIQUE INDEX \\"tablePrefixvalues-id-full-field\\"
      ON \\"databaseName\\".\\"tablePrefixvalues\\" (
        \\"id\\"
      );
    

    COMMENT ON TABLE \\"databaseName\\".\\"tablePrefixvalues\\"
    IS 'RESOLVE-readModelName';
  ",
  ],
  Array [
    "query",
    "INSERT INTO \\"databaseName\\".\\"tablePrefixvalues\\"(\\"id\\", \\"value\\", \\"arr\\", \\"obj\\")
      VALUES(CAST('\\"id-1\\"' AS JSONB), CAST('1' AS JSONB), CAST('[{\\"value\\":1}]' AS JSONB), CAST('{\\"value\\":1}' AS JSONB));
    ",
  ],
  Array [
    "query",
    "UPDATE \\"databaseName\\".\\"tablePrefixvalues\\"
    SET \\"value\\" = CAST('2' AS JSONB) , \\"obj\\" = jsonb_set(
            \\"obj\\",
            '{\\"value\\"}',
            CAST('2' AS JSONB)
            ) , \\"arr\\" = jsonb_set(
            \\"arr\\",
            '{0,\\"value\\"}',
            CAST('2' AS JSONB)
            )  WHERE 
    (((\\"id\\" = CAST('\\"id-1\\"' AS JSONB)) and (not (\\"id\\" is null)) and (not (CAST('\\"id-1\\"' AS JSONB) is null))) or      
    ((\\"id\\" is null) and (CAST('\\"id-1\\"' AS JSONB) is null)))
   ;",
  ],
  Array [
    "query",
    "UPDATE \\"databaseName\\".\\"tablePrefixvalues\\"
    SET \\"obj\\" = jsonb_set(
            jsonb_set(
            \\"obj\\",
            '{\\"a\\"}',
            null
            ) ,
            '{\\"b\\"}',
            null
            ) , \\"a\\" = null , \\"b\\" = null  WHERE 
    (((\\"id\\" = CAST('\\"id-1\\"' AS JSONB)) and (not (\\"id\\" is null)) and (not (CAST('\\"id-1\\"' AS JSONB) is null))) or      
    ((\\"id\\" is null) and (CAST('\\"id-1\\"' AS JSONB) is null)))
   ;",
  ],
  Array [
    "query",
    "
      CREATE TABLE IF NOT EXISTS \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\"(
        \\"EventSubscriber\\" VARCHAR(190) NOT NULL,
        \\"IsPaused\\" BOOLEAN NOT NULL,
        \\"EventTypes\\" JSONB NOT NULL,
        \\"AggregateIds\\" JSONB NOT NULL,
        \\"XaKey\\" VARCHAR(190) NULL,
        \\"Cursor\\" JSONB NULL,
        \\"SuccessEvent\\" JSONB NULL,
        \\"FailedEvent\\" JSONB NULL,
        \\"Errors\\" JSONB NULL,
        \\"Schema\\" JSONB NULL,
        PRIMARY KEY(\\"EventSubscriber\\")
      );
      
      CREATE TABLE IF NOT EXISTS \\"databaseName\\".\\"tablePrefix__databaseName__TRX__\\"(
        \\"XaKey\\" VARCHAR(190) NOT NULL,
        \\"XaValue\\" VARCHAR(190) NOT NULL,
        \\"Timestamp\\" BIGINT,
        PRIMARY KEY(\\"XaKey\\")
      );
    ",
  ],
  Array [
    "query",
    "WITH \\"CleanTrx\\" AS (
          DELETE FROM \\"databaseName\\".\\"tablePrefix__databaseName__TRX__\\"
          WHERE \\"Timestamp\\" < CAST(extract(epoch from clock_timestamp()) * 1000 AS BIGINT) - 86400000
          RETURNING *
        )
        SELECT CASE WHEN \\"B\\".\\"XaValue\\" IS NOT NULL THEN pg_terminate_backend(CAST(\\"B\\".\\"XaValue\\" AS INT))
        ELSE NULL END FROM \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\" \\"A\\"
        LEFT JOIN \\"databaseName\\".\\"tablePrefix__databaseName__TRX__\\" \\"B\\"
        ON \\"A\\".\\"XaKey\\" = \\"B\\".\\"XaKey\\"
        WHERE \\"A\\".\\"EventSubscriber\\" = 'readModelName'
        AND COALESCE((SELECT LEAST(Count(\\"CleanTrx\\".*), 0) FROM \\"CleanTrx\\"), 0) = 0
        ",
  ],
  Array [
    "query",
    "WITH \\"CTE\\" AS (
         SELECT * FROM \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\"
         WHERE \\"EventSubscriber\\" = 'readModelName'
         FOR NO KEY UPDATE NOWAIT
       )
        UPDATE \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\"
        SET \\"Cursor\\" = NULL,
        \\"SuccessEvent\\" = NULL,
        \\"FailedEvent\\" = NULL,
        \\"Errors\\" = NULL,
        \\"IsPaused\\" = TRUE
        WHERE \\"EventSubscriber\\" = 'readModelName'
        AND (SELECT Count(\\"CTE\\".*) FROM \\"CTE\\") = 1
      ",
  ],
  Array [
    "query",
    "SELECT \\"CLS\\".\\"relname\\" AS \\"tableName\\"
    FROM \\"pg_catalog\\".\\"pg_class\\" \\"CLS\\"
    LEFT JOIN \\"pg_catalog\\".\\"pg_description\\" \\"DESC\\"
    ON \\"CLS\\".\\"oid\\" = \\"DESC\\".\\"objoid\\"
    LEFT JOIN \\"pg_catalog\\".\\"pg_namespace\\" \\"NS\\"
    ON \\"CLS\\".\\"relnamespace\\" = \\"NS\\".\\"oid\\"
    WHERE \\"DESC\\".\\"description\\" = 'RESOLVE-readModelName'
    AND \\"NS\\".\\"nspname\\" = 'databaseName'
    AND \\"CLS\\".\\"relkind\\" = 'r'
    ;",
  ],
  Array [
    "query",
    "WITH \\"CleanTrx\\" AS (
          DELETE FROM \\"databaseName\\".\\"tablePrefix__databaseName__TRX__\\"
          WHERE \\"Timestamp\\" < CAST(extract(epoch from clock_timestamp()) * 1000 AS BIGINT) - 86400000
          RETURNING *
        )
        SELECT CASE WHEN \\"B\\".\\"XaValue\\" IS NOT NULL THEN pg_terminate_backend(CAST(\\"B\\".\\"XaValue\\" AS INT))
        ELSE NULL END FROM \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\" \\"A\\"
        LEFT JOIN \\"databaseName\\".\\"tablePrefix__databaseName__TRX__\\" \\"B\\"
        ON \\"A\\".\\"XaKey\\" = \\"B\\".\\"XaKey\\"
        WHERE \\"A\\".\\"EventSubscriber\\" = 'readModelName'
        AND COALESCE((SELECT LEAST(Count(\\"CleanTrx\\".*), 0) FROM \\"CleanTrx\\"), 0) = 0
        ",
  ],
  Array [
    "query",
    "WITH \\"CTE\\" AS (
         SELECT * FROM \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\"
         WHERE \\"EventSubscriber\\" = 'readModelName'
         FOR UPDATE NOWAIT
        )
         DELETE FROM \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\"
         WHERE \\"EventSubscriber\\" = 'readModelName'
         AND (SELECT Count(\\"CTE\\".*) FROM \\"CTE\\") = 1
      ",
  ],
  Array [
    "end",
  ],
]
`;

exports[`@resolve-js/readmodel-postgresql-serverless operator "$unset" 1`] = `
Array [
  Array [
    "connect",
  ],
  Array [
    "query",
    "SELECT 0 AS \\"defunct\\"",
  ],
  Array [
    "query",
    "
      CREATE TABLE IF NOT EXISTS \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\"(
        \\"EventSubscriber\\" VARCHAR(190) NOT NULL,
        \\"IsPaused\\" BOOLEAN NOT NULL,
        \\"EventTypes\\" JSONB NOT NULL,
        \\"AggregateIds\\" JSONB NOT NULL,
        \\"XaKey\\" VARCHAR(190) NULL,
        \\"Cursor\\" JSONB NULL,
        \\"SuccessEvent\\" JSONB NULL,
        \\"FailedEvent\\" JSONB NULL,
        \\"Errors\\" JSONB NULL,
        \\"Schema\\" JSONB NULL,
        PRIMARY KEY(\\"EventSubscriber\\")
      );
      
      CREATE TABLE IF NOT EXISTS \\"databaseName\\".\\"tablePrefix__databaseName__TRX__\\"(
        \\"XaKey\\" VARCHAR(190) NOT NULL,
        \\"XaValue\\" VARCHAR(190) NOT NULL,
        \\"Timestamp\\" BIGINT,
        PRIMARY KEY(\\"XaKey\\")
      );
    ",
  ],
  Array [
    "query",
    "WITH \\"CleanTrx\\" AS (
          DELETE FROM \\"databaseName\\".\\"tablePrefix__databaseName__TRX__\\"
          WHERE \\"Timestamp\\" < CAST(extract(epoch from clock_timestamp()) * 1000 AS BIGINT) - 86400000
          RETURNING *
        )
        SELECT CASE WHEN \\"B\\".\\"XaValue\\" IS NOT NULL THEN pg_terminate_backend(CAST(\\"B\\".\\"XaValue\\" AS INT))
        ELSE NULL END FROM \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\" \\"A\\"
        LEFT JOIN \\"databaseName\\".\\"tablePrefix__databaseName__TRX__\\" \\"B\\"
        ON \\"A\\".\\"XaKey\\" = \\"B\\".\\"XaKey\\"
        WHERE \\"A\\".\\"EventSubscriber\\" = 'readModelName'
        AND COALESCE((SELECT LEAST(Count(\\"CleanTrx\\".*), 0) FROM \\"CleanTrx\\"), 0) = 0
        ",
  ],
  Array [
    "query",
    "WITH \\"CTE\\" AS (
         SELECT * FROM \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\"
         WHERE \\"EventSubscriber\\" = 'readModelName'
         FOR UPDATE NOWAIT
        )
         INSERT INTO \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\"(
          \\"EventSubscriber\\", \\"EventTypes\\", \\"AggregateIds\\", \\"IsPaused\\"
         ) VALUES (
           'readModelName',
           'null',
           'null',
           COALESCE(NULLIF((SELECT Count(\\"CTE\\".*) < 2 FROM \\"CTE\\"), TRUE), FALSE)
         )
         ON CONFLICT (\\"EventSubscriber\\") DO UPDATE SET
         \\"EventTypes\\" = 'null',
         \\"AggregateIds\\" = 'null'
      ",
  ],
  Array [
    "query",
    "
    CREATE TABLE \\"databaseName\\".\\"tablePrefixvalues\\" (
      \\"value\\" JSONB, \\"arr\\" JSONB, \\"obj\\" JSONB, \\"id\\" JSONB
    );

    
      ALTER TABLE \\"databaseName\\".\\"tablePrefixvalues\\"
      ADD CONSTRAINT \\"id-type-validation\\"
      CHECK (jsonb_typeof(\\"id\\") = 'string');

      CREATE UNIQUE INDEX \\"tablePrefixvalues-id-extracted-field\\"
      ON \\"databaseName\\".\\"tablePrefixvalues\\" (
      CAST((\\"id\\" ->> '$') AS VARCHAR(190)));
     
      CREATE UNIQUE INDEX \\"tablePrefixvalues-id-full-field\\"
      ON \\"databaseName\\".\\"tablePrefixvalues\\" (
        \\"id\\"
      );
    

    COMMENT ON TABLE \\"databaseName\\".\\"tablePrefixvalues\\"
    IS 'RESOLVE-readModelName';
  ",
  ],
  Array [
    "query",
    "INSERT INTO \\"databaseName\\".\\"tablePrefixvalues\\"(\\"id\\", \\"value\\", \\"arr\\", \\"obj\\")
      VALUES(CAST('\\"id-1\\"' AS JSONB), CAST('1' AS JSONB), CAST('[{\\"value\\":1}]' AS JSONB), CAST('{\\"value\\":1}' AS JSONB));
    ",
  ],
  Array [
    "query",
    "UPDATE \\"databaseName\\".\\"tablePrefixvalues\\"
    SET \\"value\\" = NULL , \\"obj\\" = \\"obj\\" #- '{\\"value\\"}' , \\"arr\\" = \\"arr\\" #- '{0,\\"value\\"}'  WHERE 
    (((\\"id\\" = CAST('\\"id-1\\"' AS JSONB)) and (not (\\"id\\" is null)) and (not (CAST('\\"id-1\\"' AS JSONB) is null))) or      
    ((\\"id\\" is null) and (CAST('\\"id-1\\"' AS JSONB) is null)))
   ;",
  ],
  Array [
    "query",
    "
      CREATE TABLE IF NOT EXISTS \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\"(
        \\"EventSubscriber\\" VARCHAR(190) NOT NULL,
        \\"IsPaused\\" BOOLEAN NOT NULL,
        \\"EventTypes\\" JSONB NOT NULL,
        \\"AggregateIds\\" JSONB NOT NULL,
        \\"XaKey\\" VARCHAR(190) NULL,
        \\"Cursor\\" JSONB NULL,
        \\"SuccessEvent\\" JSONB NULL,
        \\"FailedEvent\\" JSONB NULL,
        \\"Errors\\" JSONB NULL,
        \\"Schema\\" JSONB NULL,
        PRIMARY KEY(\\"EventSubscriber\\")
      );
      
      CREATE TABLE IF NOT EXISTS \\"databaseName\\".\\"tablePrefix__databaseName__TRX__\\"(
        \\"XaKey\\" VARCHAR(190) NOT NULL,
        \\"XaValue\\" VARCHAR(190) NOT NULL,
        \\"Timestamp\\" BIGINT,
        PRIMARY KEY(\\"XaKey\\")
      );
    ",
  ],
  Array [
    "query",
    "WITH \\"CleanTrx\\" AS (
          DELETE FROM \\"databaseName\\".\\"tablePrefix__databaseName__TRX__\\"
          WHERE \\"Timestamp\\" < CAST(extract(epoch from clock_timestamp()) * 1000 AS BIGINT) - 86400000
          RETURNING *
        )
        SELECT CASE WHEN \\"B\\".\\"XaValue\\" IS NOT NULL THEN pg_terminate_backend(CAST(\\"B\\".\\"XaValue\\" AS INT))
        ELSE NULL END FROM \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\" \\"A\\"
        LEFT JOIN \\"databaseName\\".\\"tablePrefix__databaseName__TRX__\\" \\"B\\"
        ON \\"A\\".\\"XaKey\\" = \\"B\\".\\"XaKey\\"
        WHERE \\"A\\".\\"EventSubscriber\\" = 'readModelName'
        AND COALESCE((SELECT LEAST(Count(\\"CleanTrx\\".*), 0) FROM \\"CleanTrx\\"), 0) = 0
        ",
  ],
  Array [
    "query",
    "WITH \\"CTE\\" AS (
         SELECT * FROM \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\"
         WHERE \\"EventSubscriber\\" = 'readModelName'
         FOR NO KEY UPDATE NOWAIT
       )
        UPDATE \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\"
        SET \\"Cursor\\" = NULL,
        \\"SuccessEvent\\" = NULL,
        \\"FailedEvent\\" = NULL,
        \\"Errors\\" = NULL,
        \\"IsPaused\\" = TRUE
        WHERE \\"EventSubscriber\\" = 'readModelName'
        AND (SELECT Count(\\"CTE\\".*) FROM \\"CTE\\") = 1
      ",
  ],
  Array [
    "query",
    "SELECT \\"CLS\\".\\"relname\\" AS \\"tableName\\"
    FROM \\"pg_catalog\\".\\"pg_class\\" \\"CLS\\"
    LEFT JOIN \\"pg_catalog\\".\\"pg_description\\" \\"DESC\\"
    ON \\"CLS\\".\\"oid\\" = \\"DESC\\".\\"objoid\\"
    LEFT JOIN \\"pg_catalog\\".\\"pg_namespace\\" \\"NS\\"
    ON \\"CLS\\".\\"relnamespace\\" = \\"NS\\".\\"oid\\"
    WHERE \\"DESC\\".\\"description\\" = 'RESOLVE-readModelName'
    AND \\"NS\\".\\"nspname\\" = 'databaseName'
    AND \\"CLS\\".\\"relkind\\" = 'r'
    ;",
  ],
  Array [
    "query",
    "WITH \\"CleanTrx\\" AS (
          DELETE FROM \\"databaseName\\".\\"tablePrefix__databaseName__TRX__\\"
          WHERE \\"Timestamp\\" < CAST(extract(epoch from clock_timestamp()) * 1000 AS BIGINT) - 86400000
          RETURNING *
        )
        SELECT CASE WHEN \\"B\\".\\"XaValue\\" IS NOT NULL THEN pg_terminate_backend(CAST(\\"B\\".\\"XaValue\\" AS INT))
        ELSE NULL END FROM \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\" \\"A\\"
        LEFT JOIN \\"databaseName\\".\\"tablePrefix__databaseName__TRX__\\" \\"B\\"
        ON \\"A\\".\\"XaKey\\" = \\"B\\".\\"XaKey\\"
        WHERE \\"A\\".\\"EventSubscriber\\" = 'readModelName'
        AND COALESCE((SELECT LEAST(Count(\\"CleanTrx\\".*), 0) FROM \\"CleanTrx\\"), 0) = 0
        ",
  ],
  Array [
    "query",
    "WITH \\"CTE\\" AS (
         SELECT * FROM \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\"
         WHERE \\"EventSubscriber\\" = 'readModelName'
         FOR UPDATE NOWAIT
        )
         DELETE FROM \\"databaseName\\".\\"tablePrefix__databaseName__LEDGER__\\"
         WHERE \\"EventSubscriber\\" = 'readModelName'
         AND (SELECT Count(\\"CTE\\".*) FROM \\"CTE\\") = 1
      ",
  ],
  Array [
    "end",
  ],
]
`;
