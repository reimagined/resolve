// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`readmodel-mysql method "drop" 1`] = `
Array [
  Array [
    "query",
    "
    CREATE TABLE IF NOT EXISTS escapeId(__LEDGER__)(
      \`EventSubscriber\` VARCHAR(190) NOT NULL,
      \`IsPaused\` TINYINT NOT NULL,
      \`EventTypes\` JSON NOT NULL,
      \`AggregateIds\` JSON NOT NULL,
      \`XaKey\` VARCHAR(190) NULL,
      \`Cursor\` JSON NULL,
      \`SuccessEvent\` JSON NULL,
      \`FailedEvent\` JSON NULL,
      \`Errors\` JSON NULL,
      \`Schema\` JSON NULL,
      PRIMARY KEY(\`EventSubscriber\`)
    );
    
    CREATE TABLE IF NOT EXISTS escapeId(__TRX__)(
      \`XaKey\` VARCHAR(190) NOT NULL,
      \`XaValue\` VARCHAR(190) NOT NULL,
      \`Timestamp\` BIGINT,
      PRIMARY KEY(\`XaKey\`)
    );
  ",
  ],
  Array [
    "query",
    "DELETE FROM escapeId(__TRX__) WHERE \`Timestamp\` < 
        CAST(ROUND(UNIX_TIMESTAMP(SYSDATE(4)) * 1000) AS UNSIGNED INTEGER) - 86400000
        ",
  ],
  Array [
    "query",
    "SELECT \`B\`.\`XaValue\` FROM escapeId(__LEDGER__) \`A\`
         LEFT JOIN escapeId(__TRX__) \`B\`
         ON \`A\`.\`XaKey\` = \`B\`.\`XaKey\`
         WHERE \`A\`.\`EventSubscriber\` = escapeStr(readModelName1)
        ",
  ],
  Array [
    "query",
    "START TRANSACTION;

         SELECT * FROM escapeId(__LEDGER__)
         WHERE \`EventSubscriber\` = escapeStr(readModelName1)
         FOR UPDATE NOWAIT;

         INSERT INTO escapeId(__LEDGER__)(
          \`EventSubscriber\`, \`EventTypes\`, \`AggregateIds\`, \`IsPaused\`
         ) VALUES (
           escapeStr(readModelName1),
           escapeStr(null),
           escapeStr(null),
           0
         )
         ON DUPLICATE KEY UPDATE
         \`EventTypes\` = escapeStr(null),
         \`AggregateIds\` = escapeStr(null);

         COMMIT;
      ",
  ],
  Array [
    "query",
    "
    CREATE TABLE IF NOT EXISTS escapeId(__LEDGER__)(
      \`EventSubscriber\` VARCHAR(190) NOT NULL,
      \`IsPaused\` TINYINT NOT NULL,
      \`EventTypes\` JSON NOT NULL,
      \`AggregateIds\` JSON NOT NULL,
      \`XaKey\` VARCHAR(190) NULL,
      \`Cursor\` JSON NULL,
      \`SuccessEvent\` JSON NULL,
      \`FailedEvent\` JSON NULL,
      \`Errors\` JSON NULL,
      \`Schema\` JSON NULL,
      PRIMARY KEY(\`EventSubscriber\`)
    );
    
    CREATE TABLE IF NOT EXISTS escapeId(__TRX__)(
      \`XaKey\` VARCHAR(190) NOT NULL,
      \`XaValue\` VARCHAR(190) NOT NULL,
      \`Timestamp\` BIGINT,
      PRIMARY KEY(\`XaKey\`)
    );
  ",
  ],
  Array [
    "query",
    "DELETE FROM escapeId(__TRX__) WHERE \`Timestamp\` < 
        CAST(ROUND(UNIX_TIMESTAMP(SYSDATE(4)) * 1000) AS UNSIGNED INTEGER) - 86400000
        ",
  ],
  Array [
    "query",
    "SELECT \`B\`.\`XaValue\` FROM escapeId(__LEDGER__) \`A\`
         LEFT JOIN escapeId(__TRX__) \`B\`
         ON \`A\`.\`XaKey\` = \`B\`.\`XaKey\`
         WHERE \`A\`.\`EventSubscriber\` = escapeStr(readModelName2)
        ",
  ],
  Array [
    "query",
    "START TRANSACTION;

         SELECT * FROM escapeId(__LEDGER__)
         WHERE \`EventSubscriber\` = escapeStr(readModelName2)
         FOR UPDATE NOWAIT;

         INSERT INTO escapeId(__LEDGER__)(
          \`EventSubscriber\`, \`EventTypes\`, \`AggregateIds\`, \`IsPaused\`
         ) VALUES (
           escapeStr(readModelName2),
           escapeStr(null),
           escapeStr(null),
           0
         )
         ON DUPLICATE KEY UPDATE
         \`EventTypes\` = escapeStr(null),
         \`AggregateIds\` = escapeStr(null);

         COMMIT;
      ",
  ],
  Array [
    "query",
    "CREATE TABLE escapeId(table1) (escapeId(test) JSON,
escapeId(id) JSON, escapeId(id) VARCHAR(700) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci GENERATED ALWAYS AS (escapeId(id)->\\"$\\") STORED  NOT NULL PRIMARY KEY,
INDEX escapeId(id) (escapeId(id)))
      COMMENT = \\"RESOLVE-readModelName1\\"
      ENGINE = \\"InnoDB\\";
      ",
  ],
  Array [
    "query",
    "INSERT INTO escapeId(table1)(escapeId(id), escapeId(test))
      VALUES(CAST(escapeStr(\\"id-1\\") AS JSON), CAST(escapeStr(true) AS JSON));
    ",
  ],
  Array [
    "query",
    "INSERT INTO escapeId(table1)(escapeId(id), escapeId(test))
      VALUES(CAST(escapeStr(\\"id-2\\") AS JSON), CAST(escapeStr(true) AS JSON));
    ",
  ],
  Array [
    "query",
    "CREATE TABLE escapeId(table2) (escapeId(test) JSON,
escapeId(id) JSON, escapeId(id) VARCHAR(700) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci GENERATED ALWAYS AS (escapeId(id)->\\"$\\") STORED  NOT NULL PRIMARY KEY,
INDEX escapeId(id) (escapeId(id)))
      COMMENT = \\"RESOLVE-readModelName2\\"
      ENGINE = \\"InnoDB\\";
      ",
  ],
  Array [
    "query",
    "INSERT INTO escapeId(table2)(escapeId(id), escapeId(test))
      VALUES(CAST(escapeStr(\\"id-3\\") AS JSON), CAST(escapeStr(true) AS JSON));
    ",
  ],
  Array [
    "query",
    "INSERT INTO escapeId(table2)(escapeId(id), escapeId(test))
      VALUES(CAST(escapeStr(\\"id-4\\") AS JSON), CAST(escapeStr(true) AS JSON));
    ",
  ],
  Array [
    "query",
    "INSERT INTO escapeId(table2)(escapeId(id), escapeId(test))
      VALUES(CAST(escapeStr(\\"id-5\\") AS JSON), CAST(escapeStr(true) AS JSON));
    ",
  ],
  Array [
    "query",
    "SELECT Count(*) AS Count FROM escapeId(table1)
    ;",
  ],
  Array [
    "query",
    "SELECT Count(*) AS Count FROM escapeId(table2)
    ;",
  ],
  Array [
    "query",
    "
    CREATE TABLE IF NOT EXISTS escapeId(__LEDGER__)(
      \`EventSubscriber\` VARCHAR(190) NOT NULL,
      \`IsPaused\` TINYINT NOT NULL,
      \`EventTypes\` JSON NOT NULL,
      \`AggregateIds\` JSON NOT NULL,
      \`XaKey\` VARCHAR(190) NULL,
      \`Cursor\` JSON NULL,
      \`SuccessEvent\` JSON NULL,
      \`FailedEvent\` JSON NULL,
      \`Errors\` JSON NULL,
      \`Schema\` JSON NULL,
      PRIMARY KEY(\`EventSubscriber\`)
    );
    
    CREATE TABLE IF NOT EXISTS escapeId(__TRX__)(
      \`XaKey\` VARCHAR(190) NOT NULL,
      \`XaValue\` VARCHAR(190) NOT NULL,
      \`Timestamp\` BIGINT,
      PRIMARY KEY(\`XaKey\`)
    );
  ",
  ],
  Array [
    "query",
    "DELETE FROM escapeId(__TRX__) WHERE \`Timestamp\` < 
        CAST(ROUND(UNIX_TIMESTAMP(SYSDATE(4)) * 1000) AS UNSIGNED INTEGER) - 86400000
        ",
  ],
  Array [
    "query",
    "SELECT \`B\`.\`XaValue\` FROM escapeId(__LEDGER__) \`A\`
         LEFT JOIN escapeId(__TRX__) \`B\`
         ON \`A\`.\`XaKey\` = \`B\`.\`XaKey\`
         WHERE \`A\`.\`EventSubscriber\` = escapeStr(readModelName1)
        ",
  ],
  Array [
    "query",
    "START TRANSACTION;
        
        SELECT * FROM escapeId(__LEDGER__)
        WHERE \`EventSubscriber\` = escapeStr(readModelName1)
        FOR UPDATE NOWAIT;

        UPDATE escapeId(__LEDGER__)
        SET \`Cursor\` = NULL,
        \`SuccessEvent\` = NULL,
        \`FailedEvent\` = NULL,
        \`Errors\` = NULL,
        \`IsPaused\` = TRUE
        WHERE \`EventSubscriber\` = escapeStr(readModelName1);

        COMMIT;
      ",
  ],
  Array [
    "query",
    "SELECT table_name AS \`tableName\` FROM INFORMATION_SCHEMA.TABLES
    WHERE table_comment LIKE \\"RESOLVE-readModelName1\\"
    AND table_schema=DATABASE();",
  ],
  Array [
    "query",
    "DELETE FROM escapeId(__TRX__) WHERE \`Timestamp\` < 
        CAST(ROUND(UNIX_TIMESTAMP(SYSDATE(4)) * 1000) AS UNSIGNED INTEGER) - 86400000
        ",
  ],
  Array [
    "query",
    "SELECT \`B\`.\`XaValue\` FROM escapeId(__LEDGER__) \`A\`
         LEFT JOIN escapeId(__TRX__) \`B\`
         ON \`A\`.\`XaKey\` = \`B\`.\`XaKey\`
         WHERE \`A\`.\`EventSubscriber\` = escapeStr(readModelName1)
        ",
  ],
  Array [
    "query",
    "START TRANSACTION;
        
         SELECT * FROM escapeId(__LEDGER__)
         WHERE \`EventSubscriber\` = escapeStr(readModelName1)
         FOR UPDATE NOWAIT;

         DELETE FROM escapeId(__LEDGER__)
         WHERE \`EventSubscriber\` = escapeStr(readModelName1);

         COMMIT;
      ",
  ],
  Array [
    "query",
    "
    CREATE TABLE IF NOT EXISTS escapeId(__LEDGER__)(
      \`EventSubscriber\` VARCHAR(190) NOT NULL,
      \`IsPaused\` TINYINT NOT NULL,
      \`EventTypes\` JSON NOT NULL,
      \`AggregateIds\` JSON NOT NULL,
      \`XaKey\` VARCHAR(190) NULL,
      \`Cursor\` JSON NULL,
      \`SuccessEvent\` JSON NULL,
      \`FailedEvent\` JSON NULL,
      \`Errors\` JSON NULL,
      \`Schema\` JSON NULL,
      PRIMARY KEY(\`EventSubscriber\`)
    );
    
    CREATE TABLE IF NOT EXISTS escapeId(__TRX__)(
      \`XaKey\` VARCHAR(190) NOT NULL,
      \`XaValue\` VARCHAR(190) NOT NULL,
      \`Timestamp\` BIGINT,
      PRIMARY KEY(\`XaKey\`)
    );
  ",
  ],
  Array [
    "query",
    "DELETE FROM escapeId(__TRX__) WHERE \`Timestamp\` < 
        CAST(ROUND(UNIX_TIMESTAMP(SYSDATE(4)) * 1000) AS UNSIGNED INTEGER) - 86400000
        ",
  ],
  Array [
    "query",
    "SELECT \`B\`.\`XaValue\` FROM escapeId(__LEDGER__) \`A\`
         LEFT JOIN escapeId(__TRX__) \`B\`
         ON \`A\`.\`XaKey\` = \`B\`.\`XaKey\`
         WHERE \`A\`.\`EventSubscriber\` = escapeStr(readModelName2)
        ",
  ],
  Array [
    "query",
    "START TRANSACTION;
        
        SELECT * FROM escapeId(__LEDGER__)
        WHERE \`EventSubscriber\` = escapeStr(readModelName2)
        FOR UPDATE NOWAIT;

        UPDATE escapeId(__LEDGER__)
        SET \`Cursor\` = NULL,
        \`SuccessEvent\` = NULL,
        \`FailedEvent\` = NULL,
        \`Errors\` = NULL,
        \`IsPaused\` = TRUE
        WHERE \`EventSubscriber\` = escapeStr(readModelName2);

        COMMIT;
      ",
  ],
  Array [
    "query",
    "SELECT table_name AS \`tableName\` FROM INFORMATION_SCHEMA.TABLES
    WHERE table_comment LIKE \\"RESOLVE-readModelName2\\"
    AND table_schema=DATABASE();",
  ],
  Array [
    "query",
    "DELETE FROM escapeId(__TRX__) WHERE \`Timestamp\` < 
        CAST(ROUND(UNIX_TIMESTAMP(SYSDATE(4)) * 1000) AS UNSIGNED INTEGER) - 86400000
        ",
  ],
  Array [
    "query",
    "SELECT \`B\`.\`XaValue\` FROM escapeId(__LEDGER__) \`A\`
         LEFT JOIN escapeId(__TRX__) \`B\`
         ON \`A\`.\`XaKey\` = \`B\`.\`XaKey\`
         WHERE \`A\`.\`EventSubscriber\` = escapeStr(readModelName2)
        ",
  ],
  Array [
    "query",
    "START TRANSACTION;
        
         SELECT * FROM escapeId(__LEDGER__)
         WHERE \`EventSubscriber\` = escapeStr(readModelName2)
         FOR UPDATE NOWAIT;

         DELETE FROM escapeId(__LEDGER__)
         WHERE \`EventSubscriber\` = escapeStr(readModelName2);

         COMMIT;
      ",
  ],
  Array [
    "end",
  ],
  Array [
    "end",
  ],
]
`;

exports[`readmodel-mysql methods "defineTable", "insert", "find", "findOne" 1`] = `
Array [
  Array [
    "query",
    "
    CREATE TABLE IF NOT EXISTS escapeId(__LEDGER__)(
      \`EventSubscriber\` VARCHAR(190) NOT NULL,
      \`IsPaused\` TINYINT NOT NULL,
      \`EventTypes\` JSON NOT NULL,
      \`AggregateIds\` JSON NOT NULL,
      \`XaKey\` VARCHAR(190) NULL,
      \`Cursor\` JSON NULL,
      \`SuccessEvent\` JSON NULL,
      \`FailedEvent\` JSON NULL,
      \`Errors\` JSON NULL,
      \`Schema\` JSON NULL,
      PRIMARY KEY(\`EventSubscriber\`)
    );
    
    CREATE TABLE IF NOT EXISTS escapeId(__TRX__)(
      \`XaKey\` VARCHAR(190) NOT NULL,
      \`XaValue\` VARCHAR(190) NOT NULL,
      \`Timestamp\` BIGINT,
      PRIMARY KEY(\`XaKey\`)
    );
  ",
  ],
  Array [
    "query",
    "DELETE FROM escapeId(__TRX__) WHERE \`Timestamp\` < 
        CAST(ROUND(UNIX_TIMESTAMP(SYSDATE(4)) * 1000) AS UNSIGNED INTEGER) - 86400000
        ",
  ],
  Array [
    "query",
    "SELECT \`B\`.\`XaValue\` FROM escapeId(__LEDGER__) \`A\`
         LEFT JOIN escapeId(__TRX__) \`B\`
         ON \`A\`.\`XaKey\` = \`B\`.\`XaKey\`
         WHERE \`A\`.\`EventSubscriber\` = escapeStr(readModelName)
        ",
  ],
  Array [
    "query",
    "START TRANSACTION;

         SELECT * FROM escapeId(__LEDGER__)
         WHERE \`EventSubscriber\` = escapeStr(readModelName)
         FOR UPDATE NOWAIT;

         INSERT INTO escapeId(__LEDGER__)(
          \`EventSubscriber\`, \`EventTypes\`, \`AggregateIds\`, \`IsPaused\`
         ) VALUES (
           escapeStr(readModelName),
           escapeStr(null),
           escapeStr(null),
           0
         )
         ON DUPLICATE KEY UPDATE
         \`EventTypes\` = escapeStr(null),
         \`AggregateIds\` = escapeStr(null);

         COMMIT;
      ",
  ],
  Array [
    "query",
    "CREATE TABLE escapeId(Entries) (escapeId(name) JSON,
escapeId(id) JSON, escapeId(id) VARCHAR(700) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci GENERATED ALWAYS AS (escapeId(id)->\\"$\\") STORED  NOT NULL PRIMARY KEY,
INDEX escapeId(id) (escapeId(id)))
      COMMENT = \\"RESOLVE-readModelName\\"
      ENGINE = \\"InnoDB\\";
      ",
  ],
  Array [
    "query",
    "INSERT INTO escapeId(Entries)(escapeId(id), escapeId(name))
      VALUES(CAST(escapeStr(\\"id-1\\") AS JSON), CAST(escapeStr(\\"First entry\\") AS JSON));
    ",
  ],
  Array [
    "query",
    "INSERT INTO escapeId(Entries)(escapeId(id), escapeId(name))
      VALUES(CAST(escapeStr(\\"id-2\\") AS JSON), CAST(escapeStr(\\"Second entry\\") AS JSON));
    ",
  ],
  Array [
    "query",
    "INSERT INTO escapeId(Entries)(escapeId(id), escapeId(name))
      VALUES(CAST(escapeStr(\\"id-3\\") AS JSON), CAST(escapeStr(\\"Second entry\\") AS JSON));
    ",
  ],
  Array [
    "query",
    "INSERT INTO escapeId(Entries)(escapeId(id), escapeId(name))
      VALUES(CAST(escapeStr(\\"id-4\\") AS JSON), CAST(escapeStr(\\"First entry\\") AS JSON));
    ",
  ],
  Array [
    "query",
    "INSERT INTO escapeId(Entries)(escapeId(id), escapeId(name))
      VALUES(CAST(escapeStr(\\"id-5\\") AS JSON), CAST(escapeStr(\\"Second entry\\") AS JSON));
    ",
  ],
  Array [
    "query",
    "SELECT * FROM escapeId(Entries)
    
    ORDER BY escapeId(id) ASC
    LIMIT 0,268435455;",
  ],
  Array [
    "query",
    "SELECT * FROM escapeId(Entries)
    
    ORDER BY escapeId(id) DESC
    LIMIT 0,268435455;",
  ],
  Array [
    "query",
    "SELECT * FROM escapeId(Entries)
    WHERE 
    (((escapeId(id) = CAST(escapeStr(\\"id-3\\") AS JSON)) and (not (escapeId(id) is null)) and (not (CAST(escapeStr(\\"id-3\\") AS JSON) is null))) or      
    ((escapeId(id) is null) and (CAST(escapeStr(\\"id-3\\") AS JSON) is null)))
   
    LIMIT 0, 1;",
  ],
  Array [
    "query",
    "SELECT * FROM escapeId(Entries)
    WHERE (
    (((escapeId(name) = CAST(escapeStr(\\"Second entry\\") AS JSON)) and (not (escapeId(name) is null)) and (not (CAST(escapeStr(\\"Second entry\\") AS JSON) is null))) or      
    ((escapeId(name) is null) and (CAST(escapeStr(\\"Second entry\\") AS JSON) is null)))
   AND 
    (((escapeId(id) = CAST(escapeStr(\\"id-2\\") AS JSON)) and (not (escapeId(id) is null)) and (not (CAST(escapeStr(\\"id-2\\") AS JSON) is null))) or      
    ((escapeId(id) is null) and (CAST(escapeStr(\\"id-2\\") AS JSON) is null)))
  ) OR (NOT (
    (((escapeId(id) >= CAST(escapeStr(\\"id-1\\") AS JSON)) and (not (escapeId(id) is null)) and (not (CAST(escapeStr(\\"id-1\\") AS JSON) is null))) or
    ((escapeId(id) is null) and (CAST(escapeStr(\\"id-1\\") AS JSON) is null)))
  )) 
    
    LIMIT 0,268435455;",
  ],
  Array [
    "query",
    "
    CREATE TABLE IF NOT EXISTS escapeId(__LEDGER__)(
      \`EventSubscriber\` VARCHAR(190) NOT NULL,
      \`IsPaused\` TINYINT NOT NULL,
      \`EventTypes\` JSON NOT NULL,
      \`AggregateIds\` JSON NOT NULL,
      \`XaKey\` VARCHAR(190) NULL,
      \`Cursor\` JSON NULL,
      \`SuccessEvent\` JSON NULL,
      \`FailedEvent\` JSON NULL,
      \`Errors\` JSON NULL,
      \`Schema\` JSON NULL,
      PRIMARY KEY(\`EventSubscriber\`)
    );
    
    CREATE TABLE IF NOT EXISTS escapeId(__TRX__)(
      \`XaKey\` VARCHAR(190) NOT NULL,
      \`XaValue\` VARCHAR(190) NOT NULL,
      \`Timestamp\` BIGINT,
      PRIMARY KEY(\`XaKey\`)
    );
  ",
  ],
  Array [
    "query",
    "DELETE FROM escapeId(__TRX__) WHERE \`Timestamp\` < 
        CAST(ROUND(UNIX_TIMESTAMP(SYSDATE(4)) * 1000) AS UNSIGNED INTEGER) - 86400000
        ",
  ],
  Array [
    "query",
    "SELECT \`B\`.\`XaValue\` FROM escapeId(__LEDGER__) \`A\`
         LEFT JOIN escapeId(__TRX__) \`B\`
         ON \`A\`.\`XaKey\` = \`B\`.\`XaKey\`
         WHERE \`A\`.\`EventSubscriber\` = escapeStr(readModelName)
        ",
  ],
  Array [
    "query",
    "START TRANSACTION;
        
        SELECT * FROM escapeId(__LEDGER__)
        WHERE \`EventSubscriber\` = escapeStr(readModelName)
        FOR UPDATE NOWAIT;

        UPDATE escapeId(__LEDGER__)
        SET \`Cursor\` = NULL,
        \`SuccessEvent\` = NULL,
        \`FailedEvent\` = NULL,
        \`Errors\` = NULL,
        \`IsPaused\` = TRUE
        WHERE \`EventSubscriber\` = escapeStr(readModelName);

        COMMIT;
      ",
  ],
  Array [
    "query",
    "SELECT table_name AS \`tableName\` FROM INFORMATION_SCHEMA.TABLES
    WHERE table_comment LIKE \\"RESOLVE-readModelName\\"
    AND table_schema=DATABASE();",
  ],
  Array [
    "query",
    "DELETE FROM escapeId(__TRX__) WHERE \`Timestamp\` < 
        CAST(ROUND(UNIX_TIMESTAMP(SYSDATE(4)) * 1000) AS UNSIGNED INTEGER) - 86400000
        ",
  ],
  Array [
    "query",
    "SELECT \`B\`.\`XaValue\` FROM escapeId(__LEDGER__) \`A\`
         LEFT JOIN escapeId(__TRX__) \`B\`
         ON \`A\`.\`XaKey\` = \`B\`.\`XaKey\`
         WHERE \`A\`.\`EventSubscriber\` = escapeStr(readModelName)
        ",
  ],
  Array [
    "query",
    "START TRANSACTION;
        
         SELECT * FROM escapeId(__LEDGER__)
         WHERE \`EventSubscriber\` = escapeStr(readModelName)
         FOR UPDATE NOWAIT;

         DELETE FROM escapeId(__LEDGER__)
         WHERE \`EventSubscriber\` = escapeStr(readModelName);

         COMMIT;
      ",
  ],
  Array [
    "end",
  ],
]
`;

exports[`readmodel-mysql methods "defineTable", "insert", "update", "count", "delete" 1`] = `
Array [
  Array [
    "query",
    "
    CREATE TABLE IF NOT EXISTS escapeId(__LEDGER__)(
      \`EventSubscriber\` VARCHAR(190) NOT NULL,
      \`IsPaused\` TINYINT NOT NULL,
      \`EventTypes\` JSON NOT NULL,
      \`AggregateIds\` JSON NOT NULL,
      \`XaKey\` VARCHAR(190) NULL,
      \`Cursor\` JSON NULL,
      \`SuccessEvent\` JSON NULL,
      \`FailedEvent\` JSON NULL,
      \`Errors\` JSON NULL,
      \`Schema\` JSON NULL,
      PRIMARY KEY(\`EventSubscriber\`)
    );
    
    CREATE TABLE IF NOT EXISTS escapeId(__TRX__)(
      \`XaKey\` VARCHAR(190) NOT NULL,
      \`XaValue\` VARCHAR(190) NOT NULL,
      \`Timestamp\` BIGINT,
      PRIMARY KEY(\`XaKey\`)
    );
  ",
  ],
  Array [
    "query",
    "DELETE FROM escapeId(__TRX__) WHERE \`Timestamp\` < 
        CAST(ROUND(UNIX_TIMESTAMP(SYSDATE(4)) * 1000) AS UNSIGNED INTEGER) - 86400000
        ",
  ],
  Array [
    "query",
    "SELECT \`B\`.\`XaValue\` FROM escapeId(__LEDGER__) \`A\`
         LEFT JOIN escapeId(__TRX__) \`B\`
         ON \`A\`.\`XaKey\` = \`B\`.\`XaKey\`
         WHERE \`A\`.\`EventSubscriber\` = escapeStr(readModelName)
        ",
  ],
  Array [
    "query",
    "START TRANSACTION;

         SELECT * FROM escapeId(__LEDGER__)
         WHERE \`EventSubscriber\` = escapeStr(readModelName)
         FOR UPDATE NOWAIT;

         INSERT INTO escapeId(__LEDGER__)(
          \`EventSubscriber\`, \`EventTypes\`, \`AggregateIds\`, \`IsPaused\`
         ) VALUES (
           escapeStr(readModelName),
           escapeStr(null),
           escapeStr(null),
           0
         )
         ON DUPLICATE KEY UPDATE
         \`EventTypes\` = escapeStr(null),
         \`AggregateIds\` = escapeStr(null);

         COMMIT;
      ",
  ],
  Array [
    "query",
    "CREATE TABLE escapeId(ShoppingLists) (escapeId(createdAt) JSON,
escapeId(name) JSON,
escapeId(id) JSON, escapeId(id) VARCHAR(700) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci GENERATED ALWAYS AS (escapeId(id)->\\"$\\") STORED  NOT NULL PRIMARY KEY,
INDEX escapeId(id) (escapeId(id)))
      COMMENT = \\"RESOLVE-readModelName\\"
      ENGINE = \\"InnoDB\\";
      ",
  ],
  Array [
    "query",
    "INSERT INTO escapeId(ShoppingLists)(escapeId(id), escapeId(name), escapeId(createdAt))
      VALUES(CAST(escapeStr(\\"id-1\\") AS JSON), CAST(escapeStr(\\"Products\\") AS JSON), CAST(escapeStr(1) AS JSON));
    ",
  ],
  Array [
    "query",
    "INSERT INTO escapeId(ShoppingLists)(escapeId(id), escapeId(name), escapeId(createdAt))
      VALUES(CAST(escapeStr(\\"id-2\\") AS JSON), CAST(escapeStr(\\"Medicines\\") AS JSON), CAST(escapeStr(2) AS JSON));
    ",
  ],
  Array [
    "query",
    "UPDATE escapeId(ShoppingLists)
    SET escapeId(name) = CAST(escapeStr(\\"Products-NEW\\") AS JSON)  WHERE 
    (((escapeId(id) = CAST(escapeStr(\\"id-1\\") AS JSON)) and (not (escapeId(id) is null)) and (not (CAST(escapeStr(\\"id-1\\") AS JSON) is null))) or      
    ((escapeId(id) is null) and (CAST(escapeStr(\\"id-1\\") AS JSON) is null)))
   ;",
  ],
  Array [
    "query",
    "SELECT Count(*) AS Count FROM escapeId(ShoppingLists)
    WHERE 
    (((escapeId(id) = CAST(escapeStr(\\"id-1\\") AS JSON)) and (not (escapeId(id) is null)) and (not (CAST(escapeStr(\\"id-1\\") AS JSON) is null))) or      
    ((escapeId(id) is null) and (CAST(escapeStr(\\"id-1\\") AS JSON) is null)))
   ;",
  ],
  Array [
    "query",
    "INSERT INTO escapeId(ShoppingLists)(escapeId(id), escapeId(name))
      VALUES(CAST(escapeStr(\\"id-1\\") AS JSON), CAST(escapeStr(\\"Products-NEW\\") AS JSON));
    ",
  ],
  Array [
    "query",
    "DELETE FROM escapeId(ShoppingLists)
    WHERE 
    (((escapeId(id) = CAST(escapeStr(\\"id-2\\") AS JSON)) and (not (escapeId(id) is null)) and (not (CAST(escapeStr(\\"id-2\\") AS JSON) is null))) or      
    ((escapeId(id) is null) and (CAST(escapeStr(\\"id-2\\") AS JSON) is null)))
   ;",
  ],
  Array [
    "query",
    "SELECT Count(*) AS Count FROM escapeId(ShoppingLists)
    WHERE 
    (((escapeId(id) = CAST(escapeStr(\\"id-3\\") AS JSON)) and (not (escapeId(id) is null)) and (not (CAST(escapeStr(\\"id-3\\") AS JSON) is null))) or      
    ((escapeId(id) is null) and (CAST(escapeStr(\\"id-3\\") AS JSON) is null)))
   ;",
  ],
  Array [
    "query",
    "INSERT INTO escapeId(ShoppingLists)(escapeId(id), escapeId(name))
      VALUES(CAST(escapeStr(\\"id-3\\") AS JSON), CAST(escapeStr(\\"Entries\\") AS JSON));
    ",
  ],
  Array [
    "query",
    "SELECT Count(*) AS Count FROM escapeId(ShoppingLists)
    ;",
  ],
  Array [
    "query",
    "
    CREATE TABLE IF NOT EXISTS escapeId(__LEDGER__)(
      \`EventSubscriber\` VARCHAR(190) NOT NULL,
      \`IsPaused\` TINYINT NOT NULL,
      \`EventTypes\` JSON NOT NULL,
      \`AggregateIds\` JSON NOT NULL,
      \`XaKey\` VARCHAR(190) NULL,
      \`Cursor\` JSON NULL,
      \`SuccessEvent\` JSON NULL,
      \`FailedEvent\` JSON NULL,
      \`Errors\` JSON NULL,
      \`Schema\` JSON NULL,
      PRIMARY KEY(\`EventSubscriber\`)
    );
    
    CREATE TABLE IF NOT EXISTS escapeId(__TRX__)(
      \`XaKey\` VARCHAR(190) NOT NULL,
      \`XaValue\` VARCHAR(190) NOT NULL,
      \`Timestamp\` BIGINT,
      PRIMARY KEY(\`XaKey\`)
    );
  ",
  ],
  Array [
    "query",
    "DELETE FROM escapeId(__TRX__) WHERE \`Timestamp\` < 
        CAST(ROUND(UNIX_TIMESTAMP(SYSDATE(4)) * 1000) AS UNSIGNED INTEGER) - 86400000
        ",
  ],
  Array [
    "query",
    "SELECT \`B\`.\`XaValue\` FROM escapeId(__LEDGER__) \`A\`
         LEFT JOIN escapeId(__TRX__) \`B\`
         ON \`A\`.\`XaKey\` = \`B\`.\`XaKey\`
         WHERE \`A\`.\`EventSubscriber\` = escapeStr(readModelName)
        ",
  ],
  Array [
    "query",
    "START TRANSACTION;
        
        SELECT * FROM escapeId(__LEDGER__)
        WHERE \`EventSubscriber\` = escapeStr(readModelName)
        FOR UPDATE NOWAIT;

        UPDATE escapeId(__LEDGER__)
        SET \`Cursor\` = NULL,
        \`SuccessEvent\` = NULL,
        \`FailedEvent\` = NULL,
        \`Errors\` = NULL,
        \`IsPaused\` = TRUE
        WHERE \`EventSubscriber\` = escapeStr(readModelName);

        COMMIT;
      ",
  ],
  Array [
    "query",
    "SELECT table_name AS \`tableName\` FROM INFORMATION_SCHEMA.TABLES
    WHERE table_comment LIKE \\"RESOLVE-readModelName\\"
    AND table_schema=DATABASE();",
  ],
  Array [
    "query",
    "DELETE FROM escapeId(__TRX__) WHERE \`Timestamp\` < 
        CAST(ROUND(UNIX_TIMESTAMP(SYSDATE(4)) * 1000) AS UNSIGNED INTEGER) - 86400000
        ",
  ],
  Array [
    "query",
    "SELECT \`B\`.\`XaValue\` FROM escapeId(__LEDGER__) \`A\`
         LEFT JOIN escapeId(__TRX__) \`B\`
         ON \`A\`.\`XaKey\` = \`B\`.\`XaKey\`
         WHERE \`A\`.\`EventSubscriber\` = escapeStr(readModelName)
        ",
  ],
  Array [
    "query",
    "START TRANSACTION;
        
         SELECT * FROM escapeId(__LEDGER__)
         WHERE \`EventSubscriber\` = escapeStr(readModelName)
         FOR UPDATE NOWAIT;

         DELETE FROM escapeId(__LEDGER__)
         WHERE \`EventSubscriber\` = escapeStr(readModelName);

         COMMIT;
      ",
  ],
  Array [
    "end",
  ],
]
`;

exports[`readmodel-mysql operator "$inc" 1`] = `
Array [
  Array [
    "query",
    "
    CREATE TABLE IF NOT EXISTS escapeId(__LEDGER__)(
      \`EventSubscriber\` VARCHAR(190) NOT NULL,
      \`IsPaused\` TINYINT NOT NULL,
      \`EventTypes\` JSON NOT NULL,
      \`AggregateIds\` JSON NOT NULL,
      \`XaKey\` VARCHAR(190) NULL,
      \`Cursor\` JSON NULL,
      \`SuccessEvent\` JSON NULL,
      \`FailedEvent\` JSON NULL,
      \`Errors\` JSON NULL,
      \`Schema\` JSON NULL,
      PRIMARY KEY(\`EventSubscriber\`)
    );
    
    CREATE TABLE IF NOT EXISTS escapeId(__TRX__)(
      \`XaKey\` VARCHAR(190) NOT NULL,
      \`XaValue\` VARCHAR(190) NOT NULL,
      \`Timestamp\` BIGINT,
      PRIMARY KEY(\`XaKey\`)
    );
  ",
  ],
  Array [
    "query",
    "DELETE FROM escapeId(__TRX__) WHERE \`Timestamp\` < 
        CAST(ROUND(UNIX_TIMESTAMP(SYSDATE(4)) * 1000) AS UNSIGNED INTEGER) - 86400000
        ",
  ],
  Array [
    "query",
    "SELECT \`B\`.\`XaValue\` FROM escapeId(__LEDGER__) \`A\`
         LEFT JOIN escapeId(__TRX__) \`B\`
         ON \`A\`.\`XaKey\` = \`B\`.\`XaKey\`
         WHERE \`A\`.\`EventSubscriber\` = escapeStr(readModelName)
        ",
  ],
  Array [
    "query",
    "START TRANSACTION;

         SELECT * FROM escapeId(__LEDGER__)
         WHERE \`EventSubscriber\` = escapeStr(readModelName)
         FOR UPDATE NOWAIT;

         INSERT INTO escapeId(__LEDGER__)(
          \`EventSubscriber\`, \`EventTypes\`, \`AggregateIds\`, \`IsPaused\`
         ) VALUES (
           escapeStr(readModelName),
           escapeStr(null),
           escapeStr(null),
           0
         )
         ON DUPLICATE KEY UPDATE
         \`EventTypes\` = escapeStr(null),
         \`AggregateIds\` = escapeStr(null);

         COMMIT;
      ",
  ],
  Array [
    "query",
    "CREATE TABLE escapeId(values) (escapeId(value) JSON,
escapeId(arr) JSON,
escapeId(obj) JSON,
escapeId(id) JSON, escapeId(id) VARCHAR(700) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci GENERATED ALWAYS AS (escapeId(id)->\\"$\\") STORED  NOT NULL PRIMARY KEY,
INDEX escapeId(id) (escapeId(id)))
      COMMENT = \\"RESOLVE-readModelName\\"
      ENGINE = \\"InnoDB\\";
      ",
  ],
  Array [
    "query",
    "INSERT INTO escapeId(values)(escapeId(id), escapeId(value), escapeId(obj), escapeId(arr))
      VALUES(CAST(escapeStr(\\"id-1\\") AS JSON), CAST(escapeStr(1) AS JSON), CAST(escapeStr({\\"value\\":1}) AS JSON), CAST(escapeStr([{\\"value\\":1}]) AS JSON));
    ",
  ],
  Array [
    "query",
    "UPDATE escapeId(values)
    SET escapeId(value) =  CAST(CASE
            WHEN JSON_TYPE(escapeId(value)) = 'STRING' THEN JSON_QUOTE(CONCAT(
              CAST(JSON_UNQUOTE(escapeId(value)) AS CHAR),
              CAST(escapeStr(1) AS CHAR)
            ))
            WHEN JSON_TYPE(escapeId(value)) = 'INTEGER' THEN (
              CAST(escapeId(value) AS DECIMAL(48, 16)) +
              CAST(1 AS DECIMAL(48, 16))
            )
            WHEN JSON_TYPE(escapeId(value)) = 'DOUBLE' THEN (
              CAST(escapeId(value) AS DECIMAL(48, 16)) +
              CAST(1 AS DECIMAL(48, 16))
            )
            WHEN JSON_TYPE(escapeId(value)) = 'DECIMAL' THEN (
              CAST(escapeId(value) AS DECIMAL(48, 16)) +
              CAST(1 AS DECIMAL(48, 16))
            )
            ELSE (
              SELECT 'Invalid JSON type for $inc operation' 
              FROM information_schema.tables
            )
          END AS JSON) , escapeId(obj) = JSON_SET(escapeId(obj), '$.\\"value\\"',  CAST(CASE
            WHEN JSON_TYPE(JSON_EXTRACT(escapeId(obj), '$.\\"value\\"')) = 'STRING' THEN JSON_QUOTE(CONCAT(
              CAST(JSON_UNQUOTE(JSON_EXTRACT(escapeId(obj), '$.\\"value\\"')) AS CHAR),
              CAST(escapeStr(1) AS CHAR)
            ))
            WHEN JSON_TYPE(JSON_EXTRACT(escapeId(obj), '$.\\"value\\"')) = 'INTEGER' THEN (
              CAST(JSON_EXTRACT(escapeId(obj), '$.\\"value\\"') AS DECIMAL(48, 16)) +
              CAST(1 AS DECIMAL(48, 16))
            )
            WHEN JSON_TYPE(JSON_EXTRACT(escapeId(obj), '$.\\"value\\"')) = 'DOUBLE' THEN (
              CAST(JSON_EXTRACT(escapeId(obj), '$.\\"value\\"') AS DECIMAL(48, 16)) +
              CAST(1 AS DECIMAL(48, 16))
            )
            WHEN JSON_TYPE(JSON_EXTRACT(escapeId(obj), '$.\\"value\\"')) = 'DECIMAL' THEN (
              CAST(JSON_EXTRACT(escapeId(obj), '$.\\"value\\"') AS DECIMAL(48, 16)) +
              CAST(1 AS DECIMAL(48, 16))
            )
            ELSE (
              SELECT 'Invalid JSON type for $inc operation' 
              FROM information_schema.tables
            )
          END AS JSON) ), escapeId(arr) = JSON_SET(escapeId(arr), '$[0].\\"value\\"',  CAST(CASE
            WHEN JSON_TYPE(JSON_EXTRACT(escapeId(arr), '$[0].\\"value\\"')) = 'STRING' THEN JSON_QUOTE(CONCAT(
              CAST(JSON_UNQUOTE(JSON_EXTRACT(escapeId(arr), '$[0].\\"value\\"')) AS CHAR),
              CAST(escapeStr(1) AS CHAR)
            ))
            WHEN JSON_TYPE(JSON_EXTRACT(escapeId(arr), '$[0].\\"value\\"')) = 'INTEGER' THEN (
              CAST(JSON_EXTRACT(escapeId(arr), '$[0].\\"value\\"') AS DECIMAL(48, 16)) +
              CAST(1 AS DECIMAL(48, 16))
            )
            WHEN JSON_TYPE(JSON_EXTRACT(escapeId(arr), '$[0].\\"value\\"')) = 'DOUBLE' THEN (
              CAST(JSON_EXTRACT(escapeId(arr), '$[0].\\"value\\"') AS DECIMAL(48, 16)) +
              CAST(1 AS DECIMAL(48, 16))
            )
            WHEN JSON_TYPE(JSON_EXTRACT(escapeId(arr), '$[0].\\"value\\"')) = 'DECIMAL' THEN (
              CAST(JSON_EXTRACT(escapeId(arr), '$[0].\\"value\\"') AS DECIMAL(48, 16)) +
              CAST(1 AS DECIMAL(48, 16))
            )
            ELSE (
              SELECT 'Invalid JSON type for $inc operation' 
              FROM information_schema.tables
            )
          END AS JSON) ) WHERE 
    (((escapeId(id) = CAST(escapeStr(\\"id-1\\") AS JSON)) and (not (escapeId(id) is null)) and (not (CAST(escapeStr(\\"id-1\\") AS JSON) is null))) or      
    ((escapeId(id) is null) and (CAST(escapeStr(\\"id-1\\") AS JSON) is null)))
   ;",
  ],
  Array [
    "query",
    "UPDATE escapeId(values)
    SET escapeId(value) =  CAST(CASE
            WHEN JSON_TYPE(escapeId(value)) = 'STRING' THEN JSON_QUOTE(CONCAT(
              CAST(JSON_UNQUOTE(escapeId(value)) AS CHAR),
              CAST(escapeStr(-1) AS CHAR)
            ))
            WHEN JSON_TYPE(escapeId(value)) = 'INTEGER' THEN (
              CAST(escapeId(value) AS DECIMAL(48, 16)) +
              CAST(-1 AS DECIMAL(48, 16))
            )
            WHEN JSON_TYPE(escapeId(value)) = 'DOUBLE' THEN (
              CAST(escapeId(value) AS DECIMAL(48, 16)) +
              CAST(-1 AS DECIMAL(48, 16))
            )
            WHEN JSON_TYPE(escapeId(value)) = 'DECIMAL' THEN (
              CAST(escapeId(value) AS DECIMAL(48, 16)) +
              CAST(-1 AS DECIMAL(48, 16))
            )
            ELSE (
              SELECT 'Invalid JSON type for $inc operation' 
              FROM information_schema.tables
            )
          END AS JSON) , escapeId(obj) = JSON_SET(escapeId(obj), '$.\\"value\\"',  CAST(CASE
            WHEN JSON_TYPE(JSON_EXTRACT(escapeId(obj), '$.\\"value\\"')) = 'STRING' THEN JSON_QUOTE(CONCAT(
              CAST(JSON_UNQUOTE(JSON_EXTRACT(escapeId(obj), '$.\\"value\\"')) AS CHAR),
              CAST(escapeStr(-1) AS CHAR)
            ))
            WHEN JSON_TYPE(JSON_EXTRACT(escapeId(obj), '$.\\"value\\"')) = 'INTEGER' THEN (
              CAST(JSON_EXTRACT(escapeId(obj), '$.\\"value\\"') AS DECIMAL(48, 16)) +
              CAST(-1 AS DECIMAL(48, 16))
            )
            WHEN JSON_TYPE(JSON_EXTRACT(escapeId(obj), '$.\\"value\\"')) = 'DOUBLE' THEN (
              CAST(JSON_EXTRACT(escapeId(obj), '$.\\"value\\"') AS DECIMAL(48, 16)) +
              CAST(-1 AS DECIMAL(48, 16))
            )
            WHEN JSON_TYPE(JSON_EXTRACT(escapeId(obj), '$.\\"value\\"')) = 'DECIMAL' THEN (
              CAST(JSON_EXTRACT(escapeId(obj), '$.\\"value\\"') AS DECIMAL(48, 16)) +
              CAST(-1 AS DECIMAL(48, 16))
            )
            ELSE (
              SELECT 'Invalid JSON type for $inc operation' 
              FROM information_schema.tables
            )
          END AS JSON) ), escapeId(arr) = JSON_SET(escapeId(arr), '$[0].\\"value\\"',  CAST(CASE
            WHEN JSON_TYPE(JSON_EXTRACT(escapeId(arr), '$[0].\\"value\\"')) = 'STRING' THEN JSON_QUOTE(CONCAT(
              CAST(JSON_UNQUOTE(JSON_EXTRACT(escapeId(arr), '$[0].\\"value\\"')) AS CHAR),
              CAST(escapeStr(-1) AS CHAR)
            ))
            WHEN JSON_TYPE(JSON_EXTRACT(escapeId(arr), '$[0].\\"value\\"')) = 'INTEGER' THEN (
              CAST(JSON_EXTRACT(escapeId(arr), '$[0].\\"value\\"') AS DECIMAL(48, 16)) +
              CAST(-1 AS DECIMAL(48, 16))
            )
            WHEN JSON_TYPE(JSON_EXTRACT(escapeId(arr), '$[0].\\"value\\"')) = 'DOUBLE' THEN (
              CAST(JSON_EXTRACT(escapeId(arr), '$[0].\\"value\\"') AS DECIMAL(48, 16)) +
              CAST(-1 AS DECIMAL(48, 16))
            )
            WHEN JSON_TYPE(JSON_EXTRACT(escapeId(arr), '$[0].\\"value\\"')) = 'DECIMAL' THEN (
              CAST(JSON_EXTRACT(escapeId(arr), '$[0].\\"value\\"') AS DECIMAL(48, 16)) +
              CAST(-1 AS DECIMAL(48, 16))
            )
            ELSE (
              SELECT 'Invalid JSON type for $inc operation' 
              FROM information_schema.tables
            )
          END AS JSON) ) WHERE 
    (((escapeId(id) = CAST(escapeStr(\\"id-1\\") AS JSON)) and (not (escapeId(id) is null)) and (not (CAST(escapeStr(\\"id-1\\") AS JSON) is null))) or      
    ((escapeId(id) is null) and (CAST(escapeStr(\\"id-1\\") AS JSON) is null)))
   ;",
  ],
  Array [
    "query",
    "UPDATE escapeId(values)
    SET escapeId(value) =  CAST(CASE
            WHEN JSON_TYPE(escapeId(value)) = 'STRING' THEN JSON_QUOTE(CONCAT(
              CAST(JSON_UNQUOTE(escapeId(value)) AS CHAR),
              CAST(escapeStr(0.42) AS CHAR)
            ))
            WHEN JSON_TYPE(escapeId(value)) = 'INTEGER' THEN (
              CAST(escapeId(value) AS DECIMAL(48, 16)) +
              CAST(0.42 AS DECIMAL(48, 16))
            )
            WHEN JSON_TYPE(escapeId(value)) = 'DOUBLE' THEN (
              CAST(escapeId(value) AS DECIMAL(48, 16)) +
              CAST(0.42 AS DECIMAL(48, 16))
            )
            WHEN JSON_TYPE(escapeId(value)) = 'DECIMAL' THEN (
              CAST(escapeId(value) AS DECIMAL(48, 16)) +
              CAST(0.42 AS DECIMAL(48, 16))
            )
            ELSE (
              SELECT 'Invalid JSON type for $inc operation' 
              FROM information_schema.tables
            )
          END AS JSON) , escapeId(obj) = JSON_SET(escapeId(obj), '$.\\"value\\"',  CAST(CASE
            WHEN JSON_TYPE(JSON_EXTRACT(escapeId(obj), '$.\\"value\\"')) = 'STRING' THEN JSON_QUOTE(CONCAT(
              CAST(JSON_UNQUOTE(JSON_EXTRACT(escapeId(obj), '$.\\"value\\"')) AS CHAR),
              CAST(escapeStr(0.42) AS CHAR)
            ))
            WHEN JSON_TYPE(JSON_EXTRACT(escapeId(obj), '$.\\"value\\"')) = 'INTEGER' THEN (
              CAST(JSON_EXTRACT(escapeId(obj), '$.\\"value\\"') AS DECIMAL(48, 16)) +
              CAST(0.42 AS DECIMAL(48, 16))
            )
            WHEN JSON_TYPE(JSON_EXTRACT(escapeId(obj), '$.\\"value\\"')) = 'DOUBLE' THEN (
              CAST(JSON_EXTRACT(escapeId(obj), '$.\\"value\\"') AS DECIMAL(48, 16)) +
              CAST(0.42 AS DECIMAL(48, 16))
            )
            WHEN JSON_TYPE(JSON_EXTRACT(escapeId(obj), '$.\\"value\\"')) = 'DECIMAL' THEN (
              CAST(JSON_EXTRACT(escapeId(obj), '$.\\"value\\"') AS DECIMAL(48, 16)) +
              CAST(0.42 AS DECIMAL(48, 16))
            )
            ELSE (
              SELECT 'Invalid JSON type for $inc operation' 
              FROM information_schema.tables
            )
          END AS JSON) ), escapeId(arr) = JSON_SET(escapeId(arr), '$[0].\\"value\\"',  CAST(CASE
            WHEN JSON_TYPE(JSON_EXTRACT(escapeId(arr), '$[0].\\"value\\"')) = 'STRING' THEN JSON_QUOTE(CONCAT(
              CAST(JSON_UNQUOTE(JSON_EXTRACT(escapeId(arr), '$[0].\\"value\\"')) AS CHAR),
              CAST(escapeStr(0.42) AS CHAR)
            ))
            WHEN JSON_TYPE(JSON_EXTRACT(escapeId(arr), '$[0].\\"value\\"')) = 'INTEGER' THEN (
              CAST(JSON_EXTRACT(escapeId(arr), '$[0].\\"value\\"') AS DECIMAL(48, 16)) +
              CAST(0.42 AS DECIMAL(48, 16))
            )
            WHEN JSON_TYPE(JSON_EXTRACT(escapeId(arr), '$[0].\\"value\\"')) = 'DOUBLE' THEN (
              CAST(JSON_EXTRACT(escapeId(arr), '$[0].\\"value\\"') AS DECIMAL(48, 16)) +
              CAST(0.42 AS DECIMAL(48, 16))
            )
            WHEN JSON_TYPE(JSON_EXTRACT(escapeId(arr), '$[0].\\"value\\"')) = 'DECIMAL' THEN (
              CAST(JSON_EXTRACT(escapeId(arr), '$[0].\\"value\\"') AS DECIMAL(48, 16)) +
              CAST(0.42 AS DECIMAL(48, 16))
            )
            ELSE (
              SELECT 'Invalid JSON type for $inc operation' 
              FROM information_schema.tables
            )
          END AS JSON) ) WHERE 
    (((escapeId(id) = CAST(escapeStr(\\"id-1\\") AS JSON)) and (not (escapeId(id) is null)) and (not (CAST(escapeStr(\\"id-1\\") AS JSON) is null))) or      
    ((escapeId(id) is null) and (CAST(escapeStr(\\"id-1\\") AS JSON) is null)))
   ;",
  ],
  Array [
    "query",
    "UPDATE escapeId(values)
    SET escapeId(value) =  CAST(CASE
            WHEN JSON_TYPE(escapeId(value)) = 'STRING' THEN JSON_QUOTE(CONCAT(
              CAST(JSON_UNQUOTE(escapeId(value)) AS CHAR),
              CAST(escapeStr(-0.42) AS CHAR)
            ))
            WHEN JSON_TYPE(escapeId(value)) = 'INTEGER' THEN (
              CAST(escapeId(value) AS DECIMAL(48, 16)) +
              CAST(-0.42 AS DECIMAL(48, 16))
            )
            WHEN JSON_TYPE(escapeId(value)) = 'DOUBLE' THEN (
              CAST(escapeId(value) AS DECIMAL(48, 16)) +
              CAST(-0.42 AS DECIMAL(48, 16))
            )
            WHEN JSON_TYPE(escapeId(value)) = 'DECIMAL' THEN (
              CAST(escapeId(value) AS DECIMAL(48, 16)) +
              CAST(-0.42 AS DECIMAL(48, 16))
            )
            ELSE (
              SELECT 'Invalid JSON type for $inc operation' 
              FROM information_schema.tables
            )
          END AS JSON) , escapeId(obj) = JSON_SET(escapeId(obj), '$.\\"value\\"',  CAST(CASE
            WHEN JSON_TYPE(JSON_EXTRACT(escapeId(obj), '$.\\"value\\"')) = 'STRING' THEN JSON_QUOTE(CONCAT(
              CAST(JSON_UNQUOTE(JSON_EXTRACT(escapeId(obj), '$.\\"value\\"')) AS CHAR),
              CAST(escapeStr(-0.42) AS CHAR)
            ))
            WHEN JSON_TYPE(JSON_EXTRACT(escapeId(obj), '$.\\"value\\"')) = 'INTEGER' THEN (
              CAST(JSON_EXTRACT(escapeId(obj), '$.\\"value\\"') AS DECIMAL(48, 16)) +
              CAST(-0.42 AS DECIMAL(48, 16))
            )
            WHEN JSON_TYPE(JSON_EXTRACT(escapeId(obj), '$.\\"value\\"')) = 'DOUBLE' THEN (
              CAST(JSON_EXTRACT(escapeId(obj), '$.\\"value\\"') AS DECIMAL(48, 16)) +
              CAST(-0.42 AS DECIMAL(48, 16))
            )
            WHEN JSON_TYPE(JSON_EXTRACT(escapeId(obj), '$.\\"value\\"')) = 'DECIMAL' THEN (
              CAST(JSON_EXTRACT(escapeId(obj), '$.\\"value\\"') AS DECIMAL(48, 16)) +
              CAST(-0.42 AS DECIMAL(48, 16))
            )
            ELSE (
              SELECT 'Invalid JSON type for $inc operation' 
              FROM information_schema.tables
            )
          END AS JSON) ), escapeId(arr) = JSON_SET(escapeId(arr), '$[0].\\"value\\"',  CAST(CASE
            WHEN JSON_TYPE(JSON_EXTRACT(escapeId(arr), '$[0].\\"value\\"')) = 'STRING' THEN JSON_QUOTE(CONCAT(
              CAST(JSON_UNQUOTE(JSON_EXTRACT(escapeId(arr), '$[0].\\"value\\"')) AS CHAR),
              CAST(escapeStr(-0.42) AS CHAR)
            ))
            WHEN JSON_TYPE(JSON_EXTRACT(escapeId(arr), '$[0].\\"value\\"')) = 'INTEGER' THEN (
              CAST(JSON_EXTRACT(escapeId(arr), '$[0].\\"value\\"') AS DECIMAL(48, 16)) +
              CAST(-0.42 AS DECIMAL(48, 16))
            )
            WHEN JSON_TYPE(JSON_EXTRACT(escapeId(arr), '$[0].\\"value\\"')) = 'DOUBLE' THEN (
              CAST(JSON_EXTRACT(escapeId(arr), '$[0].\\"value\\"') AS DECIMAL(48, 16)) +
              CAST(-0.42 AS DECIMAL(48, 16))
            )
            WHEN JSON_TYPE(JSON_EXTRACT(escapeId(arr), '$[0].\\"value\\"')) = 'DECIMAL' THEN (
              CAST(JSON_EXTRACT(escapeId(arr), '$[0].\\"value\\"') AS DECIMAL(48, 16)) +
              CAST(-0.42 AS DECIMAL(48, 16))
            )
            ELSE (
              SELECT 'Invalid JSON type for $inc operation' 
              FROM information_schema.tables
            )
          END AS JSON) ) WHERE 
    (((escapeId(id) = CAST(escapeStr(\\"id-1\\") AS JSON)) and (not (escapeId(id) is null)) and (not (CAST(escapeStr(\\"id-1\\") AS JSON) is null))) or      
    ((escapeId(id) is null) and (CAST(escapeStr(\\"id-1\\") AS JSON) is null)))
   ;",
  ],
  Array [
    "query",
    "
    CREATE TABLE IF NOT EXISTS escapeId(__LEDGER__)(
      \`EventSubscriber\` VARCHAR(190) NOT NULL,
      \`IsPaused\` TINYINT NOT NULL,
      \`EventTypes\` JSON NOT NULL,
      \`AggregateIds\` JSON NOT NULL,
      \`XaKey\` VARCHAR(190) NULL,
      \`Cursor\` JSON NULL,
      \`SuccessEvent\` JSON NULL,
      \`FailedEvent\` JSON NULL,
      \`Errors\` JSON NULL,
      \`Schema\` JSON NULL,
      PRIMARY KEY(\`EventSubscriber\`)
    );
    
    CREATE TABLE IF NOT EXISTS escapeId(__TRX__)(
      \`XaKey\` VARCHAR(190) NOT NULL,
      \`XaValue\` VARCHAR(190) NOT NULL,
      \`Timestamp\` BIGINT,
      PRIMARY KEY(\`XaKey\`)
    );
  ",
  ],
  Array [
    "query",
    "DELETE FROM escapeId(__TRX__) WHERE \`Timestamp\` < 
        CAST(ROUND(UNIX_TIMESTAMP(SYSDATE(4)) * 1000) AS UNSIGNED INTEGER) - 86400000
        ",
  ],
  Array [
    "query",
    "SELECT \`B\`.\`XaValue\` FROM escapeId(__LEDGER__) \`A\`
         LEFT JOIN escapeId(__TRX__) \`B\`
         ON \`A\`.\`XaKey\` = \`B\`.\`XaKey\`
         WHERE \`A\`.\`EventSubscriber\` = escapeStr(readModelName)
        ",
  ],
  Array [
    "query",
    "START TRANSACTION;
        
        SELECT * FROM escapeId(__LEDGER__)
        WHERE \`EventSubscriber\` = escapeStr(readModelName)
        FOR UPDATE NOWAIT;

        UPDATE escapeId(__LEDGER__)
        SET \`Cursor\` = NULL,
        \`SuccessEvent\` = NULL,
        \`FailedEvent\` = NULL,
        \`Errors\` = NULL,
        \`IsPaused\` = TRUE
        WHERE \`EventSubscriber\` = escapeStr(readModelName);

        COMMIT;
      ",
  ],
  Array [
    "query",
    "SELECT table_name AS \`tableName\` FROM INFORMATION_SCHEMA.TABLES
    WHERE table_comment LIKE \\"RESOLVE-readModelName\\"
    AND table_schema=DATABASE();",
  ],
  Array [
    "query",
    "DELETE FROM escapeId(__TRX__) WHERE \`Timestamp\` < 
        CAST(ROUND(UNIX_TIMESTAMP(SYSDATE(4)) * 1000) AS UNSIGNED INTEGER) - 86400000
        ",
  ],
  Array [
    "query",
    "SELECT \`B\`.\`XaValue\` FROM escapeId(__LEDGER__) \`A\`
         LEFT JOIN escapeId(__TRX__) \`B\`
         ON \`A\`.\`XaKey\` = \`B\`.\`XaKey\`
         WHERE \`A\`.\`EventSubscriber\` = escapeStr(readModelName)
        ",
  ],
  Array [
    "query",
    "START TRANSACTION;
        
         SELECT * FROM escapeId(__LEDGER__)
         WHERE \`EventSubscriber\` = escapeStr(readModelName)
         FOR UPDATE NOWAIT;

         DELETE FROM escapeId(__LEDGER__)
         WHERE \`EventSubscriber\` = escapeStr(readModelName);

         COMMIT;
      ",
  ],
  Array [
    "end",
  ],
]
`;

exports[`readmodel-mysql operator "$set" 1`] = `
Array [
  Array [
    "query",
    "
    CREATE TABLE IF NOT EXISTS escapeId(__LEDGER__)(
      \`EventSubscriber\` VARCHAR(190) NOT NULL,
      \`IsPaused\` TINYINT NOT NULL,
      \`EventTypes\` JSON NOT NULL,
      \`AggregateIds\` JSON NOT NULL,
      \`XaKey\` VARCHAR(190) NULL,
      \`Cursor\` JSON NULL,
      \`SuccessEvent\` JSON NULL,
      \`FailedEvent\` JSON NULL,
      \`Errors\` JSON NULL,
      \`Schema\` JSON NULL,
      PRIMARY KEY(\`EventSubscriber\`)
    );
    
    CREATE TABLE IF NOT EXISTS escapeId(__TRX__)(
      \`XaKey\` VARCHAR(190) NOT NULL,
      \`XaValue\` VARCHAR(190) NOT NULL,
      \`Timestamp\` BIGINT,
      PRIMARY KEY(\`XaKey\`)
    );
  ",
  ],
  Array [
    "query",
    "DELETE FROM escapeId(__TRX__) WHERE \`Timestamp\` < 
        CAST(ROUND(UNIX_TIMESTAMP(SYSDATE(4)) * 1000) AS UNSIGNED INTEGER) - 86400000
        ",
  ],
  Array [
    "query",
    "SELECT \`B\`.\`XaValue\` FROM escapeId(__LEDGER__) \`A\`
         LEFT JOIN escapeId(__TRX__) \`B\`
         ON \`A\`.\`XaKey\` = \`B\`.\`XaKey\`
         WHERE \`A\`.\`EventSubscriber\` = escapeStr(readModelName)
        ",
  ],
  Array [
    "query",
    "START TRANSACTION;

         SELECT * FROM escapeId(__LEDGER__)
         WHERE \`EventSubscriber\` = escapeStr(readModelName)
         FOR UPDATE NOWAIT;

         INSERT INTO escapeId(__LEDGER__)(
          \`EventSubscriber\`, \`EventTypes\`, \`AggregateIds\`, \`IsPaused\`
         ) VALUES (
           escapeStr(readModelName),
           escapeStr(null),
           escapeStr(null),
           0
         )
         ON DUPLICATE KEY UPDATE
         \`EventTypes\` = escapeStr(null),
         \`AggregateIds\` = escapeStr(null);

         COMMIT;
      ",
  ],
  Array [
    "query",
    "CREATE TABLE escapeId(values) (escapeId(value) JSON,
escapeId(arr) JSON,
escapeId(obj) JSON,
escapeId(id) JSON, escapeId(id) VARCHAR(700) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci GENERATED ALWAYS AS (escapeId(id)->\\"$\\") STORED  NOT NULL PRIMARY KEY,
INDEX escapeId(id) (escapeId(id)))
      COMMENT = \\"RESOLVE-readModelName\\"
      ENGINE = \\"InnoDB\\";
      ",
  ],
  Array [
    "query",
    "INSERT INTO escapeId(values)(escapeId(id), escapeId(value), escapeId(arr), escapeId(obj))
      VALUES(CAST(escapeStr(\\"id-1\\") AS JSON), CAST(escapeStr(1) AS JSON), CAST(escapeStr([{\\"value\\":1}]) AS JSON), CAST(escapeStr({\\"value\\":1}) AS JSON));
    ",
  ],
  Array [
    "query",
    "UPDATE escapeId(values)
    SET escapeId(value) = CAST(escapeStr(2) AS JSON) , escapeId(obj) = JSON_SET(escapeId(obj), '$.\\"value\\"', CAST(escapeStr(2) AS JSON)) , escapeId(arr) = JSON_SET(escapeId(arr), '$[0].\\"value\\"', CAST(escapeStr(2) AS JSON))  WHERE 
    (((escapeId(id) = CAST(escapeStr(\\"id-1\\") AS JSON)) and (not (escapeId(id) is null)) and (not (CAST(escapeStr(\\"id-1\\") AS JSON) is null))) or      
    ((escapeId(id) is null) and (CAST(escapeStr(\\"id-1\\") AS JSON) is null)))
   ;",
  ],
  Array [
    "query",
    "UPDATE escapeId(values)
    SET escapeId(obj) = JSON_SET(escapeId(obj), '$.\\"a\\"', null) , escapeId(obj) = JSON_SET(escapeId(obj), '$.\\"b\\"', null) , escapeId(a) = null , escapeId(b) = null  WHERE 
    (((escapeId(id) = CAST(escapeStr(\\"id-1\\") AS JSON)) and (not (escapeId(id) is null)) and (not (CAST(escapeStr(\\"id-1\\") AS JSON) is null))) or      
    ((escapeId(id) is null) and (CAST(escapeStr(\\"id-1\\") AS JSON) is null)))
   ;",
  ],
  Array [
    "query",
    "
    CREATE TABLE IF NOT EXISTS escapeId(__LEDGER__)(
      \`EventSubscriber\` VARCHAR(190) NOT NULL,
      \`IsPaused\` TINYINT NOT NULL,
      \`EventTypes\` JSON NOT NULL,
      \`AggregateIds\` JSON NOT NULL,
      \`XaKey\` VARCHAR(190) NULL,
      \`Cursor\` JSON NULL,
      \`SuccessEvent\` JSON NULL,
      \`FailedEvent\` JSON NULL,
      \`Errors\` JSON NULL,
      \`Schema\` JSON NULL,
      PRIMARY KEY(\`EventSubscriber\`)
    );
    
    CREATE TABLE IF NOT EXISTS escapeId(__TRX__)(
      \`XaKey\` VARCHAR(190) NOT NULL,
      \`XaValue\` VARCHAR(190) NOT NULL,
      \`Timestamp\` BIGINT,
      PRIMARY KEY(\`XaKey\`)
    );
  ",
  ],
  Array [
    "query",
    "DELETE FROM escapeId(__TRX__) WHERE \`Timestamp\` < 
        CAST(ROUND(UNIX_TIMESTAMP(SYSDATE(4)) * 1000) AS UNSIGNED INTEGER) - 86400000
        ",
  ],
  Array [
    "query",
    "SELECT \`B\`.\`XaValue\` FROM escapeId(__LEDGER__) \`A\`
         LEFT JOIN escapeId(__TRX__) \`B\`
         ON \`A\`.\`XaKey\` = \`B\`.\`XaKey\`
         WHERE \`A\`.\`EventSubscriber\` = escapeStr(readModelName)
        ",
  ],
  Array [
    "query",
    "START TRANSACTION;
        
        SELECT * FROM escapeId(__LEDGER__)
        WHERE \`EventSubscriber\` = escapeStr(readModelName)
        FOR UPDATE NOWAIT;

        UPDATE escapeId(__LEDGER__)
        SET \`Cursor\` = NULL,
        \`SuccessEvent\` = NULL,
        \`FailedEvent\` = NULL,
        \`Errors\` = NULL,
        \`IsPaused\` = TRUE
        WHERE \`EventSubscriber\` = escapeStr(readModelName);

        COMMIT;
      ",
  ],
  Array [
    "query",
    "SELECT table_name AS \`tableName\` FROM INFORMATION_SCHEMA.TABLES
    WHERE table_comment LIKE \\"RESOLVE-readModelName\\"
    AND table_schema=DATABASE();",
  ],
  Array [
    "query",
    "DELETE FROM escapeId(__TRX__) WHERE \`Timestamp\` < 
        CAST(ROUND(UNIX_TIMESTAMP(SYSDATE(4)) * 1000) AS UNSIGNED INTEGER) - 86400000
        ",
  ],
  Array [
    "query",
    "SELECT \`B\`.\`XaValue\` FROM escapeId(__LEDGER__) \`A\`
         LEFT JOIN escapeId(__TRX__) \`B\`
         ON \`A\`.\`XaKey\` = \`B\`.\`XaKey\`
         WHERE \`A\`.\`EventSubscriber\` = escapeStr(readModelName)
        ",
  ],
  Array [
    "query",
    "START TRANSACTION;
        
         SELECT * FROM escapeId(__LEDGER__)
         WHERE \`EventSubscriber\` = escapeStr(readModelName)
         FOR UPDATE NOWAIT;

         DELETE FROM escapeId(__LEDGER__)
         WHERE \`EventSubscriber\` = escapeStr(readModelName);

         COMMIT;
      ",
  ],
  Array [
    "end",
  ],
]
`;

exports[`readmodel-mysql operator "$unset" 1`] = `
Array [
  Array [
    "query",
    "
    CREATE TABLE IF NOT EXISTS escapeId(__LEDGER__)(
      \`EventSubscriber\` VARCHAR(190) NOT NULL,
      \`IsPaused\` TINYINT NOT NULL,
      \`EventTypes\` JSON NOT NULL,
      \`AggregateIds\` JSON NOT NULL,
      \`XaKey\` VARCHAR(190) NULL,
      \`Cursor\` JSON NULL,
      \`SuccessEvent\` JSON NULL,
      \`FailedEvent\` JSON NULL,
      \`Errors\` JSON NULL,
      \`Schema\` JSON NULL,
      PRIMARY KEY(\`EventSubscriber\`)
    );
    
    CREATE TABLE IF NOT EXISTS escapeId(__TRX__)(
      \`XaKey\` VARCHAR(190) NOT NULL,
      \`XaValue\` VARCHAR(190) NOT NULL,
      \`Timestamp\` BIGINT,
      PRIMARY KEY(\`XaKey\`)
    );
  ",
  ],
  Array [
    "query",
    "DELETE FROM escapeId(__TRX__) WHERE \`Timestamp\` < 
        CAST(ROUND(UNIX_TIMESTAMP(SYSDATE(4)) * 1000) AS UNSIGNED INTEGER) - 86400000
        ",
  ],
  Array [
    "query",
    "SELECT \`B\`.\`XaValue\` FROM escapeId(__LEDGER__) \`A\`
         LEFT JOIN escapeId(__TRX__) \`B\`
         ON \`A\`.\`XaKey\` = \`B\`.\`XaKey\`
         WHERE \`A\`.\`EventSubscriber\` = escapeStr(readModelName)
        ",
  ],
  Array [
    "query",
    "START TRANSACTION;

         SELECT * FROM escapeId(__LEDGER__)
         WHERE \`EventSubscriber\` = escapeStr(readModelName)
         FOR UPDATE NOWAIT;

         INSERT INTO escapeId(__LEDGER__)(
          \`EventSubscriber\`, \`EventTypes\`, \`AggregateIds\`, \`IsPaused\`
         ) VALUES (
           escapeStr(readModelName),
           escapeStr(null),
           escapeStr(null),
           0
         )
         ON DUPLICATE KEY UPDATE
         \`EventTypes\` = escapeStr(null),
         \`AggregateIds\` = escapeStr(null);

         COMMIT;
      ",
  ],
  Array [
    "query",
    "CREATE TABLE escapeId(values) (escapeId(value) JSON,
escapeId(arr) JSON,
escapeId(obj) JSON,
escapeId(id) JSON, escapeId(id) VARCHAR(700) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci GENERATED ALWAYS AS (escapeId(id)->\\"$\\") STORED  NOT NULL PRIMARY KEY,
INDEX escapeId(id) (escapeId(id)))
      COMMENT = \\"RESOLVE-readModelName\\"
      ENGINE = \\"InnoDB\\";
      ",
  ],
  Array [
    "query",
    "INSERT INTO escapeId(values)(escapeId(id), escapeId(value), escapeId(arr), escapeId(obj))
      VALUES(CAST(escapeStr(\\"id-1\\") AS JSON), CAST(escapeStr(1) AS JSON), CAST(escapeStr([{\\"value\\":1}]) AS JSON), CAST(escapeStr({\\"value\\":1}) AS JSON));
    ",
  ],
  Array [
    "query",
    "UPDATE escapeId(values)
    SET escapeId(value) = NULL , escapeId(obj) = JSON_REMOVE(escapeId(obj), '$.\\"value\\"') , escapeId(arr) = JSON_REMOVE(escapeId(arr), '$[0].\\"value\\"')  WHERE 
    (((escapeId(id) = CAST(escapeStr(\\"id-1\\") AS JSON)) and (not (escapeId(id) is null)) and (not (CAST(escapeStr(\\"id-1\\") AS JSON) is null))) or      
    ((escapeId(id) is null) and (CAST(escapeStr(\\"id-1\\") AS JSON) is null)))
   ;",
  ],
  Array [
    "query",
    "
    CREATE TABLE IF NOT EXISTS escapeId(__LEDGER__)(
      \`EventSubscriber\` VARCHAR(190) NOT NULL,
      \`IsPaused\` TINYINT NOT NULL,
      \`EventTypes\` JSON NOT NULL,
      \`AggregateIds\` JSON NOT NULL,
      \`XaKey\` VARCHAR(190) NULL,
      \`Cursor\` JSON NULL,
      \`SuccessEvent\` JSON NULL,
      \`FailedEvent\` JSON NULL,
      \`Errors\` JSON NULL,
      \`Schema\` JSON NULL,
      PRIMARY KEY(\`EventSubscriber\`)
    );
    
    CREATE TABLE IF NOT EXISTS escapeId(__TRX__)(
      \`XaKey\` VARCHAR(190) NOT NULL,
      \`XaValue\` VARCHAR(190) NOT NULL,
      \`Timestamp\` BIGINT,
      PRIMARY KEY(\`XaKey\`)
    );
  ",
  ],
  Array [
    "query",
    "DELETE FROM escapeId(__TRX__) WHERE \`Timestamp\` < 
        CAST(ROUND(UNIX_TIMESTAMP(SYSDATE(4)) * 1000) AS UNSIGNED INTEGER) - 86400000
        ",
  ],
  Array [
    "query",
    "SELECT \`B\`.\`XaValue\` FROM escapeId(__LEDGER__) \`A\`
         LEFT JOIN escapeId(__TRX__) \`B\`
         ON \`A\`.\`XaKey\` = \`B\`.\`XaKey\`
         WHERE \`A\`.\`EventSubscriber\` = escapeStr(readModelName)
        ",
  ],
  Array [
    "query",
    "START TRANSACTION;
        
        SELECT * FROM escapeId(__LEDGER__)
        WHERE \`EventSubscriber\` = escapeStr(readModelName)
        FOR UPDATE NOWAIT;

        UPDATE escapeId(__LEDGER__)
        SET \`Cursor\` = NULL,
        \`SuccessEvent\` = NULL,
        \`FailedEvent\` = NULL,
        \`Errors\` = NULL,
        \`IsPaused\` = TRUE
        WHERE \`EventSubscriber\` = escapeStr(readModelName);

        COMMIT;
      ",
  ],
  Array [
    "query",
    "SELECT table_name AS \`tableName\` FROM INFORMATION_SCHEMA.TABLES
    WHERE table_comment LIKE \\"RESOLVE-readModelName\\"
    AND table_schema=DATABASE();",
  ],
  Array [
    "query",
    "DELETE FROM escapeId(__TRX__) WHERE \`Timestamp\` < 
        CAST(ROUND(UNIX_TIMESTAMP(SYSDATE(4)) * 1000) AS UNSIGNED INTEGER) - 86400000
        ",
  ],
  Array [
    "query",
    "SELECT \`B\`.\`XaValue\` FROM escapeId(__LEDGER__) \`A\`
         LEFT JOIN escapeId(__TRX__) \`B\`
         ON \`A\`.\`XaKey\` = \`B\`.\`XaKey\`
         WHERE \`A\`.\`EventSubscriber\` = escapeStr(readModelName)
        ",
  ],
  Array [
    "query",
    "START TRANSACTION;
        
         SELECT * FROM escapeId(__LEDGER__)
         WHERE \`EventSubscriber\` = escapeStr(readModelName)
         FOR UPDATE NOWAIT;

         DELETE FROM escapeId(__LEDGER__)
         WHERE \`EventSubscriber\` = escapeStr(readModelName);

         COMMIT;
      ",
  ],
  Array [
    "end",
  ],
]
`;
