// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`with performanceTracer common "read" should raise error when wrong options for read invocation: addAnnotation 1`] = `Array []`;

exports[`with performanceTracer common "read" should raise error when wrong options for read invocation: addError 1`] = `Array []`;

exports[`with performanceTracer common "read" should raise error when wrong options for read invocation: addNewSubsegment 1`] = `Array []`;

exports[`with performanceTracer common "read" should raise error when wrong options for read invocation: close 1`] = `Array []`;

exports[`with performanceTracer common "read" should raise error when wrong options for read invocation: getSegment 1`] = `Array []`;

exports[`with performanceTracer read models "build" should apply events to the read model, "read" should return the resolver result: addAnnotation 1`] = `Array []`;

exports[`with performanceTracer read models "build" should apply events to the read model, "read" should return the resolver result: addError 1`] = `Array []`;

exports[`with performanceTracer read models "build" should apply events to the read model, "read" should return the resolver result: addNewSubsegment 1`] = `Array []`;

exports[`with performanceTracer read models "build" should apply events to the read model, "read" should return the resolver result: close 1`] = `Array []`;

exports[`with performanceTracer read models "build" should apply events to the read model, "read" should return the resolver result: getSegment 1`] = `Array []`;

exports[`with performanceTracer read models "build" should raise error when a projection is broken: addAnnotation 1`] = `Array []`;

exports[`with performanceTracer read models "build" should raise error when a projection is broken: addError 1`] = `Array []`;

exports[`with performanceTracer read models "build" should raise error when a projection is broken: addNewSubsegment 1`] = `Array []`;

exports[`with performanceTracer read models "build" should raise error when a projection is broken: close 1`] = `Array []`;

exports[`with performanceTracer read models "build" should raise error when a projection is broken: getSegment 1`] = `Array []`;

exports[`with performanceTracer read models "build" should raise error when a projection is not found: addAnnotation 1`] = `Array []`;

exports[`with performanceTracer read models "build" should raise error when a projection is not found: addError 1`] = `Array []`;

exports[`with performanceTracer read models "build" should raise error when a projection is not found: addNewSubsegment 1`] = `Array []`;

exports[`with performanceTracer read models "build" should raise error when a projection is not found: close 1`] = `Array []`;

exports[`with performanceTracer read models "build" should raise error when a projection is not found: getSegment 1`] = `Array []`;

exports[`with performanceTracer read models "build" should raise error when query is disposed: addAnnotation 1`] = `Array []`;

exports[`with performanceTracer read models "build" should raise error when query is disposed: addError 1`] = `Array []`;

exports[`with performanceTracer read models "build" should raise error when query is disposed: addNewSubsegment 1`] = `Array []`;

exports[`with performanceTracer read models "build" should raise error when query is disposed: close 1`] = `Array []`;

exports[`with performanceTracer read models "build" should raise error when query is disposed: getSegment 1`] = `Array []`;

exports[`with performanceTracer read models "build" should raise error when updating had been interrupted: addAnnotation 1`] = `Array []`;

exports[`with performanceTracer read models "build" should raise error when updating had been interrupted: addError 1`] = `Array []`;

exports[`with performanceTracer read models "build" should raise error when updating had been interrupted: addNewSubsegment 1`] = `Array []`;

exports[`with performanceTracer read models "build" should raise error when updating had been interrupted: close 1`] = `Array []`;

exports[`with performanceTracer read models "build" should raise error when updating had been interrupted: getSegment 1`] = `Array []`;

exports[`with performanceTracer read models "dispose" should dispose only one time: addAnnotation 1`] = `Array []`;

exports[`with performanceTracer read models "dispose" should dispose only one time: addError 1`] = `Array []`;

exports[`with performanceTracer read models "dispose" should dispose only one time: addNewSubsegment 1`] = `Array []`;

exports[`with performanceTracer read models "dispose" should dispose only one time: close 1`] = `Array []`;

exports[`with performanceTracer read models "dispose" should dispose only one time: getSegment 1`] = `Array []`;

exports[`with performanceTracer read models "read" should raise error when a read model does not exist: addAnnotation 1`] = `Array []`;

exports[`with performanceTracer read models "read" should raise error when a read model does not exist: addError 1`] = `Array []`;

exports[`with performanceTracer read models "read" should raise error when a read model does not exist: addNewSubsegment 1`] = `Array []`;

exports[`with performanceTracer read models "read" should raise error when a read model does not exist: close 1`] = `Array []`;

exports[`with performanceTracer read models "read" should raise error when a read model does not exist: getSegment 1`] = `Array []`;

exports[`with performanceTracer read models "read" should raise error when query is disposed: addAnnotation 1`] = `Array []`;

exports[`with performanceTracer read models "read" should raise error when query is disposed: addError 1`] = `Array []`;

exports[`with performanceTracer read models "read" should raise error when query is disposed: addNewSubsegment 1`] = `Array []`;

exports[`with performanceTracer read models "read" should raise error when query is disposed: close 1`] = `Array []`;

exports[`with performanceTracer read models "read" should raise error when query is disposed: getSegment 1`] = `Array []`;

exports[`with performanceTracer read models "read" should return the resolver result: addAnnotation 1`] = `
Array [
  Array [
    "readModelName",
    "readOnlyReadModelName",
  ],
  Array [
    "resolverName",
    "readFromDatabase",
  ],
  Array [
    "origin",
    "resolve:query:read",
  ],
]
`;

exports[`with performanceTracer read models "read" should return the resolver result: addError 1`] = `Array []`;

exports[`with performanceTracer read models "read" should return the resolver result: addNewSubsegment 1`] = `
Array [
  Array [
    "read",
  ],
]
`;

exports[`with performanceTracer read models "read" should return the resolver result: close 1`] = `
Array [
  Array [],
]
`;

exports[`with performanceTracer read models "read" should return the resolver result: getSegment 1`] = `
Array [
  Array [],
]
`;

exports[`with performanceTracer read models "resubscribe" should drop read model: addAnnotation 1`] = `Array []`;

exports[`with performanceTracer read models "resubscribe" should drop read model: addError 1`] = `Array []`;

exports[`with performanceTracer read models "resubscribe" should drop read model: addNewSubsegment 1`] = `Array []`;

exports[`with performanceTracer read models "resubscribe" should drop read model: close 1`] = `Array []`;

exports[`with performanceTracer read models "resubscribe" should drop read model: getSegment 1`] = `Array []`;

exports[`with performanceTracer read models "resubscribe" should raise error when query is disposed: addAnnotation 1`] = `Array []`;

exports[`with performanceTracer read models "resubscribe" should raise error when query is disposed: addError 1`] = `Array []`;

exports[`with performanceTracer read models "resubscribe" should raise error when query is disposed: addNewSubsegment 1`] = `Array []`;

exports[`with performanceTracer read models "resubscribe" should raise error when query is disposed: close 1`] = `Array []`;

exports[`with performanceTracer read models "resubscribe" should raise error when query is disposed: getSegment 1`] = `Array []`;

exports[`with performanceTracer read models "serializeState" should return the resolver result: addAnnotation 1`] = `Array []`;

exports[`with performanceTracer read models "serializeState" should return the resolver result: addError 1`] = `Array []`;

exports[`with performanceTracer read models "serializeState" should return the resolver result: addNewSubsegment 1`] = `Array []`;

exports[`with performanceTracer read models "serializeState" should return the resolver result: close 1`] = `Array []`;

exports[`with performanceTracer read models "serializeState" should return the resolver result: getSegment 1`] = `Array []`;
