// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Broker operation pause 1`] = `
[MockFunction] {
  "calls": Array [
    Array [
      "
      UPDATE \\"subscribers\\"
      SET \\"status\\" = 'skip'
      WHERE \\"eventSubscriber\\" = 'eventSubscriber'
      AND \\"status\\" <> 'error';

      COMMIT;
      BEGIN IMMEDIATE;
    ",
    ],
  ],
  "results": Array [
    Object {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;

exports[`Broker operation pause 2`] = `
[MockFunction] {
  "calls": Array [
    Array [
      "
      SELECT * FROM \\"subscribers\\"
      WHERE \\"subscribers\\".\\"eventSubscriber\\" =
      'eventSubscriber'
    ",
    ],
  ],
  "results": Array [
    Object {
      "type": "return",
      "value": Array [
        Object {
          "status": "deliver",
          "subscriptionId": "subscriptionId",
        },
      ],
    },
  ],
}
`;

exports[`Broker operation reset 1`] = `
[MockFunction] {
  "calls": Array [
    Array [
      "
    SELECT \\"subscribers\\".\\"subscriptionId\\" AS \\"subscriptionId\\",
    \\"subscribers\\".\\"deliveryStrategy\\" AS \\"deliveryStrategy\\",
    \\"subscribers\\".\\"queueStrategy\\" AS \\"queueStrategy\\",
    \\"subscribers\\".\\"eventTypes\\" AS \\"eventTypes\\",
    \\"subscribers\\".\\"aggregateIds\\" AS \\"aggregateIds\\",
    \\"subscribers\\".\\"properties\\" AS \\"properties\\"
    FROM \\"subscribers\\"
    WHERE \\"eventSubscriber\\" = 'eventSubscriber'
  ",
    ],
  ],
  "results": Array [
    Object {
      "type": "return",
      "value": Array [
        Object {
          "aggregateIds": "{\\"aggregateIds\\":true}",
          "deliveryStrategy": "active-xa-transaction",
          "eventTypes": "{\\"eventTypes\\":true}",
          "queueStrategy": "none",
          "subscriptionId": "subscriptionId",
        },
      ],
    },
  ],
}
`;

exports[`Broker operation reset 2`] = `
[MockFunction] {
  "calls": Array [
    Array [
      "
    DELETE FROM \\"subscribers\\"
    WHERE \\"subscriptionId\\" = 'subscriptionId';

    INSERT OR IGNORE INTO \\"subscribers\\"(
      \\"subscriptionId\\",
      \\"eventSubscriber\\",
      \\"status\\",
      \\"deliveryStrategy\\",
      \\"eventTypes\\",
      \\"aggregateIds\\",
      \\"properties\\",
      \\"queueStrategy\\",
      \\"maxParallel\\",
      \\"successEvent\\",
      \\"failedEvent\\",
      \\"errors\\",
      \\"cursor\\"
    ) VALUES (
      'ZXZlbnRTdWJzY3JpYmVyMTIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA',
      'eventSubscriber',
      'skip',
      'active-xa-transaction',
      '{ \\"eventTypes\\": true }',
      '{ \\"aggregateIds\\": true }',
      'null',
      'none',
      1,
      NULL,
      NULL,
      NULL,
      NULL
    );
  
    COMMIT;
    BEGIN IMMEDIATE;
  ",
    ],
  ],
  "results": Array [
    Object {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;

exports[`Broker operation resubscribe 1`] = `
[MockFunction] {
  "calls": Array [
    Array [
      "
    SELECT * FROM \\"subscribers\\"
    WHERE \\"eventSubscriber\\" = 'eventSubscriber';
  ",
    ],
  ],
  "results": Array [
    Object {
      "type": "return",
      "value": Array [
        Object {
          "subscriptionId": "subscriptionId",
        },
      ],
    },
  ],
}
`;

exports[`Broker operation resubscribe 2`] = `
[MockFunction] {
  "calls": Array [
    Array [
      "
      DELETE FROM \\"subscribers\\"
      WHERE \\"eventSubscriber\\" = 'eventSubscriber';

      INSERT OR IGNORE INTO \\"subscribers\\"(
        \\"subscriptionId\\",
        \\"eventSubscriber\\",
        \\"status\\",
        \\"deliveryStrategy\\",
        \\"eventTypes\\",
        \\"aggregateIds\\",
        \\"queueStrategy\\",
        \\"maxParallel\\",
        \\"successEvent\\",
        \\"failedEvent\\",
        \\"errors\\",
        \\"cursor\\"
      ) VALUES (
        'ZXZlbnRTdWJzY3JpYmVyMTIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA',
        'eventSubscriber',
        'skip',
        'active-xa-transaction',
        'null',
        'null',
        'none',
        1,
        NULL,
        NULL,
        NULL,
        NULL
      );

      COMMIT;
      BEGIN IMMEDIATE;
  ",
    ],
  ],
  "results": Array [
    Object {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;

exports[`Broker operation resume 1`] = `
[MockFunction] {
  "calls": Array [
    Array [
      "
      SELECT \\"subscribers\\".\\"status\\" AS \\"status\\",
      \\"subscribers\\".\\"subscriptionId\\" AS \\"subscriptionId\\"
      FROM \\"subscribers\\"
      WHERE \\"eventSubscriber\\" = 'eventSubscriber'
    ",
    ],
  ],
  "results": Array [
    Object {
      "type": "return",
      "value": Array [
        Object {
          "status": "deliver",
          "subscriptionId": "subscriptionId",
        },
      ],
    },
  ],
}
`;

exports[`Broker operation status 1`] = `
[MockFunction] {
  "calls": Array [
    Array [
      "
    SELECT * FROM \\"subscribers\\"
    WHERE \\"eventSubscriber\\" = 'eventSubscriber'
  ",
    ],
  ],
  "results": Array [
    Object {
      "type": "return",
      "value": Array [
        Object {
          "batchId": "batchId",
          "cursor": "{\\"cursor\\":\\"cursor\\"}",
          "deliveryStrategy": "deliveryStrategy",
          "errors": null,
          "eventSubscriber": "eventSubscriber",
          "failedEvent": null,
          "maxParallel": 1,
          "scopeName": "scopeName",
          "status": "status",
          "subscriptionId": "subscriptionId",
          "successEvent": "{\\"type\\":\\"busEvent\\"}",
        },
      ],
    },
  ],
}
`;

exports[`Broker operation subscribe 1`] = `
[MockFunction] {
  "calls": Array [
    Array [
      "
    SELECT * FROM \\"subscribers\\"
    WHERE \\"eventSubscriber\\" = 'eventSubscriber';
  ",
    ],
  ],
  "results": Array [
    Object {
      "type": "return",
      "value": Array [
        Object {
          "subscriptionId": "subscriptionId",
        },
      ],
    },
  ],
}
`;

exports[`Broker operation subscribe 2`] = `
[MockFunction] {
  "calls": Array [
    Array [
      "
      UPDATE \\"subscribers\\" SET
      \\"deliveryStrategy\\" = 'active-xa-transaction',
      \\"eventTypes\\" = 'null',
      \\"aggregateIds\\" = 'null',
      \\"queueStrategy\\" = 'none',
      \\"maxParallel\\" = 1
      WHERE \\"eventSubscriber\\" = 'eventSubscriber';

      INSERT OR IGNORE INTO \\"subscribers\\"(
        \\"subscriptionId\\",
        \\"eventSubscriber\\",
        \\"status\\",
        \\"deliveryStrategy\\",
        \\"eventTypes\\",
        \\"aggregateIds\\",
        \\"queueStrategy\\",
        \\"maxParallel\\",
        \\"successEvent\\",
        \\"failedEvent\\",
        \\"errors\\",
        \\"cursor\\"
      ) VALUES (
        'ZXZlbnRTdWJzY3JpYmVyMTIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA',
        'eventSubscriber',
        'skip',
        'active-xa-transaction',
        'null',
        'null',
        'none',
        1,
        NULL,
        NULL,
        NULL,
        NULL
      );

      COMMIT;
      BEGIN IMMEDIATE;
  ",
    ],
  ],
  "results": Array [
    Object {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;

exports[`Broker operation unsubscribe 1`] = `
[MockFunction] {
  "calls": Array [
    Array [
      "
    DELETE FROM \\"subscribers\\"
    WHERE \\"eventSubscriber\\" = 'eventSubscriber';

    COMMIT;
    BEGIN IMMEDIATE;
  ",
    ],
  ],
  "results": Array [
    Object {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;

exports[`Core operation acknowledge batch 1`] = `
[MockFunction] {
  "calls": Array [
    Array [
      "
      SELECT * FROM \\"batches\\"
      WHERE \\"batches\\".\\"batchId\\" = 'batchId'
      ORDER BY \\"batches\\".\\"eventIndex\\" ASC
    ",
    ],
    Array [
      "
      SELECT \\"subscribers\\".\\"subscriptionId\\" AS \\"subscriptionId\\",
      \\"subscribers\\".\\"eventSubscriber\\" AS \\"eventSubscriber\\",
      \\"subscribers\\".\\"deliveryStrategy\\" AS \\"deliveryStrategy\\",
      \\"subscribers\\".\\"successEvent\\" AS \\"successEvent\\",
      \\"subscribers\\".\\"cursor\\" AS \\"cursor\\",
      \\"notifications\\".\\"status\\" AS \\"runStatus\\",
      \\"notifications\\".\\"xaTransactionId\\" AS \\"xaTransactionId\\",
      \\"notifications\\".\\"batchId\\" AS \\"batchId\\"
      FROM \\"notifications\\" LEFT JOIN \\"subscribers\\"
      ON \\"subscribers\\".\\"subscriptionId\\" = 
      \\"notifications\\".\\"subscriptionId\\"
      WHERE \\"notifications\\".\\"batchId\\" = 'batchId'
      LIMIT 1
    ",
    ],
    Array [
      "
      SELECT \\"notifications\\".\\"status\\" AS \\"runStatus\\"
      FROM \\"notifications\\"
      WHERE \\"notifications\\".\\"batchId\\" = 'batchId'
      AND \\"notifications\\".\\"status\\" = 'acknowledge-entering-notification'
      LIMIT 1
    ",
    ],
  ],
  "results": Array [
    Object {
      "type": "return",
      "value": Promise {},
    },
    Object {
      "type": "return",
      "value": Promise {},
    },
    Object {
      "type": "return",
      "value": Promise {},
    },
  ],
}
`;

exports[`Core operation acknowledge batch 2`] = `
[MockFunction] {
  "calls": Array [
    Array [
      "
      UPDATE \\"notifications\\" SET
      \\"status\\" = 'acknowledge-entering-notification'
      WHERE \\"notifications\\".\\"batchId\\" = 'batchId'
      AND \\"notifications\\".\\"status\\" = 'processing-notification';
      
      COMMIT;
      BEGIN IMMEDIATE;
    ",
    ],
    Array [
      "
            UPDATE \\"notifications\\" SET
            \\"status\\" = 'acknowledge-xa-commiting-notification'
            WHERE \\"batchId\\" = 'batchId';
            
            COMMIT;
            BEGIN IMMEDIATE;
          ",
    ],
  ],
  "results": Array [
    Object {
      "type": "return",
      "value": undefined,
    },
    Object {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;

exports[`Core operation finalize batch 1`] = `
[MockFunction] {
  "calls": Array [
    Array [
      "
      SELECT \\"notifications\\".*,
      CAST(strftime('%s','now') || substr(strftime('%f','now'),4) AS BIGINT) AS \\"processEndTimestamp\\"
      FROM \\"notifications\\"
      LIMIT 1
    ",
    ],
  ],
  "results": Array [
    Object {
      "type": "return",
      "value": Array [
        Object {
          "subscriptionId": "subscriptionId",
        },
      ],
    },
  ],
}
`;

exports[`Core operation finalize batch 2`] = `
[MockFunction] {
  "calls": Array [
    Array [
      "UPDATE \\"subscribers\\" SET
      \\"status\\" = CASE WHEN \\"status\\" = 'error' THEN 'error'
    WHEN 1 = 0 THEN 'error'
    WHEN \\"status\\" = 'skip' THEN 'skip'
    ELSE 'deliver'
    END, \\"successEvent\\" = json('{\\"aggregateId\\":\\"aggregateId\\",\\"aggregateVersion\\":\\"aggregateVersion\\"}')
      WHERE \\"subscriptionId\\" = 'subscriptionId';
    
      DELETE FROM \\"batches\\"
      WHERE \\"batchId\\" = 'batchId';
    
      DELETE FROM \\"notifications\\"
      WHERE \\"batchId\\" = 'batchId';

      COMMIT;
      BEGIN IMMEDIATE;
    ",
    ],
  ],
  "results": Array [
    Object {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;

exports[`Core operation pull notifications 1`] = `
[MockFunction] {
  "calls": Array [
    Array [
      "
      SELECT \\"subscribers\\".\\"subscriptionId\\" AS \\"subscriptionId\\",
      \\"subscribers\\".\\"eventSubscriber\\" AS \\"eventSubscriber\\"
      FROM \\"notifications\\" LEFT JOIN \\"subscribers\\" ON
      \\"subscribers\\".\\"subscriptionId\\" = \\"notifications\\".\\"subscriptionId\\"
      WHERE \\"subscribers\\".\\"subscriptionId\\" =
      'subscriptionId'
      AND  \\"notifications\\".\\"batchId\\" = 
      'c3Vic2NyaXB0aW9uSWQxMgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'
      LIMIT 1
    ",
    ],
  ],
  "results": Array [
    Object {
      "type": "return",
      "value": Array [
        Object {
          "batchId": "batchId",
          "eventSubscriber": "eventSubscriber",
          "subscriptionId": "subscriptionId",
        },
      ],
    },
  ],
}
`;

exports[`Core operation pull notifications 2`] = `
[MockFunction] {
  "calls": Array [
    Array [
      "
      UPDATE \\"notifications\\" SET
      \\"processStartTimestamp\\" = CAST(strftime('%s','now') || substr(strftime('%f','now'),4) AS BIGINT),
      \\"heartbeatTimestamp\\" = CAST(strftime('%s','now') || substr(strftime('%f','now'),4) AS BIGINT),
      \\"batchId\\" = 'c3Vic2NyaXB0aW9uSWQxMgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'
      WHERE \\"notifications\\".\\"subscriptionId\\" = 'subscriptionId'
      AND NOT EXISTS (
        SELECT \\"N\\".* FROM \\"notifications\\" \\"N\\"
        WHERE \\"N\\".\\"subscriptionId\\" = 'subscriptionId'
        AND \\"N\\".\\"batchId\\" IS NOT NULL
      )
      AND EXISTS (
        SELECT \\"S\\".* FROM \\"subscribers\\" \\"S\\"
        WHERE \\"S\\".\\"subscriptionId\\" = 'subscriptionId'
      );

      COMMIT;
      BEGIN IMMEDIATE;
    ",
    ],
  ],
  "results": Array [
    Object {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;

exports[`Core operation push notification 1`] = `
[MockFunction] {
  "calls": Array [
    Array [
      "
    SELECT \\"subscriptionId\\" FROM \\"notifications\\"
    WHERE \\"insertionId\\" = 'YWdncmVnYXRlSWRhZ2dyZWdhdGVWZXJzaW9uMTIAAAAAAAAAAAAAAAAAAAAAAAAA'
  ",
    ],
    Array [
      "
    SELECT \\"subscribers\\".\\"eventSubscriber\\" AS \\"eventSubscriber\\"
    FROM \\"subscribers\\"
    WHERE \\"subscribers\\".\\"status\\" = 'deliver'
    AND \\"subscribers\\".\\"deliveryStrategy\\" = 'passthrough'
    AND (
      json_extract(
        \\"subscribers\\".\\"eventTypes\\",
        '$.\\"busEvent\\"'
      ) = 1 OR
      json_extract(
        \\"subscribers\\".\\"eventTypes\\", '$'
      ) IS NULL
    ) AND ( 
      json_extract(
        \\"subscribers\\".\\"aggregateIds\\",
        '$.\\"aggregateId\\"'
      ) = 1 OR
      json_extract(
        \\"subscribers\\".\\"aggregateIds\\", '$'
      ) IS NULL
    )
  ",
    ],
  ],
  "results": Array [
    Object {
      "type": "return",
      "value": Array [
        Object {
          "subscriptionId": "subscriptionId",
        },
      ],
    },
    Object {
      "type": "return",
      "value": Array [
        Object {
          "subscriptionId": "subscriptionId",
        },
      ],
    },
  ],
}
`;

exports[`Core operation push notification 2`] = `
[MockFunction] {
  "calls": Array [
    Array [
      "
    INSERT OR IGNORE INTO \\"notifications\\"(
      \\"insertionId\\",
      \\"subscriptionId\\",
      \\"incomingTimestamp\\",
      \\"processStartTimestamp\\",
      \\"processEndTimestamp\\",
      \\"heartbeatTimestamp\\",
      \\"aggregateIdAndVersion\\",
      \\"status\\"
    ) SELECT 
      'YWdncmVnYXRlSWRhZ2dyZWdhdGVWZXJzaW9uMTIAAAAAAAAAAAAAAAAAAAAAAAAA' AS \\"insertionId\\",
      \\"subscriptionIds\\".\\"subscriptionId\\" AS \\"subscriptionId\\",
      CAST(strftime('%s','now') || substr(strftime('%f','now'),4) AS BIGINT) AS \\"incomingTimestamp\\",
      NULL AS \\"processStartTimestamp\\",
      NULL AS \\"processEndTimestamp\\",
      NULL AS \\"heartbeatTimestamp\\",
      'aggregateId:aggregateVersion' AS \\"aggregateIdAndVersion\\",
      'received-notification' AS \\"status\\"
    FROM (
      SELECT \\"subscribers\\".\\"subscriptionId\\"
      FROM \\"subscribers\\"
      WHERE \\"subscribers\\".\\"status\\" = 'deliver'
      AND \\"subscribers\\".\\"deliveryStrategy\\" <> 'passthrough'
      AND (
        json_extract(
          \\"subscribers\\".\\"eventTypes\\",
          '$.\\"busEvent\\"'
        ) = 1 OR
        json_extract(
          \\"subscribers\\".\\"eventTypes\\", '$'
        ) IS NULL
      ) AND ( 
        json_extract(
          \\"subscribers\\".\\"aggregateIds\\",
          '$.\\"aggregateId\\"'
        ) = 1 OR
        json_extract(
          \\"subscribers\\".\\"aggregateIds\\", '$'
        ) IS NULL
      ) AND NOT EXISTS (
        SELECT \\"notifications\\".\\"subscriptionId\\"
        FROM \\"notifications\\"
        WHERE \\"notifications\\".\\"subscriptionId\\" =
        \\"notifications\\"
        AND \\"notifications\\".\\"batchId\\" IS NULL
      )
    ) \\"subscriptionIds\\";

    COMMIT;
    BEGIN IMMEDIATE;
  ",
    ],
  ],
  "results": Array [
    Object {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;

exports[`Core operation request timeout 1`] = `
[MockFunction] {
  "calls": Array [
    Array [
      "
      SELECT \\"subscribers\\".\\"eventSubscriber\\" AS \\"eventSubscriber\\",
      \\"subscribers\\".\\"deliveryStrategy\\" AS \\"deliveryStrategy\\",
      \\"subscribers\\".\\"subscriptionId\\" AS \\"subscriptionId\\",
      \\"subscribers\\".\\"successEvent\\" AS \\"successEvent\\",
      \\"subscribers\\".\\"cursor\\" AS \\"cursor\\",
      \\"notifications\\".\\"status\\" AS \\"runStatus\\",
      \\"notifications\\".\\"xaTransactionId\\" AS \\"xaTransactionId\\",
      \\"notifications\\".\\"batchId\\" AS \\"batchId\\"
      FROM \\"notifications\\" LEFT JOIN \\"subscribers\\"
      ON \\"subscribers\\".\\"subscriptionId\\" = 
      \\"notifications\\".\\"subscriptionId\\"
      WHERE \\"notifications\\".\\"batchId\\" = 'batchId'
      LIMIT 1
    ",
    ],
    Array [
      "
        SELECT \\"notifications\\".\\"status\\" AS \\"runStatus\\"
        FROM \\"notifications\\"
        WHERE \\"notifications\\".\\"batchId\\" = 'batchId'
        AND \\"notifications\\".\\"status\\" = 'timeout-entering-notification'
        LIMIT 1
      ",
    ],
    Array [
      "
          SELECT * FROM \\"batches\\"
          WHERE \\"batches\\".\\"batchId\\" = 'batchId'
          ORDER BY \\"batches\\".\\"eventIndex\\" ASC
          LIMIT 1
        ",
    ],
  ],
  "results": Array [
    Object {
      "type": "return",
      "value": Promise {},
    },
    Object {
      "type": "return",
      "value": Promise {},
    },
    Object {
      "type": "return",
      "value": Promise {},
    },
  ],
}
`;

exports[`Core operation request timeout 2`] = `
[MockFunction] {
  "calls": Array [
    Array [
      "
        UPDATE \\"notifications\\" SET
        \\"status\\" = 'timeout-entering-notification'
        WHERE \\"notifications\\".\\"batchId\\" = 'batchId'
        AND \\"notifications\\".\\"status\\" = 'processing-notification';

        COMMIT;
        BEGIN IMMEDIATE;
      ",
    ],
    Array [
      "
          UPDATE \\"notifications\\" SET
          \\"status\\" = 'timeout-xa-commiting-notification1'
          WHERE \\"batchId\\" = 'batchId';

          COMMIT;
          BEGIN IMMEDIATE;
        ",
    ],
  ],
  "results": Array [
    Object {
      "type": "return",
      "value": undefined,
    },
    Object {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;

exports[`Core operation resume subscriber 1`] = `
[MockFunction] {
  "calls": Array [
    Array [
      "
      SELECT \\"subscribers\\".\\"subscriptionId\\"
      FROM \\"subscribers\\"
      WHERE \\"eventSubscriber\\" = 'eventSubscriber'
      AND \\"status\\" = 'deliver'
  ",
    ],
  ],
  "results": Array [
    Object {
      "type": "return",
      "value": Array [
        Object {
          "subscriptionId": "subscriptionId",
        },
      ],
    },
  ],
}
`;

exports[`Core operation resume subscriber 2`] = `
[MockFunction] {
  "calls": Array [
    Array [
      "
      UPDATE \\"subscribers\\"
      SET \\"status\\" = 'deliver'
      WHERE \\"eventSubscriber\\" = 'eventSubscriber'
      AND \\"status\\" <> 'error';

      INSERT INTO \\"notifications\\"(
        \\"insertionId\\",
        \\"subscriptionId\\",
        \\"incomingTimestamp\\",
        \\"processStartTimestamp\\",
        \\"processEndTimestamp\\",
        \\"heartbeatTimestamp\\",
        \\"aggregateIdAndVersion\\",
        \\"status\\"
      ) SELECT 
        'Rk9SQ0VVUERBVEUxMgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' AS \\"insertionId\\",
        \\"subscriptionIds\\".\\"subscriptionId\\" AS \\"subscriptionId\\",
        CAST(strftime('%s','now') || substr(strftime('%f','now'),4) AS BIGINT) AS \\"incomingTimestamp\\",
        NULL AS \\"processStartTimestamp\\",
        NULL AS \\"processEndTimestamp\\",
        NULL AS \\"heartbeatTimestamp\\",
        'FORCEUPDATE' AS \\"aggregateIdAndVersion\\",
        'received-notification' AS \\"status\\"
      FROM (
        SELECT \\"subscribers\\".\\"subscriptionId\\"
        FROM \\"subscribers\\"
        WHERE \\"eventSubscriber\\" = 'eventSubscriber'
        AND \\"status\\" = 'deliver'
        AND \\"deliveryStrategy\\" <> 'passthrough'
      ) \\"subscriptionIds\\";

      COMMIT;
      BEGIN IMMEDIATE;
    ",
    ],
  ],
  "results": Array [
    Object {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;
