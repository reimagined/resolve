// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`base config works correctly [client] 1`] = `
"
import projection_0_instance from \\"<MONOREPO_DIR>/core/resolve-scripts/test/alias/files/testProjection.js\\"
import deserializeState_0_instance from \\"resolve-runtime/lib/common/defaults/json-deserialize-state.js\\"
const constructorBindFunction =
    (
      constructorFunction,
      compileTimeOptions,
      compileTimeImports,
      runTimeOptions,
      runTimeImports
    ) => constructorFunction(
      { ...compileTimeOptions, ...runTimeOptions },
      { ...compileTimeImports, ...runTimeImports }
    )
const idempotentFunction = value => value
const name_0 = \\"Todos\\"
const projection_0 = projection_0_instance
const deserializeState_0 = deserializeState_0_instance
const viewModels = []

viewModels.push({
  name: name_0
, projection: projection_0
, deserializeState: deserializeState_0
})

export default viewModels
"
`;

exports[`base config works correctly [server] 1`] = `
"
import projection_0_instance from \\"<MONOREPO_DIR>/core/resolve-scripts/test/alias/files/testProjection.js\\"
import deserializeState_0_instance from \\"resolve-runtime/lib/common/defaults/json-deserialize-state.js\\"
import serializeState_0_instance from \\"resolve-runtime/lib/common/defaults/json-serialize-state.js\\"
import validator_0_instance from \\"resolve-runtime/lib/common/defaults/view-model-validator.js\\"
const constructorBindFunction =
    (
      constructorFunction,
      compileTimeOptions,
      compileTimeImports,
      runTimeOptions,
      runTimeImports
    ) => constructorFunction(
      { ...compileTimeOptions, ...runTimeOptions },
      { ...compileTimeImports, ...runTimeImports }
    )
const idempotentFunction = value => value
const name_0 = \\"Todos\\"
const projection_0_hash = \\"8f56cca6d478dcc3beca1ff4497e55b4709427de061adf605db3a831efe5130027c3e1ad1eafd5d5258dbcce41bc240b074e9ac153ea29cbff610a465cf7d4ba\\"
const projection_0 = projection_0_instance
const deserializeState_0 = deserializeState_0_instance
const serializeState_0 = serializeState_0_instance
const validator_0 = validator_0_instance
const viewModels = []

viewModels.push({
  name: name_0
, projection: projection_0
, deserializeState: deserializeState_0
, invariantHash: projection_0_hash
, serializeState: serializeState_0
, validator: validator_0
})


      let AsyncGeneratorFunction = {}
      let GeneratorFunction = {}
      let AsyncFunction = {}

      try {
        eval('AsyncGeneratorFunction = (async function* name(){}).constructor')
      } catch(err) {}

      try {
        eval('GeneratorFunction = (function*(){}).constructor')
      } catch(err) {}

      try {
        eval('AsyncFunction = (async function(){}).constructor')
      } catch(err) {}

      const checkValidProjectionFunction = (func) => {
        if(typeof func !== 'function') {
          return false
        }
        if(func.constructor === GeneratorFunction) {
          return false
        }
        if(func.constructor === AsyncFunction) {
          return false
        }
        if(func.constructor === AsyncGeneratorFunction) {
          return false
        }
        return true
      }
    
      for(const { projection } of viewModels) {
        for(const key of Object.keys(projection)) {
          if(!checkValidProjectionFunction(projection[key])) {
            throw new Error(
              \`A Projection handler \\"\${key}\\" cannot be a generator or/and asynchronous function\`
            )
          }
        }
      }
    
export default viewModels
"
`;

exports[`base(v2) config works correctly [client] 1`] = `
"
import projection_0_instance from \\"<MONOREPO_DIR>/core/resolve-scripts/test/alias/files/testProjection.js\\"
import deserializeState_0_instance from \\"resolve-runtime/lib/common/defaults/json-deserialize-state.js\\"
import projection_1_instance from \\"<MONOREPO_DIR>/core/resolve-scripts/test/alias/files/testProjection.js\\"
import deserializeState_1_instance from \\"resolve-runtime/lib/common/defaults/json-deserialize-state.js\\"
const constructorBindFunction =
    (
      constructorFunction,
      compileTimeOptions,
      compileTimeImports,
      runTimeOptions,
      runTimeImports
    ) => constructorFunction(
      { ...compileTimeOptions, ...runTimeOptions },
      { ...compileTimeImports, ...runTimeImports }
    )
const idempotentFunction = value => value
const name_0 = \\"Todos\\"
const projection_0 = projection_0_instance
const deserializeState_0 = deserializeState_0_instance
const name_1 = \\"Items\\"
const projection_1 = projection_1_instance
const deserializeState_1 = deserializeState_1_instance
const viewModels = []

viewModels.push({
  name: name_0
, projection: projection_0
, deserializeState: deserializeState_0
})

viewModels.push({
  name: name_1
, projection: projection_1
, deserializeState: deserializeState_1
})

export default viewModels
"
`;

exports[`base(v2) config works correctly [server] 1`] = `
"
import projection_0_instance from \\"<MONOREPO_DIR>/core/resolve-scripts/test/alias/files/testProjection.js\\"
import deserializeState_0_instance from \\"resolve-runtime/lib/common/defaults/json-deserialize-state.js\\"
import serializeState_0_instance from \\"resolve-runtime/lib/common/defaults/json-serialize-state.js\\"
import validator_0_instance from \\"resolve-runtime/lib/common/defaults/view-model-validator.js\\"
import projection_1_instance from \\"<MONOREPO_DIR>/core/resolve-scripts/test/alias/files/testProjection.js\\"
import deserializeState_1_instance from \\"resolve-runtime/lib/common/defaults/json-deserialize-state.js\\"
import serializeState_1_instance from \\"resolve-runtime/lib/common/defaults/json-serialize-state.js\\"
import validator_1_instance from \\"resolve-runtime/lib/common/defaults/view-model-validator.js\\"
const constructorBindFunction =
    (
      constructorFunction,
      compileTimeOptions,
      compileTimeImports,
      runTimeOptions,
      runTimeImports
    ) => constructorFunction(
      { ...compileTimeOptions, ...runTimeOptions },
      { ...compileTimeImports, ...runTimeImports }
    )
const idempotentFunction = value => value
const name_0 = \\"Todos\\"
const projection_0_hash = \\"8f56cca6d478dcc3beca1ff4497e55b4709427de061adf605db3a831efe5130027c3e1ad1eafd5d5258dbcce41bc240b074e9ac153ea29cbff610a465cf7d4ba\\"
const projection_0 = projection_0_instance
const deserializeState_0 = deserializeState_0_instance
const serializeState_0 = serializeState_0_instance
const validator_0 = validator_0_instance
const name_1 = \\"Items\\"
const projection_1_hash = \\"8f56cca6d478dcc3beca1ff4497e55b4709427de061adf605db3a831efe5130027c3e1ad1eafd5d5258dbcce41bc240b074e9ac153ea29cbff610a465cf7d4ba\\"
const projection_1 = projection_1_instance
const deserializeState_1 = deserializeState_1_instance
const serializeState_1 = serializeState_1_instance
const validator_1 = validator_1_instance
const viewModels = []

viewModels.push({
  name: name_0
, projection: projection_0
, deserializeState: deserializeState_0
, invariantHash: projection_0_hash
, serializeState: serializeState_0
, validator: validator_0
})

viewModels.push({
  name: name_1
, projection: projection_1
, deserializeState: deserializeState_1
, invariantHash: projection_1_hash
, serializeState: serializeState_1
, validator: validator_1
})


      let AsyncGeneratorFunction = {}
      let GeneratorFunction = {}
      let AsyncFunction = {}

      try {
        eval('AsyncGeneratorFunction = (async function* name(){}).constructor')
      } catch(err) {}

      try {
        eval('GeneratorFunction = (function*(){}).constructor')
      } catch(err) {}

      try {
        eval('AsyncFunction = (async function(){}).constructor')
      } catch(err) {}

      const checkValidProjectionFunction = (func) => {
        if(typeof func !== 'function') {
          return false
        }
        if(func.constructor === GeneratorFunction) {
          return false
        }
        if(func.constructor === AsyncFunction) {
          return false
        }
        if(func.constructor === AsyncGeneratorFunction) {
          return false
        }
        return true
      }
    
      for(const { projection } of viewModels) {
        for(const key of Object.keys(projection)) {
          if(!checkValidProjectionFunction(projection[key])) {
            throw new Error(
              \`A Projection handler \\"\${key}\\" cannot be a generator or/and asynchronous function\`
            )
          }
        }
      }
    
export default viewModels
"
`;

exports[`config with serializeState/deserializeState works correctly [client] 1`] = `
"
import projection_0_instance from \\"<MONOREPO_DIR>/core/resolve-scripts/test/alias/files/testProjection.js\\"
import deserializeState_0_instance from \\"<MONOREPO_DIR>/core/resolve-scripts/test/alias/files/testDeserializeState.js\\"
const constructorBindFunction =
    (
      constructorFunction,
      compileTimeOptions,
      compileTimeImports,
      runTimeOptions,
      runTimeImports
    ) => constructorFunction(
      { ...compileTimeOptions, ...runTimeOptions },
      { ...compileTimeImports, ...runTimeImports }
    )
const idempotentFunction = value => value
const name_0 = \\"Todos\\"
const projection_0 = projection_0_instance
const deserializeState_0 = deserializeState_0_instance
const viewModels = []

viewModels.push({
  name: name_0
, projection: projection_0
, deserializeState: deserializeState_0
})

export default viewModels
"
`;

exports[`config with serializeState/deserializeState works correctly [server] 1`] = `
"
import projection_0_instance from \\"<MONOREPO_DIR>/core/resolve-scripts/test/alias/files/testProjection.js\\"
import deserializeState_0_instance from \\"<MONOREPO_DIR>/core/resolve-scripts/test/alias/files/testDeserializeState.js\\"
import serializeState_0_instance from \\"<MONOREPO_DIR>/core/resolve-scripts/test/alias/files/testSerializeState.js\\"
import validator_0_instance from \\"resolve-runtime/lib/common/defaults/view-model-validator.js\\"
const constructorBindFunction =
    (
      constructorFunction,
      compileTimeOptions,
      compileTimeImports,
      runTimeOptions,
      runTimeImports
    ) => constructorFunction(
      { ...compileTimeOptions, ...runTimeOptions },
      { ...compileTimeImports, ...runTimeImports }
    )
const idempotentFunction = value => value
const name_0 = \\"Todos\\"
const projection_0_hash = \\"8f56cca6d478dcc3beca1ff4497e55b4709427de061adf605db3a831efe5130027c3e1ad1eafd5d5258dbcce41bc240b074e9ac153ea29cbff610a465cf7d4ba\\"
const projection_0 = projection_0_instance
const deserializeState_0 = deserializeState_0_instance
const serializeState_0 = serializeState_0_instance
const validator_0 = validator_0_instance
const viewModels = []

viewModels.push({
  name: name_0
, projection: projection_0
, deserializeState: deserializeState_0
, invariantHash: projection_0_hash
, serializeState: serializeState_0
, validator: validator_0
})


      let AsyncGeneratorFunction = {}
      let GeneratorFunction = {}
      let AsyncFunction = {}

      try {
        eval('AsyncGeneratorFunction = (async function* name(){}).constructor')
      } catch(err) {}

      try {
        eval('GeneratorFunction = (function*(){}).constructor')
      } catch(err) {}

      try {
        eval('AsyncFunction = (async function(){}).constructor')
      } catch(err) {}

      const checkValidProjectionFunction = (func) => {
        if(typeof func !== 'function') {
          return false
        }
        if(func.constructor === GeneratorFunction) {
          return false
        }
        if(func.constructor === AsyncFunction) {
          return false
        }
        if(func.constructor === AsyncGeneratorFunction) {
          return false
        }
        return true
      }
    
      for(const { projection } of viewModels) {
        for(const key of Object.keys(projection)) {
          if(!checkValidProjectionFunction(projection[key])) {
            throw new Error(
              \`A Projection handler \\"\${key}\\" cannot be a generator or/and asynchronous function\`
            )
          }
        }
      }
    
export default viewModels
"
`;

exports[`config with validator works correctly [client] 1`] = `
"
import projection_0_instance from \\"<MONOREPO_DIR>/core/resolve-scripts/test/alias/files/testProjection.js\\"
import deserializeState_0_instance from \\"resolve-runtime/lib/common/defaults/json-deserialize-state.js\\"
const constructorBindFunction =
    (
      constructorFunction,
      compileTimeOptions,
      compileTimeImports,
      runTimeOptions,
      runTimeImports
    ) => constructorFunction(
      { ...compileTimeOptions, ...runTimeOptions },
      { ...compileTimeImports, ...runTimeImports }
    )
const idempotentFunction = value => value
const name_0 = \\"Todos\\"
const projection_0 = projection_0_instance
const deserializeState_0 = deserializeState_0_instance
const viewModels = []

viewModels.push({
  name: name_0
, projection: projection_0
, deserializeState: deserializeState_0
})

export default viewModels
"
`;

exports[`config with validator works correctly [server] 1`] = `
"
import projection_0_instance from \\"<MONOREPO_DIR>/core/resolve-scripts/test/alias/files/testProjection.js\\"
import deserializeState_0_instance from \\"resolve-runtime/lib/common/defaults/json-deserialize-state.js\\"
import serializeState_0_instance from \\"resolve-runtime/lib/common/defaults/json-serialize-state.js\\"
import validator_0_instance from \\"<MONOREPO_DIR>/core/resolve-scripts/test/alias/files/testValidator.js\\"
const constructorBindFunction =
    (
      constructorFunction,
      compileTimeOptions,
      compileTimeImports,
      runTimeOptions,
      runTimeImports
    ) => constructorFunction(
      { ...compileTimeOptions, ...runTimeOptions },
      { ...compileTimeImports, ...runTimeImports }
    )
const idempotentFunction = value => value
const name_0 = \\"Todos\\"
const projection_0_hash = \\"8f56cca6d478dcc3beca1ff4497e55b4709427de061adf605db3a831efe5130027c3e1ad1eafd5d5258dbcce41bc240b074e9ac153ea29cbff610a465cf7d4ba\\"
const projection_0 = projection_0_instance
const deserializeState_0 = deserializeState_0_instance
const serializeState_0 = serializeState_0_instance
const validator_0 = validator_0_instance
const viewModels = []

viewModels.push({
  name: name_0
, projection: projection_0
, deserializeState: deserializeState_0
, invariantHash: projection_0_hash
, serializeState: serializeState_0
, validator: validator_0
})


      let AsyncGeneratorFunction = {}
      let GeneratorFunction = {}
      let AsyncFunction = {}

      try {
        eval('AsyncGeneratorFunction = (async function* name(){}).constructor')
      } catch(err) {}

      try {
        eval('GeneratorFunction = (function*(){}).constructor')
      } catch(err) {}

      try {
        eval('AsyncFunction = (async function(){}).constructor')
      } catch(err) {}

      const checkValidProjectionFunction = (func) => {
        if(typeof func !== 'function') {
          return false
        }
        if(func.constructor === GeneratorFunction) {
          return false
        }
        if(func.constructor === AsyncFunction) {
          return false
        }
        if(func.constructor === AsyncGeneratorFunction) {
          return false
        }
        return true
      }
    
      for(const { projection } of viewModels) {
        for(const key of Object.keys(projection)) {
          if(!checkValidProjectionFunction(projection[key])) {
            throw new Error(
              \`A Projection handler \\"\${key}\\" cannot be a generator or/and asynchronous function\`
            )
          }
        }
      }
    
export default viewModels
"
`;
