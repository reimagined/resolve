// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`base config works correctly [client] 1`] = `
"
import interopRequireDefault from \\"@babel/runtime/helpers/interopRequireDefault\\"

import projection_0 from \\"<MONOREPO_DIR>/core/resolve-scripts/test/alias/files/testProjection.js\\"
import deserializeState_0 from \\"<MONOREPO_DIR>/core/resolve-scripts/src/defaults/view_model_deserialize_state.js\\"

let AsyncGeneratorProto, GeneratorProto, PromiseProto
    const EmptyProto = {}

    try {
      AsyncGeneratorProto = (async function*() {})().__proto__.__proto__
    } catch(error) {
      AsyncGeneratorProto = EmptyProto
    }
    try {
      GeneratorProto = (function*() {})().__proto__.__proto__
    } catch(error) {
      GeneratorProto = EmptyProto
    }
    try {
      PromiseProto = (async function() {})().__proto__
    } catch(error) {
      PromiseProto = EmptyProto
    }

    const filterAsyncResult = result => {
      if (result == null || result.__proto__ == null) return

      if (result.__proto__ === PromiseProto) {
        throw new Error(
          'A Projection function cannot be asynchronous or return a Promise object'
        )
      }

      const innerProto = result.__proto__.__proto__
      if (innerProto == null) return

      if (innerProto === GeneratorProto || innerProto === AsyncGeneratorProto) {
        throw new Error(
          'A Projection function cannot be a generator or return an iterable object'
        )
      }
    }

    const wrapCheckProjection = projection => Object.keys(projection).reduce((acc, key) => {
      const originalHandler = projection[key].bind(projection)

      acc[key] = (...args) => {
        const result = originalHandler(...args)
        filterAsyncResult(result)
        return result
      }

      return acc
    }, {})
const invariantHash_0 = \\"8f56cca6d478dcc3beca1ff4497e55b4709427de061adf605db3a831efe5130027c3e1ad1eafd5d5258dbcce41bc240b074e9ac153ea29cbff610a465cf7d4ba\\"
const name_0 = \\"Todos\\"
const viewModels = []

viewModels.push({
  name: name_0
, projection: wrapCheckProjection(projection_0)
, invariantHash: invariantHash_0
, deserializeState: deserializeState_0
})

export default viewModels
"
`;

exports[`base config works correctly [server] 1`] = `
"
import interopRequireDefault from \\"@babel/runtime/helpers/interopRequireDefault\\"

import projection_0 from \\"<MONOREPO_DIR>/core/resolve-scripts/test/alias/files/testProjection.js\\"
import serializeState_0 from \\"<MONOREPO_DIR>/core/resolve-scripts/src/defaults/view_model_serialize_state.js\\"
import deserializeState_0 from \\"<MONOREPO_DIR>/core/resolve-scripts/src/defaults/view_model_deserialize_state.js\\"

let AsyncGeneratorProto, GeneratorProto, PromiseProto
    const EmptyProto = {}

    try {
      AsyncGeneratorProto = (async function*() {})().__proto__.__proto__
    } catch(error) {
      AsyncGeneratorProto = EmptyProto
    }
    try {
      GeneratorProto = (function*() {})().__proto__.__proto__
    } catch(error) {
      GeneratorProto = EmptyProto
    }
    try {
      PromiseProto = (async function() {})().__proto__
    } catch(error) {
      PromiseProto = EmptyProto
    }

    const filterAsyncResult = result => {
      if (result == null || result.__proto__ == null) return

      if (result.__proto__ === PromiseProto) {
        throw new Error(
          'A Projection function cannot be asynchronous or return a Promise object'
        )
      }

      const innerProto = result.__proto__.__proto__
      if (innerProto == null) return

      if (innerProto === GeneratorProto || innerProto === AsyncGeneratorProto) {
        throw new Error(
          'A Projection function cannot be a generator or return an iterable object'
        )
      }
    }

    const wrapCheckProjection = projection => Object.keys(projection).reduce((acc, key) => {
      const originalHandler = projection[key].bind(projection)

      acc[key] = (...args) => {
        const result = originalHandler(...args)
        filterAsyncResult(result)
        return result
      }

      return acc
    }, {})
const invariantHash_0 = \\"8f56cca6d478dcc3beca1ff4497e55b4709427de061adf605db3a831efe5130027c3e1ad1eafd5d5258dbcce41bc240b074e9ac153ea29cbff610a465cf7d4ba\\"
const name_0 = \\"Todos\\"
const viewModels = []

viewModels.push({
  name: name_0
, projection: wrapCheckProjection(projection_0)
, invariantHash: invariantHash_0
, serializeState: serializeState_0
, deserializeState: deserializeState_0
})

export default viewModels
"
`;

exports[`base(v2) config works correctly [client] 1`] = `
"
import interopRequireDefault from \\"@babel/runtime/helpers/interopRequireDefault\\"

import projection_0 from \\"<MONOREPO_DIR>/core/resolve-scripts/test/alias/files/testProjection.js\\"
import deserializeState_0 from \\"<MONOREPO_DIR>/core/resolve-scripts/src/defaults/view_model_deserialize_state.js\\"

import projection_1 from \\"<MONOREPO_DIR>/core/resolve-scripts/test/alias/files/testProjection.js\\"
import deserializeState_1 from \\"<MONOREPO_DIR>/core/resolve-scripts/src/defaults/view_model_deserialize_state.js\\"

let AsyncGeneratorProto, GeneratorProto, PromiseProto
    const EmptyProto = {}

    try {
      AsyncGeneratorProto = (async function*() {})().__proto__.__proto__
    } catch(error) {
      AsyncGeneratorProto = EmptyProto
    }
    try {
      GeneratorProto = (function*() {})().__proto__.__proto__
    } catch(error) {
      GeneratorProto = EmptyProto
    }
    try {
      PromiseProto = (async function() {})().__proto__
    } catch(error) {
      PromiseProto = EmptyProto
    }

    const filterAsyncResult = result => {
      if (result == null || result.__proto__ == null) return

      if (result.__proto__ === PromiseProto) {
        throw new Error(
          'A Projection function cannot be asynchronous or return a Promise object'
        )
      }

      const innerProto = result.__proto__.__proto__
      if (innerProto == null) return

      if (innerProto === GeneratorProto || innerProto === AsyncGeneratorProto) {
        throw new Error(
          'A Projection function cannot be a generator or return an iterable object'
        )
      }
    }

    const wrapCheckProjection = projection => Object.keys(projection).reduce((acc, key) => {
      const originalHandler = projection[key].bind(projection)

      acc[key] = (...args) => {
        const result = originalHandler(...args)
        filterAsyncResult(result)
        return result
      }

      return acc
    }, {})
const invariantHash_0 = \\"8f56cca6d478dcc3beca1ff4497e55b4709427de061adf605db3a831efe5130027c3e1ad1eafd5d5258dbcce41bc240b074e9ac153ea29cbff610a465cf7d4ba\\"
const name_0 = \\"Todos\\"
const invariantHash_1 = \\"8f56cca6d478dcc3beca1ff4497e55b4709427de061adf605db3a831efe5130027c3e1ad1eafd5d5258dbcce41bc240b074e9ac153ea29cbff610a465cf7d4ba\\"
const name_1 = \\"Items\\"
const viewModels = []

viewModels.push({
  name: name_0
, projection: wrapCheckProjection(projection_0)
, invariantHash: invariantHash_0
, deserializeState: deserializeState_0
})

viewModels.push({
  name: name_1
, projection: wrapCheckProjection(projection_1)
, invariantHash: invariantHash_1
, deserializeState: deserializeState_1
})

export default viewModels
"
`;

exports[`base(v2) config works correctly [server] 1`] = `
"
import interopRequireDefault from \\"@babel/runtime/helpers/interopRequireDefault\\"

import projection_0 from \\"<MONOREPO_DIR>/core/resolve-scripts/test/alias/files/testProjection.js\\"
import serializeState_0 from \\"<MONOREPO_DIR>/core/resolve-scripts/src/defaults/view_model_serialize_state.js\\"
import deserializeState_0 from \\"<MONOREPO_DIR>/core/resolve-scripts/src/defaults/view_model_deserialize_state.js\\"

import projection_1 from \\"<MONOREPO_DIR>/core/resolve-scripts/test/alias/files/testProjection.js\\"
import serializeState_1 from \\"<MONOREPO_DIR>/core/resolve-scripts/src/defaults/view_model_serialize_state.js\\"
import deserializeState_1 from \\"<MONOREPO_DIR>/core/resolve-scripts/src/defaults/view_model_deserialize_state.js\\"

let AsyncGeneratorProto, GeneratorProto, PromiseProto
    const EmptyProto = {}

    try {
      AsyncGeneratorProto = (async function*() {})().__proto__.__proto__
    } catch(error) {
      AsyncGeneratorProto = EmptyProto
    }
    try {
      GeneratorProto = (function*() {})().__proto__.__proto__
    } catch(error) {
      GeneratorProto = EmptyProto
    }
    try {
      PromiseProto = (async function() {})().__proto__
    } catch(error) {
      PromiseProto = EmptyProto
    }

    const filterAsyncResult = result => {
      if (result == null || result.__proto__ == null) return

      if (result.__proto__ === PromiseProto) {
        throw new Error(
          'A Projection function cannot be asynchronous or return a Promise object'
        )
      }

      const innerProto = result.__proto__.__proto__
      if (innerProto == null) return

      if (innerProto === GeneratorProto || innerProto === AsyncGeneratorProto) {
        throw new Error(
          'A Projection function cannot be a generator or return an iterable object'
        )
      }
    }

    const wrapCheckProjection = projection => Object.keys(projection).reduce((acc, key) => {
      const originalHandler = projection[key].bind(projection)

      acc[key] = (...args) => {
        const result = originalHandler(...args)
        filterAsyncResult(result)
        return result
      }

      return acc
    }, {})
const invariantHash_0 = \\"8f56cca6d478dcc3beca1ff4497e55b4709427de061adf605db3a831efe5130027c3e1ad1eafd5d5258dbcce41bc240b074e9ac153ea29cbff610a465cf7d4ba\\"
const name_0 = \\"Todos\\"
const invariantHash_1 = \\"8f56cca6d478dcc3beca1ff4497e55b4709427de061adf605db3a831efe5130027c3e1ad1eafd5d5258dbcce41bc240b074e9ac153ea29cbff610a465cf7d4ba\\"
const name_1 = \\"Items\\"
const viewModels = []

viewModels.push({
  name: name_0
, projection: wrapCheckProjection(projection_0)
, invariantHash: invariantHash_0
, serializeState: serializeState_0
, deserializeState: deserializeState_0
})

viewModels.push({
  name: name_1
, projection: wrapCheckProjection(projection_1)
, invariantHash: invariantHash_1
, serializeState: serializeState_1
, deserializeState: deserializeState_1
})

export default viewModels
"
`;

exports[`config with serializeState/deserializeState works correctly [client] 1`] = `
"
import interopRequireDefault from \\"@babel/runtime/helpers/interopRequireDefault\\"

import projection_0 from \\"<MONOREPO_DIR>/core/resolve-scripts/test/alias/files/testProjection.js\\"
import deserializeState_0 from \\"<MONOREPO_DIR>/core/resolve-scripts/test/alias/files/testDeserializeState.js\\"

let AsyncGeneratorProto, GeneratorProto, PromiseProto
    const EmptyProto = {}

    try {
      AsyncGeneratorProto = (async function*() {})().__proto__.__proto__
    } catch(error) {
      AsyncGeneratorProto = EmptyProto
    }
    try {
      GeneratorProto = (function*() {})().__proto__.__proto__
    } catch(error) {
      GeneratorProto = EmptyProto
    }
    try {
      PromiseProto = (async function() {})().__proto__
    } catch(error) {
      PromiseProto = EmptyProto
    }

    const filterAsyncResult = result => {
      if (result == null || result.__proto__ == null) return

      if (result.__proto__ === PromiseProto) {
        throw new Error(
          'A Projection function cannot be asynchronous or return a Promise object'
        )
      }

      const innerProto = result.__proto__.__proto__
      if (innerProto == null) return

      if (innerProto === GeneratorProto || innerProto === AsyncGeneratorProto) {
        throw new Error(
          'A Projection function cannot be a generator or return an iterable object'
        )
      }
    }

    const wrapCheckProjection = projection => Object.keys(projection).reduce((acc, key) => {
      const originalHandler = projection[key].bind(projection)

      acc[key] = (...args) => {
        const result = originalHandler(...args)
        filterAsyncResult(result)
        return result
      }

      return acc
    }, {})
const invariantHash_0 = \\"8f56cca6d478dcc3beca1ff4497e55b4709427de061adf605db3a831efe5130027c3e1ad1eafd5d5258dbcce41bc240b074e9ac153ea29cbff610a465cf7d4ba\\"
const name_0 = \\"Todos\\"
const viewModels = []

viewModels.push({
  name: name_0
, projection: wrapCheckProjection(projection_0)
, invariantHash: invariantHash_0
, deserializeState: deserializeState_0
})

export default viewModels
"
`;

exports[`config with serializeState/deserializeState works correctly [server] 1`] = `
"
import interopRequireDefault from \\"@babel/runtime/helpers/interopRequireDefault\\"

import projection_0 from \\"<MONOREPO_DIR>/core/resolve-scripts/test/alias/files/testProjection.js\\"
import serializeState_0 from \\"<MONOREPO_DIR>/core/resolve-scripts/test/alias/files/testSerializeState.js\\"
import deserializeState_0 from \\"<MONOREPO_DIR>/core/resolve-scripts/test/alias/files/testDeserializeState.js\\"

let AsyncGeneratorProto, GeneratorProto, PromiseProto
    const EmptyProto = {}

    try {
      AsyncGeneratorProto = (async function*() {})().__proto__.__proto__
    } catch(error) {
      AsyncGeneratorProto = EmptyProto
    }
    try {
      GeneratorProto = (function*() {})().__proto__.__proto__
    } catch(error) {
      GeneratorProto = EmptyProto
    }
    try {
      PromiseProto = (async function() {})().__proto__
    } catch(error) {
      PromiseProto = EmptyProto
    }

    const filterAsyncResult = result => {
      if (result == null || result.__proto__ == null) return

      if (result.__proto__ === PromiseProto) {
        throw new Error(
          'A Projection function cannot be asynchronous or return a Promise object'
        )
      }

      const innerProto = result.__proto__.__proto__
      if (innerProto == null) return

      if (innerProto === GeneratorProto || innerProto === AsyncGeneratorProto) {
        throw new Error(
          'A Projection function cannot be a generator or return an iterable object'
        )
      }
    }

    const wrapCheckProjection = projection => Object.keys(projection).reduce((acc, key) => {
      const originalHandler = projection[key].bind(projection)

      acc[key] = (...args) => {
        const result = originalHandler(...args)
        filterAsyncResult(result)
        return result
      }

      return acc
    }, {})
const invariantHash_0 = \\"8f56cca6d478dcc3beca1ff4497e55b4709427de061adf605db3a831efe5130027c3e1ad1eafd5d5258dbcce41bc240b074e9ac153ea29cbff610a465cf7d4ba\\"
const name_0 = \\"Todos\\"
const viewModels = []

viewModels.push({
  name: name_0
, projection: wrapCheckProjection(projection_0)
, invariantHash: invariantHash_0
, serializeState: serializeState_0
, deserializeState: deserializeState_0
})

export default viewModels
"
`;

exports[`config with snapshot + process.env works correctly [client] 1`] = `
"
import interopRequireDefault from \\"@babel/runtime/helpers/interopRequireDefault\\"

import projection_0 from \\"<MONOREPO_DIR>/core/resolve-scripts/test/alias/files/testProjection.js\\"
import deserializeState_0 from \\"<MONOREPO_DIR>/core/resolve-scripts/src/defaults/view_model_deserialize_state.js\\"

let AsyncGeneratorProto, GeneratorProto, PromiseProto
    const EmptyProto = {}

    try {
      AsyncGeneratorProto = (async function*() {})().__proto__.__proto__
    } catch(error) {
      AsyncGeneratorProto = EmptyProto
    }
    try {
      GeneratorProto = (function*() {})().__proto__.__proto__
    } catch(error) {
      GeneratorProto = EmptyProto
    }
    try {
      PromiseProto = (async function() {})().__proto__
    } catch(error) {
      PromiseProto = EmptyProto
    }

    const filterAsyncResult = result => {
      if (result == null || result.__proto__ == null) return

      if (result.__proto__ === PromiseProto) {
        throw new Error(
          'A Projection function cannot be asynchronous or return a Promise object'
        )
      }

      const innerProto = result.__proto__.__proto__
      if (innerProto == null) return

      if (innerProto === GeneratorProto || innerProto === AsyncGeneratorProto) {
        throw new Error(
          'A Projection function cannot be a generator or return an iterable object'
        )
      }
    }

    const wrapCheckProjection = projection => Object.keys(projection).reduce((acc, key) => {
      const originalHandler = projection[key].bind(projection)

      acc[key] = (...args) => {
        const result = originalHandler(...args)
        filterAsyncResult(result)
        return result
      }

      return acc
    }, {})
const invariantHash_0 = \\"8f56cca6d478dcc3beca1ff4497e55b4709427de061adf605db3a831efe5130027c3e1ad1eafd5d5258dbcce41bc240b074e9ac153ea29cbff610a465cf7d4ba\\"
const name_0 = \\"Todos\\"
const viewModels = []

viewModels.push({
  name: name_0
, projection: wrapCheckProjection(projection_0)
, invariantHash: invariantHash_0
, deserializeState: deserializeState_0
})

export default viewModels
"
`;

exports[`config with snapshot + process.env works correctly [server] 1`] = `
"
import interopRequireDefault from \\"@babel/runtime/helpers/interopRequireDefault\\"

import projection_0 from \\"<MONOREPO_DIR>/core/resolve-scripts/test/alias/files/testProjection.js\\"
import serializeState_0 from \\"<MONOREPO_DIR>/core/resolve-scripts/src/defaults/view_model_serialize_state.js\\"
import deserializeState_0 from \\"<MONOREPO_DIR>/core/resolve-scripts/src/defaults/view_model_deserialize_state.js\\"

let AsyncGeneratorProto, GeneratorProto, PromiseProto
    const EmptyProto = {}

    try {
      AsyncGeneratorProto = (async function*() {})().__proto__.__proto__
    } catch(error) {
      AsyncGeneratorProto = EmptyProto
    }
    try {
      GeneratorProto = (function*() {})().__proto__.__proto__
    } catch(error) {
      GeneratorProto = EmptyProto
    }
    try {
      PromiseProto = (async function() {})().__proto__
    } catch(error) {
      PromiseProto = EmptyProto
    }

    const filterAsyncResult = result => {
      if (result == null || result.__proto__ == null) return

      if (result.__proto__ === PromiseProto) {
        throw new Error(
          'A Projection function cannot be asynchronous or return a Promise object'
        )
      }

      const innerProto = result.__proto__.__proto__
      if (innerProto == null) return

      if (innerProto === GeneratorProto || innerProto === AsyncGeneratorProto) {
        throw new Error(
          'A Projection function cannot be a generator or return an iterable object'
        )
      }
    }

    const wrapCheckProjection = projection => Object.keys(projection).reduce((acc, key) => {
      const originalHandler = projection[key].bind(projection)

      acc[key] = (...args) => {
        const result = originalHandler(...args)
        filterAsyncResult(result)
        return result
      }

      return acc
    }, {})
const invariantHash_0 = \\"8f56cca6d478dcc3beca1ff4497e55b4709427de061adf605db3a831efe5130027c3e1ad1eafd5d5258dbcce41bc240b074e9ac153ea29cbff610a465cf7d4ba\\"
const name_0 = \\"Todos\\"
const snapshotAdapter_0 = {
  \\"module\\": \\"process.env[\\\\\\"VIEW_MODEL_TODOS_ADAPTER\\\\\\"]\\",
  \\"options\\": {
    \\"size\\": \\"process.env[\\\\\\"VIEW_MODEL_TODOS_OPTIONS_SIZE\\\\\\"]\\"
  }
}
const snapshotAdapterModule_0 = interopRequireDefault(
  __non_webpack_require__(snapshotAdapter_0.module)
).default
const snapshotAdapterOptions_0 = snapshotAdapter_0.options
const viewModels = []

viewModels.push({
  name: name_0
, projection: wrapCheckProjection(projection_0)
, invariantHash: invariantHash_0
, serializeState: serializeState_0
, deserializeState: deserializeState_0
, snapshotAdapter: {
    module: snapshotAdapterModule_0,
    options: snapshotAdapterOptions_0 
  }
})

export default viewModels
"
`;

exports[`config with snapshot works correctly [client] 1`] = `
"
import interopRequireDefault from \\"@babel/runtime/helpers/interopRequireDefault\\"

import projection_0 from \\"<MONOREPO_DIR>/core/resolve-scripts/test/alias/files/testProjection.js\\"
import deserializeState_0 from \\"<MONOREPO_DIR>/core/resolve-scripts/src/defaults/view_model_deserialize_state.js\\"

let AsyncGeneratorProto, GeneratorProto, PromiseProto
    const EmptyProto = {}

    try {
      AsyncGeneratorProto = (async function*() {})().__proto__.__proto__
    } catch(error) {
      AsyncGeneratorProto = EmptyProto
    }
    try {
      GeneratorProto = (function*() {})().__proto__.__proto__
    } catch(error) {
      GeneratorProto = EmptyProto
    }
    try {
      PromiseProto = (async function() {})().__proto__
    } catch(error) {
      PromiseProto = EmptyProto
    }

    const filterAsyncResult = result => {
      if (result == null || result.__proto__ == null) return

      if (result.__proto__ === PromiseProto) {
        throw new Error(
          'A Projection function cannot be asynchronous or return a Promise object'
        )
      }

      const innerProto = result.__proto__.__proto__
      if (innerProto == null) return

      if (innerProto === GeneratorProto || innerProto === AsyncGeneratorProto) {
        throw new Error(
          'A Projection function cannot be a generator or return an iterable object'
        )
      }
    }

    const wrapCheckProjection = projection => Object.keys(projection).reduce((acc, key) => {
      const originalHandler = projection[key].bind(projection)

      acc[key] = (...args) => {
        const result = originalHandler(...args)
        filterAsyncResult(result)
        return result
      }

      return acc
    }, {})
const invariantHash_0 = \\"8f56cca6d478dcc3beca1ff4497e55b4709427de061adf605db3a831efe5130027c3e1ad1eafd5d5258dbcce41bc240b074e9ac153ea29cbff610a465cf7d4ba\\"
const name_0 = \\"Todos\\"
const viewModels = []

viewModels.push({
  name: name_0
, projection: wrapCheckProjection(projection_0)
, invariantHash: invariantHash_0
, deserializeState: deserializeState_0
})

export default viewModels
"
`;

exports[`config with snapshot works correctly [server] 1`] = `
"
import interopRequireDefault from \\"@babel/runtime/helpers/interopRequireDefault\\"

import projection_0 from \\"<MONOREPO_DIR>/core/resolve-scripts/test/alias/files/testProjection.js\\"
import serializeState_0 from \\"<MONOREPO_DIR>/core/resolve-scripts/src/defaults/view_model_serialize_state.js\\"
import deserializeState_0 from \\"<MONOREPO_DIR>/core/resolve-scripts/src/defaults/view_model_deserialize_state.js\\"

import snapshotAdapterModule_0 from \\"<MONOREPO_DIR>/core/resolve-scripts/test/alias/files/testSnapshotAdapter.js\\"
let AsyncGeneratorProto, GeneratorProto, PromiseProto
    const EmptyProto = {}

    try {
      AsyncGeneratorProto = (async function*() {})().__proto__.__proto__
    } catch(error) {
      AsyncGeneratorProto = EmptyProto
    }
    try {
      GeneratorProto = (function*() {})().__proto__.__proto__
    } catch(error) {
      GeneratorProto = EmptyProto
    }
    try {
      PromiseProto = (async function() {})().__proto__
    } catch(error) {
      PromiseProto = EmptyProto
    }

    const filterAsyncResult = result => {
      if (result == null || result.__proto__ == null) return

      if (result.__proto__ === PromiseProto) {
        throw new Error(
          'A Projection function cannot be asynchronous or return a Promise object'
        )
      }

      const innerProto = result.__proto__.__proto__
      if (innerProto == null) return

      if (innerProto === GeneratorProto || innerProto === AsyncGeneratorProto) {
        throw new Error(
          'A Projection function cannot be a generator or return an iterable object'
        )
      }
    }

    const wrapCheckProjection = projection => Object.keys(projection).reduce((acc, key) => {
      const originalHandler = projection[key].bind(projection)

      acc[key] = (...args) => {
        const result = originalHandler(...args)
        filterAsyncResult(result)
        return result
      }

      return acc
    }, {})
const invariantHash_0 = \\"8f56cca6d478dcc3beca1ff4497e55b4709427de061adf605db3a831efe5130027c3e1ad1eafd5d5258dbcce41bc240b074e9ac153ea29cbff610a465cf7d4ba\\"
const name_0 = \\"Todos\\"
const snapshotAdapterOptions_0 = {\\"size\\":100}
const viewModels = []

viewModels.push({
  name: name_0
, projection: wrapCheckProjection(projection_0)
, invariantHash: invariantHash_0
, serializeState: serializeState_0
, deserializeState: deserializeState_0
, snapshotAdapter: {
    module: snapshotAdapterModule_0,
    options: snapshotAdapterOptions_0 
  }
})

export default viewModels
"
`;

exports[`config with validator works correctly [client] 1`] = `
"
import interopRequireDefault from \\"@babel/runtime/helpers/interopRequireDefault\\"

import projection_0 from \\"<MONOREPO_DIR>/core/resolve-scripts/test/alias/files/testProjection.js\\"
import deserializeState_0 from \\"<MONOREPO_DIR>/core/resolve-scripts/src/defaults/view_model_deserialize_state.js\\"

let AsyncGeneratorProto, GeneratorProto, PromiseProto
    const EmptyProto = {}

    try {
      AsyncGeneratorProto = (async function*() {})().__proto__.__proto__
    } catch(error) {
      AsyncGeneratorProto = EmptyProto
    }
    try {
      GeneratorProto = (function*() {})().__proto__.__proto__
    } catch(error) {
      GeneratorProto = EmptyProto
    }
    try {
      PromiseProto = (async function() {})().__proto__
    } catch(error) {
      PromiseProto = EmptyProto
    }

    const filterAsyncResult = result => {
      if (result == null || result.__proto__ == null) return

      if (result.__proto__ === PromiseProto) {
        throw new Error(
          'A Projection function cannot be asynchronous or return a Promise object'
        )
      }

      const innerProto = result.__proto__.__proto__
      if (innerProto == null) return

      if (innerProto === GeneratorProto || innerProto === AsyncGeneratorProto) {
        throw new Error(
          'A Projection function cannot be a generator or return an iterable object'
        )
      }
    }

    const wrapCheckProjection = projection => Object.keys(projection).reduce((acc, key) => {
      const originalHandler = projection[key].bind(projection)

      acc[key] = (...args) => {
        const result = originalHandler(...args)
        filterAsyncResult(result)
        return result
      }

      return acc
    }, {})
const invariantHash_0 = \\"8f56cca6d478dcc3beca1ff4497e55b4709427de061adf605db3a831efe5130027c3e1ad1eafd5d5258dbcce41bc240b074e9ac153ea29cbff610a465cf7d4ba\\"
const name_0 = \\"Todos\\"
const viewModels = []

viewModels.push({
  name: name_0
, projection: wrapCheckProjection(projection_0)
, invariantHash: invariantHash_0
, deserializeState: deserializeState_0
})

export default viewModels
"
`;

exports[`config with validator works correctly [server] 1`] = `
"
import interopRequireDefault from \\"@babel/runtime/helpers/interopRequireDefault\\"

import projection_0 from \\"<MONOREPO_DIR>/core/resolve-scripts/test/alias/files/testProjection.js\\"
import serializeState_0 from \\"<MONOREPO_DIR>/core/resolve-scripts/src/defaults/view_model_serialize_state.js\\"
import deserializeState_0 from \\"<MONOREPO_DIR>/core/resolve-scripts/src/defaults/view_model_deserialize_state.js\\"
import validator_0 from \\"<MONOREPO_DIR>/core/resolve-scripts/test/alias/files/testValidator.js\\"

let AsyncGeneratorProto, GeneratorProto, PromiseProto
    const EmptyProto = {}

    try {
      AsyncGeneratorProto = (async function*() {})().__proto__.__proto__
    } catch(error) {
      AsyncGeneratorProto = EmptyProto
    }
    try {
      GeneratorProto = (function*() {})().__proto__.__proto__
    } catch(error) {
      GeneratorProto = EmptyProto
    }
    try {
      PromiseProto = (async function() {})().__proto__
    } catch(error) {
      PromiseProto = EmptyProto
    }

    const filterAsyncResult = result => {
      if (result == null || result.__proto__ == null) return

      if (result.__proto__ === PromiseProto) {
        throw new Error(
          'A Projection function cannot be asynchronous or return a Promise object'
        )
      }

      const innerProto = result.__proto__.__proto__
      if (innerProto == null) return

      if (innerProto === GeneratorProto || innerProto === AsyncGeneratorProto) {
        throw new Error(
          'A Projection function cannot be a generator or return an iterable object'
        )
      }
    }

    const wrapCheckProjection = projection => Object.keys(projection).reduce((acc, key) => {
      const originalHandler = projection[key].bind(projection)

      acc[key] = (...args) => {
        const result = originalHandler(...args)
        filterAsyncResult(result)
        return result
      }

      return acc
    }, {})
const invariantHash_0 = \\"8f56cca6d478dcc3beca1ff4497e55b4709427de061adf605db3a831efe5130027c3e1ad1eafd5d5258dbcce41bc240b074e9ac153ea29cbff610a465cf7d4ba\\"
const name_0 = \\"Todos\\"
const viewModels = []

viewModels.push({
  name: name_0
, projection: wrapCheckProjection(projection_0)
, invariantHash: invariantHash_0
, serializeState: serializeState_0
, deserializeState: deserializeState_0
, validator: validator_0
})

export default viewModels
"
`;
