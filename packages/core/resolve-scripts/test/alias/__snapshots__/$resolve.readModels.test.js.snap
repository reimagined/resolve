// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`base config works correctly [client] 1`] = `
"

const name_0 = \\"Todos\\"
const resolvers_0 = {
  todos() {},
  items() {}
}

const readModels = []

readModels.push({
  name: name_0
, resolvers: resolvers_0
})

export default readModels
"
`;

exports[`base config works correctly [server] 1`] = `
"
import resolvers_0_instance from \\"<MONOREPO_DIR>/core/resolve-scripts/test/alias/files/testResolvers.js\\"
import projection_0_instance from \\"<MONOREPO_DIR>/core/resolve-scripts/test/alias/files/testProjection.js\\"
import read_model_adapter_0_constructor from \\"resolve-readmodel-memory\\"
const constructorBindFunction =
    (
      constructorFunction,
      compileTimeOptions,
      compileTimeImports,
      runTimeOptions,
      runTimeImports
    ) => constructorFunction(
      { ...compileTimeOptions, ...runTimeOptions },
      { ...compileTimeImports, ...runTimeImports }
    )
const idempotentFunction = value => value

const name_0 = \\"Todos\\"
const resolvers_0 = resolvers_0_instance
const projection_0_hash = \\"e111237317f05b862c7ea099ea1311369f25a01c6ce12768f20cd638ccb3ceec273e155dcbe328fed29eecc553502a19b162f0194f507b2a8a64f3dbc01b5322\\"
const projection_0 = projection_0_instance
const read_model_adapter_0_imports = {  }
const read_model_adapter_0_options = {}
const read_model_adapter_0 = constructorBindFunction.bind(null,
      read_model_adapter_0_constructor,
      read_model_adapter_0_options,
      read_model_adapter_0_imports
    )

const readModels = []

readModels.push({
  name: name_0
, resolvers: resolvers_0
, projection: projection_0
, invariantHash: projection_0_hash
, adapter: read_model_adapter_0
})

export default readModels
"
`;

exports[`base(v2) config works correctly [client] 1`] = `
"

const name_0 = \\"Todos\\"
const resolvers_0 = {
  todos() {},
  items() {}
}
const name_1 = \\"Items\\"
const resolvers_1 = {
  todos() {},
  items() {}
}

const readModels = []

readModels.push({
  name: name_0
, resolvers: resolvers_0
})

readModels.push({
  name: name_1
, resolvers: resolvers_1
})

export default readModels
"
`;

exports[`base(v2) config works correctly [server] 1`] = `
"
import resolvers_0_instance from \\"<MONOREPO_DIR>/core/resolve-scripts/test/alias/files/testResolvers.js\\"
import projection_0_instance from \\"<MONOREPO_DIR>/core/resolve-scripts/test/alias/files/testProjection.js\\"
import read_model_adapter_0_constructor from \\"resolve-readmodel-memory\\"
import resolvers_1_instance from \\"<MONOREPO_DIR>/core/resolve-scripts/test/alias/files/testResolvers.js\\"
import projection_1_instance from \\"<MONOREPO_DIR>/core/resolve-scripts/test/alias/files/testProjection.js\\"
import read_model_adapter_1_constructor from \\"resolve-readmodel-memory\\"
const constructorBindFunction =
    (
      constructorFunction,
      compileTimeOptions,
      compileTimeImports,
      runTimeOptions,
      runTimeImports
    ) => constructorFunction(
      { ...compileTimeOptions, ...runTimeOptions },
      { ...compileTimeImports, ...runTimeImports }
    )
const idempotentFunction = value => value

const name_0 = \\"Todos\\"
const resolvers_0 = resolvers_0_instance
const projection_0_hash = \\"e111237317f05b862c7ea099ea1311369f25a01c6ce12768f20cd638ccb3ceec273e155dcbe328fed29eecc553502a19b162f0194f507b2a8a64f3dbc01b5322\\"
const projection_0 = projection_0_instance
const read_model_adapter_0_imports = {  }
const read_model_adapter_0_options = {}
const read_model_adapter_0 = constructorBindFunction.bind(null,
      read_model_adapter_0_constructor,
      read_model_adapter_0_options,
      read_model_adapter_0_imports
    )
const name_1 = \\"Items\\"
const resolvers_1 = resolvers_1_instance
const projection_1_hash = \\"e111237317f05b862c7ea099ea1311369f25a01c6ce12768f20cd638ccb3ceec273e155dcbe328fed29eecc553502a19b162f0194f507b2a8a64f3dbc01b5322\\"
const projection_1 = projection_1_instance
const read_model_adapter_1_imports = {  }
const read_model_adapter_1_options = {}
const read_model_adapter_1 = constructorBindFunction.bind(null,
      read_model_adapter_1_constructor,
      read_model_adapter_1_options,
      read_model_adapter_1_imports
    )

const readModels = []

readModels.push({
  name: name_0
, resolvers: resolvers_0
, projection: projection_0
, invariantHash: projection_0_hash
, adapter: read_model_adapter_0
})

readModels.push({
  name: name_1
, resolvers: resolvers_1
, projection: projection_1
, invariantHash: projection_1_hash
, adapter: read_model_adapter_1
})

export default readModels
"
`;

exports[`config + process.env works correctly [client] 1`] = `
"

const name_0 = \\"Todos\\"
const resolvers_0 = {
  todos() {},
  items() {}
}

const readModels = []

readModels.push({
  name: name_0
, resolvers: resolvers_0
})

export default readModels
"
`;

exports[`config + process.env works correctly [server] 1`] = `
"
import interopRequireDefault from \\"@babel/runtime/helpers/interopRequireDefault\\"
import resolvers_0_instance from \\"<MONOREPO_DIR>/core/resolve-scripts/test/alias/files/testResolvers.js\\"
import projection_0_instance from \\"<MONOREPO_DIR>/core/resolve-scripts/test/alias/files/testProjection.js\\"
const constructorBindFunction =
    (
      constructorFunction,
      compileTimeOptions,
      compileTimeImports,
      runTimeOptions,
      runTimeImports
    ) => constructorFunction(
      { ...compileTimeOptions, ...runTimeOptions },
      { ...compileTimeImports, ...runTimeImports }
    )
const idempotentFunction = value => value

const name_0 = \\"Todos\\"
const resolvers_0 = resolvers_0_instance
const projection_0_hash = \\"e111237317f05b862c7ea099ea1311369f25a01c6ce12768f20cd638ccb3ceec273e155dcbe328fed29eecc553502a19b162f0194f507b2a8a64f3dbc01b5322\\"
const projection_0 = projection_0_instance
const read_model_adapter_0_constructor = ((moduleOrFile) => {
  return interopRequireDefault(__non_webpack_require__(moduleOrFile)).default
})(process.env[\\"READ_MODEL_TODOS_ADAPTER\\"])
const read_model_adapter_0_imports = {  }
const read_model_adapter_0_options = {
  \\"size\\": process.env[\\"READ_MODEL_TODOS_OPTIONS_SIZE\\"]
}
const read_model_adapter_0 = constructorBindFunction.bind(null,
      read_model_adapter_0_constructor,
      read_model_adapter_0_options,
      read_model_adapter_0_imports
    )

const readModels = []

readModels.push({
  name: name_0
, resolvers: resolvers_0
, projection: projection_0
, invariantHash: projection_0_hash
, adapter: read_model_adapter_0
})

export default readModels
"
`;
