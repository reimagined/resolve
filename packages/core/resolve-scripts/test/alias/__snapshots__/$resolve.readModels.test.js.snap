// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`base config works correctly [server] 1`] = `
"
import '$resolve.guardOnlyServer'
import resolvers_0_instance from \\"<MONOREPO_DIR>/core/resolve-scripts/test/alias/files/testResolvers.js\\"
import projection_0_instance from \\"<MONOREPO_DIR>/core/resolve-scripts/test/alias/files/testProjection.js\\"
const constructorBindFunction =
    (
      constructorFunction,
      compileTimeOptions,
      compileTimeImports,
      runTimeOptions,
      runTimeImports
    ) => constructorFunction(
      { ...compileTimeOptions, ...runTimeOptions },
      { ...compileTimeImports, ...runTimeImports }
    )
const idempotentFunction = value => value

const name_0 = \\"Todos\\"
const connectorName_0 = \\"Todos\\"
const resolvers_0 = resolvers_0_instance
const projection_0_hash = \\"<INVARIANT_HASH>\\"
const projection_0 = projection_0_instance

const readModels = []

readModels.push({
  name: name_0
, resolvers: resolvers_0
, connectorName: connectorName_0
, projection: projection_0
, invariantHash: projection_0_hash
})

export default readModels
"
`;

exports[`base(v2) config works correctly [server] 1`] = `
"
import '$resolve.guardOnlyServer'
import resolvers_0_instance from \\"<MONOREPO_DIR>/core/resolve-scripts/test/alias/files/testResolvers.js\\"
import projection_0_instance from \\"<MONOREPO_DIR>/core/resolve-scripts/test/alias/files/testProjection.js\\"
import resolvers_1_constructor from \\"<MONOREPO_DIR>/core/resolve-scripts/test/alias/files/testResolversAsModule.js\\"
import resolvers_1_import_testCommandsAsModule from \\"<MONOREPO_DIR>/core/resolve-scripts/test/alias/files/testCommandsAsModule.js\\"
import projection_1_constructor from \\"<MONOREPO_DIR>/core/resolve-scripts/test/alias/files/testProjectionAsModule.js\\"
import projection_1_import_testCommandsAsModule from \\"<MONOREPO_DIR>/core/resolve-scripts/test/alias/files/testCommandsAsModule.js\\"
const constructorBindFunction =
    (
      constructorFunction,
      compileTimeOptions,
      compileTimeImports,
      runTimeOptions,
      runTimeImports
    ) => constructorFunction(
      { ...compileTimeOptions, ...runTimeOptions },
      { ...compileTimeImports, ...runTimeImports }
    )
const idempotentFunction = value => value

const name_0 = \\"Todos\\"
const connectorName_0 = \\"Todos\\"
const resolvers_0 = resolvers_0_instance
const projection_0_hash = \\"<INVARIANT_HASH>\\"
const projection_0 = projection_0_instance
const name_1 = \\"Items\\"
const connectorName_1 = \\"Items\\"
const resolvers_1_imports = { [\\"testCommandsAsModule\\"]: resolvers_1_import_testCommandsAsModule }
const resolvers_1_options = {}
const resolvers_1 = resolvers_1_constructor(
      resolvers_1_options,
      resolvers_1_imports
    )
const projection_1_constructor_hash = \\"<INVARIANT_HASH>\\"
const projection_1_import_testCommandsAsModule_hash = \\"<INVARIANT_HASH>\\"
const projection_1_imports = { [\\"testCommandsAsModule\\"]: projection_1_import_testCommandsAsModule }
const projection_1_imports_hash = ((content) => {
  const hmac = __non_webpack_require__('crypto')
    .createHmac('sha512', \\"resolve-read-model-projection-hash\\")
  hmac.update(content)
  return hmac.digest('hex')
})(JSON.stringify([projection_1_import_testCommandsAsModule_hash
        ]))
const projection_1_options = {}
const projection_1_options_hash = ((content) => {
  const hmac = __non_webpack_require__('crypto')
    .createHmac('sha512', \\"resolve-read-model-projection-hash\\")
  hmac.update(content)
  return hmac.digest('hex')
})(JSON.stringify(projection_1_options))
const projection_1 = projection_1_constructor(
      projection_1_options,
      projection_1_imports
    )
const projection_1_hash = ((content) => {
  const hmac = __non_webpack_require__('crypto')
    .createHmac('sha512', \\"resolve-read-model-projection-hash\\")
  hmac.update(content)
  return hmac.digest('hex')
})(JSON.stringify([
          projection_1_constructor_hash,
          projection_1_options_hash,
          projection_1_imports_hash
        ]))

const readModels = []

readModels.push({
  name: name_0
, resolvers: resolvers_0
, connectorName: connectorName_0
, projection: projection_0
, invariantHash: projection_0_hash
})

readModels.push({
  name: name_1
, resolvers: resolvers_1
, connectorName: connectorName_1
, projection: projection_1
, invariantHash: projection_1_hash
})

export default readModels
"
`;

exports[`config + process.env works correctly [server] 1`] = `
"
import '$resolve.guardOnlyServer'
import resolvers_0_instance from \\"<MONOREPO_DIR>/core/resolve-scripts/test/alias/files/testResolvers.js\\"
import projection_0_instance from \\"<MONOREPO_DIR>/core/resolve-scripts/test/alias/files/testProjection.js\\"
const constructorBindFunction =
    (
      constructorFunction,
      compileTimeOptions,
      compileTimeImports,
      runTimeOptions,
      runTimeImports
    ) => constructorFunction(
      { ...compileTimeOptions, ...runTimeOptions },
      { ...compileTimeImports, ...runTimeImports }
    )
const idempotentFunction = value => value

const name_0 = \\"Todos\\"
const connectorName_0 = undefined
const resolvers_0 = resolvers_0_instance
const projection_0_hash = \\"<INVARIANT_HASH>\\"
const projection_0 = projection_0_instance

const readModels = []

readModels.push({
  name: name_0
, resolvers: resolvers_0
, connectorName: connectorName_0
, projection: projection_0
, invariantHash: projection_0_hash
})

export default readModels
"
`;
