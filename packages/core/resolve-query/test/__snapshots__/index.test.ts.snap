// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`with performanceTracer common "createQuery" should raise error when a read model is declared twice: addAnnotation 1`] = `Array []`;

exports[`with performanceTracer common "createQuery" should raise error when a read model is declared twice: addError 1`] = `Array []`;

exports[`with performanceTracer common "createQuery" should raise error when a read model is declared twice: addNewSubsegment 1`] = `Array []`;

exports[`with performanceTracer common "createQuery" should raise error when a read model is declared twice: close 1`] = `Array []`;

exports[`with performanceTracer common "createQuery" should raise error when a read model is declared twice: getSegment 1`] = `Array []`;

exports[`with performanceTracer common "createQuery" should raise error when a view model is declared twice: addAnnotation 1`] = `Array []`;

exports[`with performanceTracer common "createQuery" should raise error when a view model is declared twice: addError 1`] = `Array []`;

exports[`with performanceTracer common "createQuery" should raise error when a view model is declared twice: addNewSubsegment 1`] = `Array []`;

exports[`with performanceTracer common "createQuery" should raise error when a view model is declared twice: close 1`] = `Array []`;

exports[`with performanceTracer common "createQuery" should raise error when a view model is declared twice: getSegment 1`] = `Array []`;

exports[`with performanceTracer common "read" should raise error when wrong options for read invocation: addAnnotation 1`] = `Array []`;

exports[`with performanceTracer common "read" should raise error when wrong options for read invocation: addError 1`] = `Array []`;

exports[`with performanceTracer common "read" should raise error when wrong options for read invocation: addNewSubsegment 1`] = `Array []`;

exports[`with performanceTracer common "read" should raise error when wrong options for read invocation: close 1`] = `Array []`;

exports[`with performanceTracer common "read" should raise error when wrong options for read invocation: getSegment 1`] = `Array []`;

exports[`with performanceTracer read models "dispose" should dispose only one time: addAnnotation 1`] = `Array []`;

exports[`with performanceTracer read models "dispose" should dispose only one time: addError 1`] = `Array []`;

exports[`with performanceTracer read models "dispose" should dispose only one time: addNewSubsegment 1`] = `Array []`;

exports[`with performanceTracer read models "dispose" should dispose only one time: close 1`] = `Array []`;

exports[`with performanceTracer read models "dispose" should dispose only one time: getSegment 1`] = `Array []`;

exports[`with performanceTracer read models "drop" should drop read model: addAnnotation 1`] = `Array []`;

exports[`with performanceTracer read models "drop" should drop read model: addError 1`] = `Array []`;

exports[`with performanceTracer read models "drop" should drop read model: addNewSubsegment 1`] = `Array []`;

exports[`with performanceTracer read models "drop" should drop read model: close 1`] = `Array []`;

exports[`with performanceTracer read models "drop" should drop read model: getSegment 1`] = `Array []`;

exports[`with performanceTracer read models "drop" should raise error when query is disposed: addAnnotation 1`] = `Array []`;

exports[`with performanceTracer read models "drop" should raise error when query is disposed: addError 1`] = `Array []`;

exports[`with performanceTracer read models "drop" should raise error when query is disposed: addNewSubsegment 1`] = `Array []`;

exports[`with performanceTracer read models "drop" should raise error when query is disposed: close 1`] = `Array []`;

exports[`with performanceTracer read models "drop" should raise error when query is disposed: getSegment 1`] = `Array []`;

exports[`with performanceTracer read models "read" should raise error when a read model does not exist: addAnnotation 1`] = `Array []`;

exports[`with performanceTracer read models "read" should raise error when a read model does not exist: addError 1`] = `Array []`;

exports[`with performanceTracer read models "read" should raise error when a read model does not exist: addNewSubsegment 1`] = `Array []`;

exports[`with performanceTracer read models "read" should raise error when a read model does not exist: close 1`] = `Array []`;

exports[`with performanceTracer read models "read" should raise error when a read model does not exist: getSegment 1`] = `Array []`;

exports[`with performanceTracer read models "read" should raise error when a resolver is not found: addAnnotation 1`] = `
Array [
  Array [
    "readModelName",
    "readModelName",
  ],
  Array [
    "resolverName",
    "notFound",
  ],
  Array [
    "origin",
    "resolve:query:read",
  ],
]
`;

exports[`with performanceTracer read models "read" should raise error when a resolver is not found: addError 1`] = `
Array [
  Array [
    [Error: Resolver "notFound" does not exist],
  ],
]
`;

exports[`with performanceTracer read models "read" should raise error when a resolver is not found: addNewSubsegment 1`] = `
Array [
  Array [
    "read",
  ],
]
`;

exports[`with performanceTracer read models "read" should raise error when a resolver is not found: close 1`] = `
Array [
  Array [],
]
`;

exports[`with performanceTracer read models "read" should raise error when a resolver is not found: getSegment 1`] = `
Array [
  Array [],
]
`;

exports[`with performanceTracer read models "read" should raise error when query is disposed: addAnnotation 1`] = `Array []`;

exports[`with performanceTracer read models "read" should raise error when query is disposed: addError 1`] = `Array []`;

exports[`with performanceTracer read models "read" should raise error when query is disposed: addNewSubsegment 1`] = `Array []`;

exports[`with performanceTracer read models "read" should raise error when query is disposed: close 1`] = `Array []`;

exports[`with performanceTracer read models "read" should raise error when query is disposed: getSegment 1`] = `Array []`;

exports[`with performanceTracer read models "read" should return the resolver result: addAnnotation 1`] = `
Array [
  Array [
    "readModelName",
    "readOnlyReadModelName",
  ],
  Array [
    "resolverName",
    "readFromDatabase",
  ],
  Array [
    "origin",
    "resolve:query:read",
  ],
  Array [
    "readModelName",
    "readOnlyReadModelName",
  ],
  Array [
    "resolverName",
    "readFromDatabase",
  ],
  Array [
    "origin",
    "resolve:query:resolver",
  ],
]
`;

exports[`with performanceTracer read models "read" should return the resolver result: addError 1`] = `Array []`;

exports[`with performanceTracer read models "read" should return the resolver result: addNewSubsegment 1`] = `
Array [
  Array [
    "read",
  ],
  Array [
    "resolver",
  ],
]
`;

exports[`with performanceTracer read models "read" should return the resolver result: close 1`] = `
Array [
  Array [],
  Array [],
]
`;

exports[`with performanceTracer read models "read" should return the resolver result: getSegment 1`] = `
Array [
  Array [],
  Array [],
]
`;

exports[`with performanceTracer read models "sendEvents" should apply events to the read model, "read" should return the resolver result: addAnnotation 1`] = `Array []`;

exports[`with performanceTracer read models "sendEvents" should apply events to the read model, "read" should return the resolver result: addError 1`] = `Array []`;

exports[`with performanceTracer read models "sendEvents" should apply events to the read model, "read" should return the resolver result: addNewSubsegment 1`] = `Array []`;

exports[`with performanceTracer read models "sendEvents" should apply events to the read model, "read" should return the resolver result: close 1`] = `Array []`;

exports[`with performanceTracer read models "sendEvents" should apply events to the read model, "read" should return the resolver result: getSegment 1`] = `Array []`;

exports[`with performanceTracer read models "sendEvents" should raise error when a projection is broken: addAnnotation 1`] = `Array []`;

exports[`with performanceTracer read models "sendEvents" should raise error when a projection is broken: addError 1`] = `Array []`;

exports[`with performanceTracer read models "sendEvents" should raise error when a projection is broken: addNewSubsegment 1`] = `Array []`;

exports[`with performanceTracer read models "sendEvents" should raise error when a projection is broken: close 1`] = `Array []`;

exports[`with performanceTracer read models "sendEvents" should raise error when a projection is broken: getSegment 1`] = `Array []`;

exports[`with performanceTracer read models "sendEvents" should raise error when a projection is not found: addAnnotation 1`] = `Array []`;

exports[`with performanceTracer read models "sendEvents" should raise error when a projection is not found: addError 1`] = `Array []`;

exports[`with performanceTracer read models "sendEvents" should raise error when a projection is not found: addNewSubsegment 1`] = `Array []`;

exports[`with performanceTracer read models "sendEvents" should raise error when a projection is not found: close 1`] = `Array []`;

exports[`with performanceTracer read models "sendEvents" should raise error when a projection is not found: getSegment 1`] = `Array []`;

exports[`with performanceTracer read models "sendEvents" should raise error when events is not array: addAnnotation 1`] = `Array []`;

exports[`with performanceTracer read models "sendEvents" should raise error when events is not array: addError 1`] = `Array []`;

exports[`with performanceTracer read models "sendEvents" should raise error when events is not array: addNewSubsegment 1`] = `Array []`;

exports[`with performanceTracer read models "sendEvents" should raise error when events is not array: close 1`] = `Array []`;

exports[`with performanceTracer read models "sendEvents" should raise error when events is not array: getSegment 1`] = `Array []`;

exports[`with performanceTracer read models "sendEvents" should raise error when query is disposed: addAnnotation 1`] = `Array []`;

exports[`with performanceTracer read models "sendEvents" should raise error when query is disposed: addError 1`] = `Array []`;

exports[`with performanceTracer read models "sendEvents" should raise error when query is disposed: addNewSubsegment 1`] = `Array []`;

exports[`with performanceTracer read models "sendEvents" should raise error when query is disposed: close 1`] = `Array []`;

exports[`with performanceTracer read models "sendEvents" should raise error when query is disposed: getSegment 1`] = `Array []`;

exports[`with performanceTracer read models "sendEvents" should raise error when updating had been interrupted: addAnnotation 1`] = `Array []`;

exports[`with performanceTracer read models "sendEvents" should raise error when updating had been interrupted: addError 1`] = `Array []`;

exports[`with performanceTracer read models "sendEvents" should raise error when updating had been interrupted: addNewSubsegment 1`] = `Array []`;

exports[`with performanceTracer read models "sendEvents" should raise error when updating had been interrupted: close 1`] = `Array []`;

exports[`with performanceTracer read models "sendEvents" should raise error when updating had been interrupted: getSegment 1`] = `Array []`;

exports[`with performanceTracer read models "serializeState" should return the resolver result: addAnnotation 1`] = `Array []`;

exports[`with performanceTracer read models "serializeState" should return the resolver result: addError 1`] = `Array []`;

exports[`with performanceTracer read models "serializeState" should return the resolver result: addNewSubsegment 1`] = `Array []`;

exports[`with performanceTracer read models "serializeState" should return the resolver result: close 1`] = `Array []`;

exports[`with performanceTracer read models "serializeState" should return the resolver result: getSegment 1`] = `Array []`;

exports[`with performanceTracer view models with snapshots "dispose" should dispose only one time: addAnnotation 1`] = `Array []`;

exports[`with performanceTracer view models with snapshots "dispose" should dispose only one time: addError 1`] = `Array []`;

exports[`with performanceTracer view models with snapshots "dispose" should dispose only one time: addNewSubsegment 1`] = `Array []`;

exports[`with performanceTracer view models with snapshots "dispose" should dispose only one time: close 1`] = `Array []`;

exports[`with performanceTracer view models with snapshots "dispose" should dispose only one time: getSegment 1`] = `Array []`;

exports[`with performanceTracer view models with snapshots "drop" should raise error on view models: addAnnotation 1`] = `Array []`;

exports[`with performanceTracer view models with snapshots "drop" should raise error on view models: addError 1`] = `Array []`;

exports[`with performanceTracer view models with snapshots "drop" should raise error on view models: addNewSubsegment 1`] = `Array []`;

exports[`with performanceTracer view models with snapshots "drop" should raise error on view models: close 1`] = `Array []`;

exports[`with performanceTracer view models with snapshots "drop" should raise error on view models: getSegment 1`] = `Array []`;

exports[`with performanceTracer view models with snapshots "drop" should raise error when query is disposed: addAnnotation 1`] = `Array []`;

exports[`with performanceTracer view models with snapshots "drop" should raise error when query is disposed: addError 1`] = `Array []`;

exports[`with performanceTracer view models with snapshots "drop" should raise error when query is disposed: addNewSubsegment 1`] = `Array []`;

exports[`with performanceTracer view models with snapshots "drop" should raise error when query is disposed: close 1`] = `Array []`;

exports[`with performanceTracer view models with snapshots "drop" should raise error when query is disposed: getSegment 1`] = `Array []`;

exports[`with performanceTracer view models with snapshots "read" should raise error when a view model does not exist: addAnnotation 1`] = `Array []`;

exports[`with performanceTracer view models with snapshots "read" should raise error when a view model does not exist: addError 1`] = `Array []`;

exports[`with performanceTracer view models with snapshots "read" should raise error when a view model does not exist: addNewSubsegment 1`] = `Array []`;

exports[`with performanceTracer view models with snapshots "read" should raise error when a view model does not exist: close 1`] = `Array []`;

exports[`with performanceTracer view models with snapshots "read" should raise error when a view model does not exist: getSegment 1`] = `Array []`;

exports[`with performanceTracer view models with snapshots "read" should raise error when aggregateIds is a bad value: addAnnotation 1`] = `Array []`;

exports[`with performanceTracer view models with snapshots "read" should raise error when aggregateIds is a bad value: addError 1`] = `Array []`;

exports[`with performanceTracer view models with snapshots "read" should raise error when aggregateIds is a bad value: addNewSubsegment 1`] = `Array []`;

exports[`with performanceTracer view models with snapshots "read" should raise error when aggregateIds is a bad value: close 1`] = `Array []`;

exports[`with performanceTracer view models with snapshots "read" should raise error when aggregateIds is a bad value: getSegment 1`] = `Array []`;

exports[`with performanceTracer view models with snapshots "read" should raise error when query is disposed: addAnnotation 1`] = `Array []`;

exports[`with performanceTracer view models with snapshots "read" should raise error when query is disposed: addError 1`] = `Array []`;

exports[`with performanceTracer view models with snapshots "read" should raise error when query is disposed: addNewSubsegment 1`] = `Array []`;

exports[`with performanceTracer view models with snapshots "read" should raise error when query is disposed: close 1`] = `Array []`;

exports[`with performanceTracer view models with snapshots "read" should raise error when query is disposed: getSegment 1`] = `Array []`;

exports[`with performanceTracer view models with snapshots "read" should return state: addAnnotation 1`] = `
Array [
  Array [
    "viewModelName",
    "viewModelName",
  ],
  Array [
    "origin",
    "resolve:query:read",
  ],
  Array [
    "viewModelName",
    "viewModelName",
  ],
  Array [
    "origin",
    "resolve:query:read",
  ],
  Array [
    "viewModelName",
    "viewModelName",
  ],
  Array [
    "eventType",
    "ADD",
  ],
  Array [
    "origin",
    "resolve:query:applyEvent",
  ],
  Array [
    "viewModelName",
    "viewModelName",
  ],
  Array [
    "eventType",
    "ADD",
  ],
  Array [
    "origin",
    "resolve:query:applyEvent",
  ],
  Array [
    "viewModelName",
    "viewModelName",
  ],
  Array [
    "eventType",
    "SUB",
  ],
  Array [
    "origin",
    "resolve:query:applyEvent",
  ],
  Array [
    "eventCount",
    3,
  ],
  Array [
    "origin",
    "resolve:query:read",
  ],
  Array [
    "viewModelName",
    "viewModelName",
  ],
  Array [
    "origin",
    "resolve:query:read",
  ],
  Array [
    "viewModelName",
    "viewModelName",
  ],
  Array [
    "origin",
    "resolve:query:read",
  ],
  Array [
    "viewModelName",
    "viewModelName",
  ],
  Array [
    "eventType",
    "ADD",
  ],
  Array [
    "origin",
    "resolve:query:applyEvent",
  ],
  Array [
    "viewModelName",
    "viewModelName",
  ],
  Array [
    "eventType",
    "ADD",
  ],
  Array [
    "origin",
    "resolve:query:applyEvent",
  ],
  Array [
    "viewModelName",
    "viewModelName",
  ],
  Array [
    "eventType",
    "SUB",
  ],
  Array [
    "origin",
    "resolve:query:applyEvent",
  ],
  Array [
    "eventCount",
    3,
  ],
  Array [
    "origin",
    "resolve:query:read",
  ],
  Array [
    "viewModelName",
    "viewModelName",
  ],
  Array [
    "origin",
    "resolve:query:read",
  ],
  Array [
    "viewModelName",
    "viewModelName",
  ],
  Array [
    "origin",
    "resolve:query:read",
  ],
  Array [
    "eventCount",
    0,
  ],
  Array [
    "origin",
    "resolve:query:read",
  ],
  Array [
    "viewModelName",
    "viewModelName",
  ],
  Array [
    "origin",
    "resolve:query:read",
  ],
  Array [
    "viewModelName",
    "viewModelName",
  ],
  Array [
    "origin",
    "resolve:query:read",
  ],
  Array [
    "viewModelName",
    "viewModelName",
  ],
  Array [
    "eventType",
    "ADD",
  ],
  Array [
    "origin",
    "resolve:query:applyEvent",
  ],
  Array [
    "viewModelName",
    "viewModelName",
  ],
  Array [
    "eventType",
    "ADD",
  ],
  Array [
    "origin",
    "resolve:query:applyEvent",
  ],
  Array [
    "viewModelName",
    "viewModelName",
  ],
  Array [
    "eventType",
    "SUB",
  ],
  Array [
    "origin",
    "resolve:query:applyEvent",
  ],
  Array [
    "viewModelName",
    "viewModelName",
  ],
  Array [
    "eventType",
    "ADD",
  ],
  Array [
    "origin",
    "resolve:query:applyEvent",
  ],
  Array [
    "viewModelName",
    "viewModelName",
  ],
  Array [
    "eventType",
    "ADD",
  ],
  Array [
    "origin",
    "resolve:query:applyEvent",
  ],
  Array [
    "viewModelName",
    "viewModelName",
  ],
  Array [
    "eventType",
    "SUB",
  ],
  Array [
    "origin",
    "resolve:query:applyEvent",
  ],
  Array [
    "eventCount",
    6,
  ],
  Array [
    "origin",
    "resolve:query:read",
  ],
  Array [
    "viewModelName",
    "viewModelName",
  ],
  Array [
    "origin",
    "resolve:query:read",
  ],
  Array [
    "viewModelName",
    "viewModelName",
  ],
  Array [
    "origin",
    "resolve:query:read",
  ],
  Array [
    "viewModelName",
    "viewModelName",
  ],
  Array [
    "eventType",
    "ADD",
  ],
  Array [
    "origin",
    "resolve:query:applyEvent",
  ],
  Array [
    "viewModelName",
    "viewModelName",
  ],
  Array [
    "eventType",
    "ADD",
  ],
  Array [
    "origin",
    "resolve:query:applyEvent",
  ],
  Array [
    "viewModelName",
    "viewModelName",
  ],
  Array [
    "eventType",
    "SUB",
  ],
  Array [
    "origin",
    "resolve:query:applyEvent",
  ],
  Array [
    "viewModelName",
    "viewModelName",
  ],
  Array [
    "eventType",
    "ADD",
  ],
  Array [
    "origin",
    "resolve:query:applyEvent",
  ],
  Array [
    "viewModelName",
    "viewModelName",
  ],
  Array [
    "eventType",
    "ADD",
  ],
  Array [
    "origin",
    "resolve:query:applyEvent",
  ],
  Array [
    "viewModelName",
    "viewModelName",
  ],
  Array [
    "eventType",
    "SUB",
  ],
  Array [
    "origin",
    "resolve:query:applyEvent",
  ],
  Array [
    "eventCount",
    6,
  ],
  Array [
    "origin",
    "resolve:query:read",
  ],
]
`;

exports[`with performanceTracer view models with snapshots "read" should return state: addError 1`] = `Array []`;

exports[`with performanceTracer view models with snapshots "read" should return state: addNewSubsegment 1`] = `
Array [
  Array [
    "read",
  ],
  Array [
    "buildViewModel",
  ],
  Array [
    "applyEvent",
  ],
  Array [
    "applyEvent",
  ],
  Array [
    "applyEvent",
  ],
  Array [
    "read",
  ],
  Array [
    "buildViewModel",
  ],
  Array [
    "applyEvent",
  ],
  Array [
    "applyEvent",
  ],
  Array [
    "applyEvent",
  ],
  Array [
    "read",
  ],
  Array [
    "buildViewModel",
  ],
  Array [
    "read",
  ],
  Array [
    "buildViewModel",
  ],
  Array [
    "applyEvent",
  ],
  Array [
    "applyEvent",
  ],
  Array [
    "applyEvent",
  ],
  Array [
    "applyEvent",
  ],
  Array [
    "applyEvent",
  ],
  Array [
    "applyEvent",
  ],
  Array [
    "read",
  ],
  Array [
    "buildViewModel",
  ],
  Array [
    "applyEvent",
  ],
  Array [
    "applyEvent",
  ],
  Array [
    "applyEvent",
  ],
  Array [
    "applyEvent",
  ],
  Array [
    "applyEvent",
  ],
  Array [
    "applyEvent",
  ],
]
`;

exports[`with performanceTracer view models with snapshots "read" should return state: close 1`] = `
Array [
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
]
`;

exports[`with performanceTracer view models with snapshots "read" should return state: getSegment 1`] = `
Array [
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
]
`;

exports[`with performanceTracer view models with snapshots "read" should reuse working build process: addAnnotation 1`] = `
Array [
  Array [
    "viewModelName",
    "viewModelName",
  ],
  Array [
    "origin",
    "resolve:query:read",
  ],
  Array [
    "viewModelName",
    "viewModelName",
  ],
  Array [
    "origin",
    "resolve:query:read",
  ],
  Array [
    "viewModelName",
    "viewModelName",
  ],
  Array [
    "origin",
    "resolve:query:read",
  ],
  Array [
    "viewModelName",
    "viewModelName",
  ],
  Array [
    "origin",
    "resolve:query:read",
  ],
  Array [
    "eventCount",
    0,
  ],
  Array [
    "origin",
    "resolve:query:read",
  ],
  Array [
    "eventCount",
    0,
  ],
  Array [
    "origin",
    "resolve:query:read",
  ],
]
`;

exports[`with performanceTracer view models with snapshots "read" should reuse working build process: addError 1`] = `Array []`;

exports[`with performanceTracer view models with snapshots "read" should reuse working build process: addNewSubsegment 1`] = `
Array [
  Array [
    "read",
  ],
  Array [
    "buildViewModel",
  ],
  Array [
    "read",
  ],
  Array [
    "buildViewModel",
  ],
]
`;

exports[`with performanceTracer view models with snapshots "read" should reuse working build process: close 1`] = `
Array [
  Array [],
  Array [],
  Array [],
  Array [],
]
`;

exports[`with performanceTracer view models with snapshots "read" should reuse working build process: getSegment 1`] = `
Array [
  Array [],
  Array [],
]
`;

exports[`with performanceTracer view models with snapshots "sendEvents" should raise error on view models: addAnnotation 1`] = `Array []`;

exports[`with performanceTracer view models with snapshots "sendEvents" should raise error on view models: addError 1`] = `Array []`;

exports[`with performanceTracer view models with snapshots "sendEvents" should raise error on view models: addNewSubsegment 1`] = `Array []`;

exports[`with performanceTracer view models with snapshots "sendEvents" should raise error on view models: close 1`] = `Array []`;

exports[`with performanceTracer view models with snapshots "sendEvents" should raise error on view models: getSegment 1`] = `Array []`;

exports[`with performanceTracer view models with snapshots "sendEvents" should raise error when query is disposed: addAnnotation 1`] = `Array []`;

exports[`with performanceTracer view models with snapshots "sendEvents" should raise error when query is disposed: addError 1`] = `Array []`;

exports[`with performanceTracer view models with snapshots "sendEvents" should raise error when query is disposed: addNewSubsegment 1`] = `Array []`;

exports[`with performanceTracer view models with snapshots "sendEvents" should raise error when query is disposed: close 1`] = `Array []`;

exports[`with performanceTracer view models with snapshots "sendEvents" should raise error when query is disposed: getSegment 1`] = `Array []`;

exports[`with performanceTracer view models with snapshots "serializeState" should return serialized state: addAnnotation 1`] = `Array []`;

exports[`with performanceTracer view models with snapshots "serializeState" should return serialized state: addError 1`] = `Array []`;

exports[`with performanceTracer view models with snapshots "serializeState" should return serialized state: addNewSubsegment 1`] = `Array []`;

exports[`with performanceTracer view models with snapshots "serializeState" should return serialized state: close 1`] = `Array []`;

exports[`with performanceTracer view models with snapshots "serializeState" should return serialized state: getSegment 1`] = `Array []`;

exports[`with performanceTracer view models without snapshots "dispose" should dispose only one time: addAnnotation 1`] = `Array []`;

exports[`with performanceTracer view models without snapshots "dispose" should dispose only one time: addError 1`] = `Array []`;

exports[`with performanceTracer view models without snapshots "dispose" should dispose only one time: addNewSubsegment 1`] = `Array []`;

exports[`with performanceTracer view models without snapshots "dispose" should dispose only one time: close 1`] = `Array []`;

exports[`with performanceTracer view models without snapshots "dispose" should dispose only one time: getSegment 1`] = `Array []`;

exports[`with performanceTracer view models without snapshots "drop" should raise error on view-model: addAnnotation 1`] = `Array []`;

exports[`with performanceTracer view models without snapshots "drop" should raise error on view-model: addError 1`] = `Array []`;

exports[`with performanceTracer view models without snapshots "drop" should raise error on view-model: addNewSubsegment 1`] = `Array []`;

exports[`with performanceTracer view models without snapshots "drop" should raise error on view-model: close 1`] = `Array []`;

exports[`with performanceTracer view models without snapshots "drop" should raise error on view-model: getSegment 1`] = `Array []`;

exports[`with performanceTracer view models without snapshots "drop" should raise error when disposed: addAnnotation 1`] = `Array []`;

exports[`with performanceTracer view models without snapshots "drop" should raise error when disposed: addError 1`] = `Array []`;

exports[`with performanceTracer view models without snapshots "drop" should raise error when disposed: addNewSubsegment 1`] = `Array []`;

exports[`with performanceTracer view models without snapshots "drop" should raise error when disposed: close 1`] = `Array []`;

exports[`with performanceTracer view models without snapshots "drop" should raise error when disposed: getSegment 1`] = `Array []`;

exports[`with performanceTracer view models without snapshots "read" should raise error when aggregateIds is a bad value: addAnnotation 1`] = `Array []`;

exports[`with performanceTracer view models without snapshots "read" should raise error when aggregateIds is a bad value: addError 1`] = `Array []`;

exports[`with performanceTracer view models without snapshots "read" should raise error when aggregateIds is a bad value: addNewSubsegment 1`] = `Array []`;

exports[`with performanceTracer view models without snapshots "read" should raise error when aggregateIds is a bad value: close 1`] = `Array []`;

exports[`with performanceTracer view models without snapshots "read" should raise error when aggregateIds is a bad value: getSegment 1`] = `Array []`;

exports[`with performanceTracer view models without snapshots "read" should raise error when query is disposed: addAnnotation 1`] = `Array []`;

exports[`with performanceTracer view models without snapshots "read" should raise error when query is disposed: addError 1`] = `Array []`;

exports[`with performanceTracer view models without snapshots "read" should raise error when query is disposed: addNewSubsegment 1`] = `Array []`;

exports[`with performanceTracer view models without snapshots "read" should raise error when query is disposed: close 1`] = `Array []`;

exports[`with performanceTracer view models without snapshots "read" should raise error when query is disposed: getSegment 1`] = `Array []`;

exports[`with performanceTracer view models without snapshots "read" should return state: addAnnotation 1`] = `
Array [
  Array [
    "viewModelName",
    "viewModelName",
  ],
  Array [
    "origin",
    "resolve:query:read",
  ],
  Array [
    "viewModelName",
    "viewModelName",
  ],
  Array [
    "origin",
    "resolve:query:read",
  ],
  Array [
    "viewModelName",
    "viewModelName",
  ],
  Array [
    "eventType",
    "ADD",
  ],
  Array [
    "origin",
    "resolve:query:applyEvent",
  ],
  Array [
    "viewModelName",
    "viewModelName",
  ],
  Array [
    "eventType",
    "ADD",
  ],
  Array [
    "origin",
    "resolve:query:applyEvent",
  ],
  Array [
    "viewModelName",
    "viewModelName",
  ],
  Array [
    "eventType",
    "SUB",
  ],
  Array [
    "origin",
    "resolve:query:applyEvent",
  ],
  Array [
    "eventCount",
    3,
  ],
  Array [
    "origin",
    "resolve:query:read",
  ],
  Array [
    "viewModelName",
    "viewModelName",
  ],
  Array [
    "origin",
    "resolve:query:read",
  ],
  Array [
    "viewModelName",
    "viewModelName",
  ],
  Array [
    "origin",
    "resolve:query:read",
  ],
  Array [
    "viewModelName",
    "viewModelName",
  ],
  Array [
    "eventType",
    "ADD",
  ],
  Array [
    "origin",
    "resolve:query:applyEvent",
  ],
  Array [
    "viewModelName",
    "viewModelName",
  ],
  Array [
    "eventType",
    "ADD",
  ],
  Array [
    "origin",
    "resolve:query:applyEvent",
  ],
  Array [
    "viewModelName",
    "viewModelName",
  ],
  Array [
    "eventType",
    "SUB",
  ],
  Array [
    "origin",
    "resolve:query:applyEvent",
  ],
  Array [
    "eventCount",
    3,
  ],
  Array [
    "origin",
    "resolve:query:read",
  ],
]
`;

exports[`with performanceTracer view models without snapshots "read" should return state: addError 1`] = `Array []`;

exports[`with performanceTracer view models without snapshots "read" should return state: addNewSubsegment 1`] = `
Array [
  Array [
    "read",
  ],
  Array [
    "buildViewModel",
  ],
  Array [
    "applyEvent",
  ],
  Array [
    "applyEvent",
  ],
  Array [
    "applyEvent",
  ],
  Array [
    "read",
  ],
  Array [
    "buildViewModel",
  ],
  Array [
    "applyEvent",
  ],
  Array [
    "applyEvent",
  ],
  Array [
    "applyEvent",
  ],
]
`;

exports[`with performanceTracer view models without snapshots "read" should return state: close 1`] = `
Array [
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
]
`;

exports[`with performanceTracer view models without snapshots "read" should return state: getSegment 1`] = `
Array [
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
]
`;

exports[`with performanceTracer view models without snapshots "read" should reuse working build process: addAnnotation 1`] = `
Array [
  Array [
    "viewModelName",
    "viewModelName",
  ],
  Array [
    "origin",
    "resolve:query:read",
  ],
  Array [
    "viewModelName",
    "viewModelName",
  ],
  Array [
    "origin",
    "resolve:query:read",
  ],
  Array [
    "viewModelName",
    "viewModelName",
  ],
  Array [
    "origin",
    "resolve:query:read",
  ],
  Array [
    "viewModelName",
    "viewModelName",
  ],
  Array [
    "origin",
    "resolve:query:read",
  ],
  Array [
    "viewModelName",
    "viewModelName",
  ],
  Array [
    "eventType",
    "ADD",
  ],
  Array [
    "origin",
    "resolve:query:applyEvent",
  ],
  Array [
    "viewModelName",
    "viewModelName",
  ],
  Array [
    "eventType",
    "ADD",
  ],
  Array [
    "origin",
    "resolve:query:applyEvent",
  ],
  Array [
    "viewModelName",
    "viewModelName",
  ],
  Array [
    "eventType",
    "ADD",
  ],
  Array [
    "origin",
    "resolve:query:applyEvent",
  ],
  Array [
    "viewModelName",
    "viewModelName",
  ],
  Array [
    "eventType",
    "ADD",
  ],
  Array [
    "origin",
    "resolve:query:applyEvent",
  ],
  Array [
    "viewModelName",
    "viewModelName",
  ],
  Array [
    "eventType",
    "SUB",
  ],
  Array [
    "origin",
    "resolve:query:applyEvent",
  ],
  Array [
    "viewModelName",
    "viewModelName",
  ],
  Array [
    "eventType",
    "SUB",
  ],
  Array [
    "origin",
    "resolve:query:applyEvent",
  ],
  Array [
    "eventCount",
    3,
  ],
  Array [
    "origin",
    "resolve:query:read",
  ],
  Array [
    "eventCount",
    3,
  ],
  Array [
    "origin",
    "resolve:query:read",
  ],
]
`;

exports[`with performanceTracer view models without snapshots "read" should reuse working build process: addError 1`] = `Array []`;

exports[`with performanceTracer view models without snapshots "read" should reuse working build process: addNewSubsegment 1`] = `
Array [
  Array [
    "read",
  ],
  Array [
    "buildViewModel",
  ],
  Array [
    "read",
  ],
  Array [
    "buildViewModel",
  ],
  Array [
    "applyEvent",
  ],
  Array [
    "applyEvent",
  ],
  Array [
    "applyEvent",
  ],
  Array [
    "applyEvent",
  ],
  Array [
    "applyEvent",
  ],
  Array [
    "applyEvent",
  ],
]
`;

exports[`with performanceTracer view models without snapshots "read" should reuse working build process: close 1`] = `
Array [
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
]
`;

exports[`with performanceTracer view models without snapshots "read" should reuse working build process: getSegment 1`] = `
Array [
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
  Array [],
]
`;

exports[`with performanceTracer view models without snapshots "sendEvents" should raise error on view models: addAnnotation 1`] = `Array []`;

exports[`with performanceTracer view models without snapshots "sendEvents" should raise error on view models: addError 1`] = `Array []`;

exports[`with performanceTracer view models without snapshots "sendEvents" should raise error on view models: addNewSubsegment 1`] = `Array []`;

exports[`with performanceTracer view models without snapshots "sendEvents" should raise error on view models: close 1`] = `Array []`;

exports[`with performanceTracer view models without snapshots "sendEvents" should raise error on view models: getSegment 1`] = `Array []`;

exports[`with performanceTracer view models without snapshots "sendEvents" should raise error when disposed: addAnnotation 1`] = `Array []`;

exports[`with performanceTracer view models without snapshots "sendEvents" should raise error when disposed: addError 1`] = `Array []`;

exports[`with performanceTracer view models without snapshots "sendEvents" should raise error when disposed: addNewSubsegment 1`] = `Array []`;

exports[`with performanceTracer view models without snapshots "sendEvents" should raise error when disposed: close 1`] = `Array []`;

exports[`with performanceTracer view models without snapshots "sendEvents" should raise error when disposed: getSegment 1`] = `Array []`;

exports[`with performanceTracer view models without snapshots "serializeState" should return serialized state: addAnnotation 1`] = `Array []`;

exports[`with performanceTracer view models without snapshots "serializeState" should return serialized state: addError 1`] = `Array []`;

exports[`with performanceTracer view models without snapshots "serializeState" should return serialized state: addNewSubsegment 1`] = `Array []`;

exports[`with performanceTracer view models without snapshots "serializeState" should return serialized state: close 1`] = `Array []`;

exports[`with performanceTracer view models without snapshots "serializeState" should return serialized state: getSegment 1`] = `Array []`;
