// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`resolve-readmodel-postgresql-serverless method "drop" 1`] = `
Array [
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "
    CREATE TABLE \\"databaseName\\".\\"tablePrefixtable1\\" (
      \\"test\\" JSONB, \\"id\\" JSONB
    );

    
      ALTER TABLE \\"databaseName\\".\\"tablePrefixtable1\\"
      ADD CONSTRAINT \\"id-type-validation\\"
      CHECK (jsonb_typeof(\\"id\\") = 'string');

      CREATE UNIQUE INDEX \\"tablePrefixtable1-id-extracted-field\\"
      ON \\"databaseName\\".\\"tablePrefixtable1\\" (
      CAST((\\"id\\" ->> '$') AS VARCHAR(190)));
     
      CREATE UNIQUE INDEX \\"tablePrefixtable1-id-full-field\\"
      ON \\"databaseName\\".\\"tablePrefixtable1\\" (
        \\"id\\"
      );
    

    COMMENT ON TABLE \\"databaseName\\".\\"tablePrefixtable1\\"
    IS 'RESOLVE-readModelName1';
  ",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "INSERT INTO \\"databaseName\\".\\"tablePrefixtable1\\"(\\"id\\", \\"test\\")
      VALUES(CAST('\\"id-1\\"' AS JSONB), CAST('true' AS JSONB));
    ",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "INSERT INTO \\"databaseName\\".\\"tablePrefixtable1\\"(\\"id\\", \\"test\\")
      VALUES(CAST('\\"id-2\\"' AS JSONB), CAST('true' AS JSONB));
    ",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "
    CREATE TABLE \\"databaseName\\".\\"tablePrefixtable2\\" (
      \\"test\\" JSONB, \\"id\\" JSONB
    );

    
      ALTER TABLE \\"databaseName\\".\\"tablePrefixtable2\\"
      ADD CONSTRAINT \\"id-type-validation\\"
      CHECK (jsonb_typeof(\\"id\\") = 'string');

      CREATE UNIQUE INDEX \\"tablePrefixtable2-id-extracted-field\\"
      ON \\"databaseName\\".\\"tablePrefixtable2\\" (
      CAST((\\"id\\" ->> '$') AS VARCHAR(190)));
     
      CREATE UNIQUE INDEX \\"tablePrefixtable2-id-full-field\\"
      ON \\"databaseName\\".\\"tablePrefixtable2\\" (
        \\"id\\"
      );
    

    COMMENT ON TABLE \\"databaseName\\".\\"tablePrefixtable2\\"
    IS 'RESOLVE-readModelName2';
  ",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "INSERT INTO \\"databaseName\\".\\"tablePrefixtable2\\"(\\"id\\", \\"test\\")
      VALUES(CAST('\\"id-3\\"' AS JSONB), CAST('true' AS JSONB));
    ",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "INSERT INTO \\"databaseName\\".\\"tablePrefixtable2\\"(\\"id\\", \\"test\\")
      VALUES(CAST('\\"id-4\\"' AS JSONB), CAST('true' AS JSONB));
    ",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "INSERT INTO \\"databaseName\\".\\"tablePrefixtable2\\"(\\"id\\", \\"test\\")
      VALUES(CAST('\\"id-5\\"' AS JSONB), CAST('true' AS JSONB));
    ",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "SELECT Count(*) AS \\"Count\\"
    FROM \\"databaseName\\".\\"tablePrefixtable1\\"
    ;",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "SELECT Count(*) AS \\"Count\\"
    FROM \\"databaseName\\".\\"tablePrefixtable2\\"
    ;",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "SELECT \\"CLS\\".\\"relname\\" AS \\"tableName\\"
    FROM \\"pg_catalog\\".\\"pg_class\\" \\"CLS\\"
    LEFT JOIN \\"pg_catalog\\".\\"pg_description\\" \\"DESC\\"
    ON \\"CLS\\".\\"oid\\" = \\"DESC\\".\\"objoid\\"
    LEFT JOIN \\"pg_catalog\\".\\"pg_namespace\\" \\"NS\\"
    ON \\"CLS\\".\\"relnamespace\\" = \\"NS\\".\\"oid\\"
    WHERE \\"DESC\\".\\"description\\" = 'RESOLVE-readModelName1'
    AND \\"NS\\".\\"nspname\\" = 'databaseName'
    AND \\"CLS\\".\\"relkind\\" = 'r'
    ;",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "SELECT \\"CLS\\".\\"relname\\" AS \\"tableName\\"
    FROM \\"pg_catalog\\".\\"pg_class\\" \\"CLS\\"
    LEFT JOIN \\"pg_catalog\\".\\"pg_description\\" \\"DESC\\"
    ON \\"CLS\\".\\"oid\\" = \\"DESC\\".\\"objoid\\"
    LEFT JOIN \\"pg_catalog\\".\\"pg_namespace\\" \\"NS\\"
    ON \\"CLS\\".\\"relnamespace\\" = \\"NS\\".\\"oid\\"
    WHERE \\"DESC\\".\\"description\\" = 'RESOLVE-readModelName2'
    AND \\"NS\\".\\"nspname\\" = 'databaseName'
    AND \\"CLS\\".\\"relkind\\" = 'r'
    ;",
  },
]
`;

exports[`resolve-readmodel-postgresql-serverless methods "defineTable", "insert", "find", "findOne" 1`] = `
Array [
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "
    CREATE TABLE \\"databaseName\\".\\"tablePrefixEntries\\" (
      \\"name\\" JSONB, \\"id\\" JSONB
    );

    
      ALTER TABLE \\"databaseName\\".\\"tablePrefixEntries\\"
      ADD CONSTRAINT \\"id-type-validation\\"
      CHECK (jsonb_typeof(\\"id\\") = 'string');

      CREATE UNIQUE INDEX \\"tablePrefixEntries-id-extracted-field\\"
      ON \\"databaseName\\".\\"tablePrefixEntries\\" (
      CAST((\\"id\\" ->> '$') AS VARCHAR(190)));
     
      CREATE UNIQUE INDEX \\"tablePrefixEntries-id-full-field\\"
      ON \\"databaseName\\".\\"tablePrefixEntries\\" (
        \\"id\\"
      );
    

    COMMENT ON TABLE \\"databaseName\\".\\"tablePrefixEntries\\"
    IS 'RESOLVE-readModelName';
  ",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "INSERT INTO \\"databaseName\\".\\"tablePrefixEntries\\"(\\"id\\", \\"name\\")
      VALUES(CAST('\\"id-1\\"' AS JSONB), CAST('\\"First entry\\"' AS JSONB));
    ",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "INSERT INTO \\"databaseName\\".\\"tablePrefixEntries\\"(\\"id\\", \\"name\\")
      VALUES(CAST('\\"id-2\\"' AS JSONB), CAST('\\"Second entry\\"' AS JSONB));
    ",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "INSERT INTO \\"databaseName\\".\\"tablePrefixEntries\\"(\\"id\\", \\"name\\")
      VALUES(CAST('\\"id-3\\"' AS JSONB), CAST('\\"Second entry\\"' AS JSONB));
    ",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "INSERT INTO \\"databaseName\\".\\"tablePrefixEntries\\"(\\"id\\", \\"name\\")
      VALUES(CAST('\\"id-4\\"' AS JSONB), CAST('\\"First entry\\"' AS JSONB));
    ",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "INSERT INTO \\"databaseName\\".\\"tablePrefixEntries\\"(\\"id\\", \\"name\\")
      VALUES(CAST('\\"id-5\\"' AS JSONB), CAST('\\"Second entry\\"' AS JSONB));
    ",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "SELECT * FROM \\"databaseName\\".\\"tablePrefixEntries\\"
    
    ORDER BY \\"id\\" ASC
    
    OFFSET 0
    LIMIT 268435455
  ;",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "SELECT * FROM \\"databaseName\\".\\"tablePrefixEntries\\"
    
    ORDER BY \\"id\\" DESC
    
    OFFSET 0
    LIMIT 268435455
  ;",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "SELECT * FROM \\"databaseName\\".\\"tablePrefixEntries\\"
    WHERE 
    (((\\"id\\" = CAST('\\"id-3\\"' AS JSONB)) and (not (\\"id\\" is null)) and (not (CAST('\\"id-3\\"' AS JSONB) is null))) or      
    ((\\"id\\" is null) and (CAST('\\"id-3\\"' AS JSONB) is null)))
   
    OFFSET 0
    LIMIT 1;",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "SELECT * FROM \\"databaseName\\".\\"tablePrefixEntries\\"
    WHERE (
    (((\\"name\\" = CAST('\\"Second entry\\"' AS JSONB)) and (not (\\"name\\" is null)) and (not (CAST('\\"Second entry\\"' AS JSONB) is null))) or      
    ((\\"name\\" is null) and (CAST('\\"Second entry\\"' AS JSONB) is null)))
   AND 
    (((\\"id\\" = CAST('\\"id-2\\"' AS JSONB)) and (not (\\"id\\" is null)) and (not (CAST('\\"id-2\\"' AS JSONB) is null))) or      
    ((\\"id\\" is null) and (CAST('\\"id-2\\"' AS JSONB) is null)))
  ) OR (NOT (
    (((\\"id\\" >= CAST('\\"id-1\\"' AS JSONB)) and (not (\\"id\\" is null)) and (not (CAST('\\"id-1\\"' AS JSONB) is null))) or
    ((\\"id\\" is null) and (CAST('\\"id-1\\"' AS JSONB) is null)))
  )) 
    
    
    OFFSET 0
    LIMIT 268435455
  ;",
  },
]
`;

exports[`resolve-readmodel-postgresql-serverless methods "defineTable", "insert", "update", "count", "delete" 1`] = `
Array [
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "
    CREATE TABLE \\"databaseName\\".\\"tablePrefixShoppingLists\\" (
      \\"createdAt\\" JSONB, \\"name\\" JSONB, \\"id\\" JSONB
    );

    
      ALTER TABLE \\"databaseName\\".\\"tablePrefixShoppingLists\\"
      ADD CONSTRAINT \\"id-type-validation\\"
      CHECK (jsonb_typeof(\\"id\\") = 'string');

      CREATE UNIQUE INDEX \\"tablePrefixShoppingLists-id-extracted-field\\"
      ON \\"databaseName\\".\\"tablePrefixShoppingLists\\" (
      CAST((\\"id\\" ->> '$') AS VARCHAR(190)));
     
      CREATE UNIQUE INDEX \\"tablePrefixShoppingLists-id-full-field\\"
      ON \\"databaseName\\".\\"tablePrefixShoppingLists\\" (
        \\"id\\"
      );
    

    COMMENT ON TABLE \\"databaseName\\".\\"tablePrefixShoppingLists\\"
    IS 'RESOLVE-readModelName';
  ",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "INSERT INTO \\"databaseName\\".\\"tablePrefixShoppingLists\\"(\\"id\\", \\"name\\", \\"createdAt\\")
      VALUES(CAST('\\"id-1\\"' AS JSONB), CAST('\\"Products\\"' AS JSONB), CAST('1' AS JSONB));
    ",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "INSERT INTO \\"databaseName\\".\\"tablePrefixShoppingLists\\"(\\"id\\", \\"name\\", \\"createdAt\\")
      VALUES(CAST('\\"id-2\\"' AS JSONB), CAST('\\"Medicines\\"' AS JSONB), CAST('2' AS JSONB));
    ",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "UPDATE \\"databaseName\\".\\"tablePrefixShoppingLists\\"
    SET \\"name\\" = CAST('\\"Products-NEW\\"' AS JSONB)  WHERE 
    (((\\"id\\" = CAST('\\"id-1\\"' AS JSONB)) and (not (\\"id\\" is null)) and (not (CAST('\\"id-1\\"' AS JSONB) is null))) or      
    ((\\"id\\" is null) and (CAST('\\"id-1\\"' AS JSONB) is null)))
   ;",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "SELECT Count(*) AS \\"Count\\"
    FROM \\"databaseName\\".\\"tablePrefixShoppingLists\\"
    WHERE 
    (((\\"id\\" = CAST('\\"id-1\\"' AS JSONB)) and (not (\\"id\\" is null)) and (not (CAST('\\"id-1\\"' AS JSONB) is null))) or      
    ((\\"id\\" is null) and (CAST('\\"id-1\\"' AS JSONB) is null)))
   ;",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "INSERT INTO \\"databaseName\\".\\"tablePrefixShoppingLists\\"(\\"id\\", \\"name\\")
      VALUES(CAST('\\"id-1\\"' AS JSONB), CAST('\\"Products-NEW\\"' AS JSONB));
    ",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "DELETE FROM \\"databaseName\\".\\"tablePrefixShoppingLists\\"
    WHERE 
    (((\\"id\\" = CAST('\\"id-2\\"' AS JSONB)) and (not (\\"id\\" is null)) and (not (CAST('\\"id-2\\"' AS JSONB) is null))) or      
    ((\\"id\\" is null) and (CAST('\\"id-2\\"' AS JSONB) is null)))
   ;",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "SELECT Count(*) AS \\"Count\\"
    FROM \\"databaseName\\".\\"tablePrefixShoppingLists\\"
    WHERE 
    (((\\"id\\" = CAST('\\"id-3\\"' AS JSONB)) and (not (\\"id\\" is null)) and (not (CAST('\\"id-3\\"' AS JSONB) is null))) or      
    ((\\"id\\" is null) and (CAST('\\"id-3\\"' AS JSONB) is null)))
   ;",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "INSERT INTO \\"databaseName\\".\\"tablePrefixShoppingLists\\"(\\"id\\", \\"name\\")
      VALUES(CAST('\\"id-3\\"' AS JSONB), CAST('\\"Entries\\"' AS JSONB));
    ",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "SELECT Count(*) AS \\"Count\\"
    FROM \\"databaseName\\".\\"tablePrefixShoppingLists\\"
    ;",
  },
]
`;

exports[`resolve-readmodel-postgresql-serverless operator "$inc" 1`] = `
Array [
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "
    CREATE TABLE \\"databaseName\\".\\"tablePrefixvalues\\" (
      \\"value\\" JSONB, \\"arr\\" JSONB, \\"obj\\" JSONB, \\"id\\" JSONB
    );

    
      ALTER TABLE \\"databaseName\\".\\"tablePrefixvalues\\"
      ADD CONSTRAINT \\"id-type-validation\\"
      CHECK (jsonb_typeof(\\"id\\") = 'string');

      CREATE UNIQUE INDEX \\"tablePrefixvalues-id-extracted-field\\"
      ON \\"databaseName\\".\\"tablePrefixvalues\\" (
      CAST((\\"id\\" ->> '$') AS VARCHAR(190)));
     
      CREATE UNIQUE INDEX \\"tablePrefixvalues-id-full-field\\"
      ON \\"databaseName\\".\\"tablePrefixvalues\\" (
        \\"id\\"
      );
    

    COMMENT ON TABLE \\"databaseName\\".\\"tablePrefixvalues\\"
    IS 'RESOLVE-readModelName';
  ",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "INSERT INTO \\"databaseName\\".\\"tablePrefixvalues\\"(\\"id\\", \\"value\\", \\"obj\\", \\"arr\\")
      VALUES(CAST('\\"id-1\\"' AS JSONB), CAST('1' AS JSONB), CAST('{\\"value\\":1}' AS JSONB), CAST('[{\\"value\\":1}]' AS JSONB));
    ",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "UPDATE \\"databaseName\\".\\"tablePrefixvalues\\"
    SET \\"value\\" = CAST(( (SELECT CAST(CASE
          WHEN jsonb_typeof(\\"inline-table-0\\".\\"val\\") = 'string' THEN quote_ident(
            CAST(\\"inline-table-0\\".\\"val\\"  #>> '{}' AS VARCHAR) ||
            CAST('1' AS VARCHAR)
          )
          WHEN jsonb_typeof(\\"inline-table-0\\".\\"val\\") = 'number' THEN CAST((
            CAST(\\"inline-table-0\\".\\"val\\"  #>> '{}' AS DECIMAL(48, 16)) +
            CAST(1 AS DECIMAL(48, 16))
          ) AS VARCHAR)
          ELSE (
            SELECT 'Invalid JSON type for $inc operation'
            FROM \\"pg_catalog\\".\\"pg_class\\"
          )
        END AS JSONB) AS \\"pg_catalog\\" FROM (
          SELECT \\"value\\" AS \\"val\\"
        ) \\"inline-table-0\\") ) AS JSONB), \\"obj\\" = (SELECT jsonb_set(\\"inline-table-1\\".\\"val\\", '{\\"value\\"}', CAST(CASE
            WHEN jsonb_typeof(\\"inline-table-1\\".\\"val\\" #> '{\\"value\\"}' ) = 'string' THEN quote_ident(
              CAST(\\"inline-table-1\\".\\"val\\" #>> '{\\"value\\"}' AS VARCHAR) ||
              CAST('1' AS VARCHAR)
            )
            WHEN jsonb_typeof(\\"inline-table-1\\".\\"val\\" #> '{\\"value\\"}' ) = 'number' THEN CAST((
              CAST(\\"inline-table-1\\".\\"val\\" #>> '{\\"value\\"}' AS DECIMAL(48, 16)) +
              CAST(1 AS DECIMAL(48, 16))
            ) AS VARCHAR)
            ELSE (
              SELECT 'Invalid JSON type for $inc operation'
              FROM \\"pg_catalog\\".\\"pg_class\\"
            )
          END AS JSONB)) AS \\"pg_catalog\\" FROM (
            SELECT \\"obj\\" AS \\"val\\"
          ) \\"inline-table-1\\"
          ), \\"arr\\" = (SELECT jsonb_set(\\"inline-table-2\\".\\"val\\", '{0,\\"value\\"}', CAST(CASE
            WHEN jsonb_typeof(\\"inline-table-2\\".\\"val\\" #> '{0,\\"value\\"}' ) = 'string' THEN quote_ident(
              CAST(\\"inline-table-2\\".\\"val\\" #>> '{0,\\"value\\"}' AS VARCHAR) ||
              CAST('1' AS VARCHAR)
            )
            WHEN jsonb_typeof(\\"inline-table-2\\".\\"val\\" #> '{0,\\"value\\"}' ) = 'number' THEN CAST((
              CAST(\\"inline-table-2\\".\\"val\\" #>> '{0,\\"value\\"}' AS DECIMAL(48, 16)) +
              CAST(1 AS DECIMAL(48, 16))
            ) AS VARCHAR)
            ELSE (
              SELECT 'Invalid JSON type for $inc operation'
              FROM \\"pg_catalog\\".\\"pg_class\\"
            )
          END AS JSONB)) AS \\"pg_catalog\\" FROM (
            SELECT \\"arr\\" AS \\"val\\"
          ) \\"inline-table-2\\"
          ) WHERE 
    (((\\"id\\" = CAST('\\"id-1\\"' AS JSONB)) and (not (\\"id\\" is null)) and (not (CAST('\\"id-1\\"' AS JSONB) is null))) or      
    ((\\"id\\" is null) and (CAST('\\"id-1\\"' AS JSONB) is null)))
   ;",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "UPDATE \\"databaseName\\".\\"tablePrefixvalues\\"
    SET \\"value\\" = CAST(( (SELECT CAST(CASE
          WHEN jsonb_typeof(\\"inline-table-0\\".\\"val\\") = 'string' THEN quote_ident(
            CAST(\\"inline-table-0\\".\\"val\\"  #>> '{}' AS VARCHAR) ||
            CAST('-1' AS VARCHAR)
          )
          WHEN jsonb_typeof(\\"inline-table-0\\".\\"val\\") = 'number' THEN CAST((
            CAST(\\"inline-table-0\\".\\"val\\"  #>> '{}' AS DECIMAL(48, 16)) +
            CAST(-1 AS DECIMAL(48, 16))
          ) AS VARCHAR)
          ELSE (
            SELECT 'Invalid JSON type for $inc operation'
            FROM \\"pg_catalog\\".\\"pg_class\\"
          )
        END AS JSONB) AS \\"pg_catalog\\" FROM (
          SELECT \\"value\\" AS \\"val\\"
        ) \\"inline-table-0\\") ) AS JSONB), \\"obj\\" = (SELECT jsonb_set(\\"inline-table-1\\".\\"val\\", '{\\"value\\"}', CAST(CASE
            WHEN jsonb_typeof(\\"inline-table-1\\".\\"val\\" #> '{\\"value\\"}' ) = 'string' THEN quote_ident(
              CAST(\\"inline-table-1\\".\\"val\\" #>> '{\\"value\\"}' AS VARCHAR) ||
              CAST('-1' AS VARCHAR)
            )
            WHEN jsonb_typeof(\\"inline-table-1\\".\\"val\\" #> '{\\"value\\"}' ) = 'number' THEN CAST((
              CAST(\\"inline-table-1\\".\\"val\\" #>> '{\\"value\\"}' AS DECIMAL(48, 16)) +
              CAST(-1 AS DECIMAL(48, 16))
            ) AS VARCHAR)
            ELSE (
              SELECT 'Invalid JSON type for $inc operation'
              FROM \\"pg_catalog\\".\\"pg_class\\"
            )
          END AS JSONB)) AS \\"pg_catalog\\" FROM (
            SELECT \\"obj\\" AS \\"val\\"
          ) \\"inline-table-1\\"
          ), \\"arr\\" = (SELECT jsonb_set(\\"inline-table-2\\".\\"val\\", '{0,\\"value\\"}', CAST(CASE
            WHEN jsonb_typeof(\\"inline-table-2\\".\\"val\\" #> '{0,\\"value\\"}' ) = 'string' THEN quote_ident(
              CAST(\\"inline-table-2\\".\\"val\\" #>> '{0,\\"value\\"}' AS VARCHAR) ||
              CAST('-1' AS VARCHAR)
            )
            WHEN jsonb_typeof(\\"inline-table-2\\".\\"val\\" #> '{0,\\"value\\"}' ) = 'number' THEN CAST((
              CAST(\\"inline-table-2\\".\\"val\\" #>> '{0,\\"value\\"}' AS DECIMAL(48, 16)) +
              CAST(-1 AS DECIMAL(48, 16))
            ) AS VARCHAR)
            ELSE (
              SELECT 'Invalid JSON type for $inc operation'
              FROM \\"pg_catalog\\".\\"pg_class\\"
            )
          END AS JSONB)) AS \\"pg_catalog\\" FROM (
            SELECT \\"arr\\" AS \\"val\\"
          ) \\"inline-table-2\\"
          ) WHERE 
    (((\\"id\\" = CAST('\\"id-1\\"' AS JSONB)) and (not (\\"id\\" is null)) and (not (CAST('\\"id-1\\"' AS JSONB) is null))) or      
    ((\\"id\\" is null) and (CAST('\\"id-1\\"' AS JSONB) is null)))
   ;",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "UPDATE \\"databaseName\\".\\"tablePrefixvalues\\"
    SET \\"value\\" = CAST(( (SELECT CAST(CASE
          WHEN jsonb_typeof(\\"inline-table-0\\".\\"val\\") = 'string' THEN quote_ident(
            CAST(\\"inline-table-0\\".\\"val\\"  #>> '{}' AS VARCHAR) ||
            CAST('0.42' AS VARCHAR)
          )
          WHEN jsonb_typeof(\\"inline-table-0\\".\\"val\\") = 'number' THEN CAST((
            CAST(\\"inline-table-0\\".\\"val\\"  #>> '{}' AS DECIMAL(48, 16)) +
            CAST(0.42 AS DECIMAL(48, 16))
          ) AS VARCHAR)
          ELSE (
            SELECT 'Invalid JSON type for $inc operation'
            FROM \\"pg_catalog\\".\\"pg_class\\"
          )
        END AS JSONB) AS \\"pg_catalog\\" FROM (
          SELECT \\"value\\" AS \\"val\\"
        ) \\"inline-table-0\\") ) AS JSONB), \\"obj\\" = (SELECT jsonb_set(\\"inline-table-1\\".\\"val\\", '{\\"value\\"}', CAST(CASE
            WHEN jsonb_typeof(\\"inline-table-1\\".\\"val\\" #> '{\\"value\\"}' ) = 'string' THEN quote_ident(
              CAST(\\"inline-table-1\\".\\"val\\" #>> '{\\"value\\"}' AS VARCHAR) ||
              CAST('0.42' AS VARCHAR)
            )
            WHEN jsonb_typeof(\\"inline-table-1\\".\\"val\\" #> '{\\"value\\"}' ) = 'number' THEN CAST((
              CAST(\\"inline-table-1\\".\\"val\\" #>> '{\\"value\\"}' AS DECIMAL(48, 16)) +
              CAST(0.42 AS DECIMAL(48, 16))
            ) AS VARCHAR)
            ELSE (
              SELECT 'Invalid JSON type for $inc operation'
              FROM \\"pg_catalog\\".\\"pg_class\\"
            )
          END AS JSONB)) AS \\"pg_catalog\\" FROM (
            SELECT \\"obj\\" AS \\"val\\"
          ) \\"inline-table-1\\"
          ), \\"arr\\" = (SELECT jsonb_set(\\"inline-table-2\\".\\"val\\", '{0,\\"value\\"}', CAST(CASE
            WHEN jsonb_typeof(\\"inline-table-2\\".\\"val\\" #> '{0,\\"value\\"}' ) = 'string' THEN quote_ident(
              CAST(\\"inline-table-2\\".\\"val\\" #>> '{0,\\"value\\"}' AS VARCHAR) ||
              CAST('0.42' AS VARCHAR)
            )
            WHEN jsonb_typeof(\\"inline-table-2\\".\\"val\\" #> '{0,\\"value\\"}' ) = 'number' THEN CAST((
              CAST(\\"inline-table-2\\".\\"val\\" #>> '{0,\\"value\\"}' AS DECIMAL(48, 16)) +
              CAST(0.42 AS DECIMAL(48, 16))
            ) AS VARCHAR)
            ELSE (
              SELECT 'Invalid JSON type for $inc operation'
              FROM \\"pg_catalog\\".\\"pg_class\\"
            )
          END AS JSONB)) AS \\"pg_catalog\\" FROM (
            SELECT \\"arr\\" AS \\"val\\"
          ) \\"inline-table-2\\"
          ) WHERE 
    (((\\"id\\" = CAST('\\"id-1\\"' AS JSONB)) and (not (\\"id\\" is null)) and (not (CAST('\\"id-1\\"' AS JSONB) is null))) or      
    ((\\"id\\" is null) and (CAST('\\"id-1\\"' AS JSONB) is null)))
   ;",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "UPDATE \\"databaseName\\".\\"tablePrefixvalues\\"
    SET \\"value\\" = CAST(( (SELECT CAST(CASE
          WHEN jsonb_typeof(\\"inline-table-0\\".\\"val\\") = 'string' THEN quote_ident(
            CAST(\\"inline-table-0\\".\\"val\\"  #>> '{}' AS VARCHAR) ||
            CAST('-0.42' AS VARCHAR)
          )
          WHEN jsonb_typeof(\\"inline-table-0\\".\\"val\\") = 'number' THEN CAST((
            CAST(\\"inline-table-0\\".\\"val\\"  #>> '{}' AS DECIMAL(48, 16)) +
            CAST(-0.42 AS DECIMAL(48, 16))
          ) AS VARCHAR)
          ELSE (
            SELECT 'Invalid JSON type for $inc operation'
            FROM \\"pg_catalog\\".\\"pg_class\\"
          )
        END AS JSONB) AS \\"pg_catalog\\" FROM (
          SELECT \\"value\\" AS \\"val\\"
        ) \\"inline-table-0\\") ) AS JSONB), \\"obj\\" = (SELECT jsonb_set(\\"inline-table-1\\".\\"val\\", '{\\"value\\"}', CAST(CASE
            WHEN jsonb_typeof(\\"inline-table-1\\".\\"val\\" #> '{\\"value\\"}' ) = 'string' THEN quote_ident(
              CAST(\\"inline-table-1\\".\\"val\\" #>> '{\\"value\\"}' AS VARCHAR) ||
              CAST('-0.42' AS VARCHAR)
            )
            WHEN jsonb_typeof(\\"inline-table-1\\".\\"val\\" #> '{\\"value\\"}' ) = 'number' THEN CAST((
              CAST(\\"inline-table-1\\".\\"val\\" #>> '{\\"value\\"}' AS DECIMAL(48, 16)) +
              CAST(-0.42 AS DECIMAL(48, 16))
            ) AS VARCHAR)
            ELSE (
              SELECT 'Invalid JSON type for $inc operation'
              FROM \\"pg_catalog\\".\\"pg_class\\"
            )
          END AS JSONB)) AS \\"pg_catalog\\" FROM (
            SELECT \\"obj\\" AS \\"val\\"
          ) \\"inline-table-1\\"
          ), \\"arr\\" = (SELECT jsonb_set(\\"inline-table-2\\".\\"val\\", '{0,\\"value\\"}', CAST(CASE
            WHEN jsonb_typeof(\\"inline-table-2\\".\\"val\\" #> '{0,\\"value\\"}' ) = 'string' THEN quote_ident(
              CAST(\\"inline-table-2\\".\\"val\\" #>> '{0,\\"value\\"}' AS VARCHAR) ||
              CAST('-0.42' AS VARCHAR)
            )
            WHEN jsonb_typeof(\\"inline-table-2\\".\\"val\\" #> '{0,\\"value\\"}' ) = 'number' THEN CAST((
              CAST(\\"inline-table-2\\".\\"val\\" #>> '{0,\\"value\\"}' AS DECIMAL(48, 16)) +
              CAST(-0.42 AS DECIMAL(48, 16))
            ) AS VARCHAR)
            ELSE (
              SELECT 'Invalid JSON type for $inc operation'
              FROM \\"pg_catalog\\".\\"pg_class\\"
            )
          END AS JSONB)) AS \\"pg_catalog\\" FROM (
            SELECT \\"arr\\" AS \\"val\\"
          ) \\"inline-table-2\\"
          ) WHERE 
    (((\\"id\\" = CAST('\\"id-1\\"' AS JSONB)) and (not (\\"id\\" is null)) and (not (CAST('\\"id-1\\"' AS JSONB) is null))) or      
    ((\\"id\\" is null) and (CAST('\\"id-1\\"' AS JSONB) is null)))
   ;",
  },
]
`;

exports[`resolve-readmodel-postgresql-serverless operator "$set" 1`] = `
Array [
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "
    CREATE TABLE \\"databaseName\\".\\"tablePrefixvalues\\" (
      \\"value\\" JSONB, \\"arr\\" JSONB, \\"obj\\" JSONB, \\"id\\" JSONB
    );

    
      ALTER TABLE \\"databaseName\\".\\"tablePrefixvalues\\"
      ADD CONSTRAINT \\"id-type-validation\\"
      CHECK (jsonb_typeof(\\"id\\") = 'string');

      CREATE UNIQUE INDEX \\"tablePrefixvalues-id-extracted-field\\"
      ON \\"databaseName\\".\\"tablePrefixvalues\\" (
      CAST((\\"id\\" ->> '$') AS VARCHAR(190)));
     
      CREATE UNIQUE INDEX \\"tablePrefixvalues-id-full-field\\"
      ON \\"databaseName\\".\\"tablePrefixvalues\\" (
        \\"id\\"
      );
    

    COMMENT ON TABLE \\"databaseName\\".\\"tablePrefixvalues\\"
    IS 'RESOLVE-readModelName';
  ",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "INSERT INTO \\"databaseName\\".\\"tablePrefixvalues\\"(\\"id\\", \\"value\\", \\"arr\\", \\"obj\\")
      VALUES(CAST('\\"id-1\\"' AS JSONB), CAST('1' AS JSONB), CAST('[{\\"value\\":1}]' AS JSONB), CAST('{\\"value\\":1}' AS JSONB));
    ",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "UPDATE \\"databaseName\\".\\"tablePrefixvalues\\"
    SET \\"value\\" = CAST('2' AS JSONB) , \\"obj\\" = jsonb_set(
            \\"obj\\",
            '{\\"value\\"}',
            CAST('2' AS JSONB)
            ) , \\"arr\\" = jsonb_set(
            \\"arr\\",
            '{0,\\"value\\"}',
            CAST('2' AS JSONB)
            )  WHERE 
    (((\\"id\\" = CAST('\\"id-1\\"' AS JSONB)) and (not (\\"id\\" is null)) and (not (CAST('\\"id-1\\"' AS JSONB) is null))) or      
    ((\\"id\\" is null) and (CAST('\\"id-1\\"' AS JSONB) is null)))
   ;",
  },
]
`;

exports[`resolve-readmodel-postgresql-serverless operator "$unset" 1`] = `
Array [
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "
    CREATE TABLE \\"databaseName\\".\\"tablePrefixvalues\\" (
      \\"value\\" JSONB, \\"arr\\" JSONB, \\"obj\\" JSONB, \\"id\\" JSONB
    );

    
      ALTER TABLE \\"databaseName\\".\\"tablePrefixvalues\\"
      ADD CONSTRAINT \\"id-type-validation\\"
      CHECK (jsonb_typeof(\\"id\\") = 'string');

      CREATE UNIQUE INDEX \\"tablePrefixvalues-id-extracted-field\\"
      ON \\"databaseName\\".\\"tablePrefixvalues\\" (
      CAST((\\"id\\" ->> '$') AS VARCHAR(190)));
     
      CREATE UNIQUE INDEX \\"tablePrefixvalues-id-full-field\\"
      ON \\"databaseName\\".\\"tablePrefixvalues\\" (
        \\"id\\"
      );
    

    COMMENT ON TABLE \\"databaseName\\".\\"tablePrefixvalues\\"
    IS 'RESOLVE-readModelName';
  ",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "INSERT INTO \\"databaseName\\".\\"tablePrefixvalues\\"(\\"id\\", \\"value\\", \\"arr\\", \\"obj\\")
      VALUES(CAST('\\"id-1\\"' AS JSONB), CAST('1' AS JSONB), CAST('[{\\"value\\":1}]' AS JSONB), CAST('{\\"value\\":1}' AS JSONB));
    ",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "UPDATE \\"databaseName\\".\\"tablePrefixvalues\\"
    SET \\"value\\" = NULL , \\"obj\\" = \\"obj\\" - '{\\"value\\"}' , \\"arr\\" = \\"arr\\" - '{0,\\"value\\"}'  WHERE 
    (((\\"id\\" = CAST('\\"id-1\\"' AS JSONB)) and (not (\\"id\\" is null)) and (not (CAST('\\"id-1\\"' AS JSONB) is null))) or      
    ((\\"id\\" is null) and (CAST('\\"id-1\\"' AS JSONB) is null)))
   ;",
  },
]
`;
