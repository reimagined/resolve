// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`resolve-storage-postgres-serverless index "getLatestEvent" should get the latest event 1`] = `
Array [
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "SELECT * FROM \\"event-store\\".\\"events\\" 
    ORDER BY \\"eventId\\" DESC
    OFFSET 0
    LIMIT 1",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "SELECT * FROM \\"event-store\\".\\"events\\" WHERE \\"type\\" IN ('AAA')
    ORDER BY \\"eventId\\" DESC
    OFFSET 0
    LIMIT 1",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "SELECT * FROM \\"event-store\\".\\"events\\" WHERE \\"aggregateId\\" IN ('id1')
    ORDER BY \\"eventId\\" DESC
    OFFSET 0
    LIMIT 1",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "SELECT * FROM \\"event-store\\".\\"events\\" WHERE \\"timestamp\\" > 1 AND \\"timestamp\\" < 3
    ORDER BY \\"eventId\\" DESC
    OFFSET 0
    LIMIT 1",
  },
]
`;

exports[`resolve-storage-postgres-serverless index "loadEvents" should load events 1`] = `
Array [
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "WITH \\"cte\\" AS (
        SELECT \\"filteredEvents\\".*,
        SUM(\\"filteredEvents\\".\\"eventSize\\")
        OVER (ORDER BY \\"filteredEvents\\".\\"eventId\\") AS \\"totalEventSize\\"
        FROM (
          SELECT * FROM \\"event-store\\".\\"events\\" 
          ORDER BY \\"eventId\\" ASC
          OFFSET 0
          LIMIT 200
        ) \\"filteredEvents\\"
      )
      SELECT * FROM \\"cte\\"
      WHERE \\"cte\\".\\"totalEventSize\\" < 512000
      ORDER BY \\"cte\\".\\"eventId\\" ASC
      ",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "WITH \\"cte\\" AS (
        SELECT \\"filteredEvents\\".*,
        SUM(\\"filteredEvents\\".\\"eventSize\\")
        OVER (ORDER BY \\"filteredEvents\\".\\"eventId\\") AS \\"totalEventSize\\"
        FROM (
          SELECT * FROM \\"event-store\\".\\"events\\" 
          ORDER BY \\"eventId\\" ASC
          OFFSET 1
          LIMIT 200
        ) \\"filteredEvents\\"
      )
      SELECT * FROM \\"cte\\"
      WHERE \\"cte\\".\\"totalEventSize\\" < 512000
      ORDER BY \\"cte\\".\\"eventId\\" ASC
      ",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "WITH \\"cte\\" AS (
        SELECT \\"filteredEvents\\".*,
        SUM(\\"filteredEvents\\".\\"eventSize\\")
        OVER (ORDER BY \\"filteredEvents\\".\\"eventId\\") AS \\"totalEventSize\\"
        FROM (
          SELECT * FROM \\"event-store\\".\\"events\\" 
          ORDER BY \\"eventId\\" ASC
          OFFSET 0
          LIMIT 200
        ) \\"filteredEvents\\"
      )
      SELECT * FROM \\"cte\\"
      WHERE \\"cte\\".\\"totalEventSize\\" < 512000
      ORDER BY \\"cte\\".\\"eventId\\" ASC
      ",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "WITH \\"cte\\" AS (
        SELECT \\"filteredEvents\\".*,
        SUM(\\"filteredEvents\\".\\"eventSize\\")
        OVER (ORDER BY \\"filteredEvents\\".\\"eventId\\") AS \\"totalEventSize\\"
        FROM (
          SELECT * FROM \\"event-store\\".\\"events\\" 
          ORDER BY \\"eventId\\" ASC
          OFFSET 1
          LIMIT 200
        ) \\"filteredEvents\\"
      )
      SELECT * FROM \\"cte\\"
      WHERE \\"cte\\".\\"totalEventSize\\" < 512000
      ORDER BY \\"cte\\".\\"eventId\\" ASC
      ",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "WITH \\"cte\\" AS (
        SELECT \\"filteredEvents\\".*,
        SUM(\\"filteredEvents\\".\\"eventSize\\")
        OVER (ORDER BY \\"filteredEvents\\".\\"eventId\\") AS \\"totalEventSize\\"
        FROM (
          SELECT * FROM \\"event-store\\".\\"events\\" WHERE \\"type\\" IN ('AAA')
          ORDER BY \\"eventId\\" ASC
          OFFSET 0
          LIMIT 200
        ) \\"filteredEvents\\"
      )
      SELECT * FROM \\"cte\\"
      WHERE \\"cte\\".\\"totalEventSize\\" < 512000
      ORDER BY \\"cte\\".\\"eventId\\" ASC
      ",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "WITH \\"cte\\" AS (
        SELECT \\"filteredEvents\\".*,
        SUM(\\"filteredEvents\\".\\"eventSize\\")
        OVER (ORDER BY \\"filteredEvents\\".\\"eventId\\") AS \\"totalEventSize\\"
        FROM (
          SELECT * FROM \\"event-store\\".\\"events\\" WHERE \\"type\\" IN ('AAA')
          ORDER BY \\"eventId\\" ASC
          OFFSET 1
          LIMIT 200
        ) \\"filteredEvents\\"
      )
      SELECT * FROM \\"cte\\"
      WHERE \\"cte\\".\\"totalEventSize\\" < 512000
      ORDER BY \\"cte\\".\\"eventId\\" ASC
      ",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "WITH \\"cte\\" AS (
        SELECT \\"filteredEvents\\".*,
        SUM(\\"filteredEvents\\".\\"eventSize\\")
        OVER (ORDER BY \\"filteredEvents\\".\\"eventId\\") AS \\"totalEventSize\\"
        FROM (
          SELECT * FROM \\"event-store\\".\\"events\\" WHERE \\"aggregateId\\" IN ('id1')
          ORDER BY \\"eventId\\" ASC
          OFFSET 0
          LIMIT 200
        ) \\"filteredEvents\\"
      )
      SELECT * FROM \\"cte\\"
      WHERE \\"cte\\".\\"totalEventSize\\" < 512000
      ORDER BY \\"cte\\".\\"eventId\\" ASC
      ",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "WITH \\"cte\\" AS (
        SELECT \\"filteredEvents\\".*,
        SUM(\\"filteredEvents\\".\\"eventSize\\")
        OVER (ORDER BY \\"filteredEvents\\".\\"eventId\\") AS \\"totalEventSize\\"
        FROM (
          SELECT * FROM \\"event-store\\".\\"events\\" WHERE \\"aggregateId\\" IN ('id1')
          ORDER BY \\"eventId\\" ASC
          OFFSET 1
          LIMIT 200
        ) \\"filteredEvents\\"
      )
      SELECT * FROM \\"cte\\"
      WHERE \\"cte\\".\\"totalEventSize\\" < 512000
      ORDER BY \\"cte\\".\\"eventId\\" ASC
      ",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "WITH \\"cte\\" AS (
        SELECT \\"filteredEvents\\".*,
        SUM(\\"filteredEvents\\".\\"eventSize\\")
        OVER (ORDER BY \\"filteredEvents\\".\\"eventId\\") AS \\"totalEventSize\\"
        FROM (
          SELECT * FROM \\"event-store\\".\\"events\\" WHERE \\"timestamp\\" > 1 AND \\"timestamp\\" < 3
          ORDER BY \\"eventId\\" ASC
          OFFSET 0
          LIMIT 200
        ) \\"filteredEvents\\"
      )
      SELECT * FROM \\"cte\\"
      WHERE \\"cte\\".\\"totalEventSize\\" < 512000
      ORDER BY \\"cte\\".\\"eventId\\" ASC
      ",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "WITH \\"cte\\" AS (
        SELECT \\"filteredEvents\\".*,
        SUM(\\"filteredEvents\\".\\"eventSize\\")
        OVER (ORDER BY \\"filteredEvents\\".\\"eventId\\") AS \\"totalEventSize\\"
        FROM (
          SELECT * FROM \\"event-store\\".\\"events\\" WHERE \\"timestamp\\" > 1 AND \\"timestamp\\" < 3
          ORDER BY \\"eventId\\" ASC
          OFFSET 1
          LIMIT 200
        ) \\"filteredEvents\\"
      )
      SELECT * FROM \\"cte\\"
      WHERE \\"cte\\".\\"totalEventSize\\" < 512000
      ORDER BY \\"cte\\".\\"eventId\\" ASC
      ",
  },
]
`;

exports[`resolve-storage-postgres-serverless index "saveEvent" should save an event 1`] = `
Array [
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "WITH \\"freeze_check\\" AS (
        SELECT 0 AS \\"lastEventId\\",
        0 AS \\"lastTimestamp\\" WHERE (
          (SELECT 'Event store is frozen' AS \\"EventStoreIsFrozen\\")
        UNION ALL
          (SELECT 'Event store is frozen' AS \\"EventStoreIsFrozen\\"
          FROM \\"information_schema\\".\\"tables\\"
          WHERE \\"table_schema\\" = 'event-store'
          AND \\"table_name\\" = 'events-freeze')
        ) = 'OK'
      ), \\"last_event\\" AS (
          (SELECT \\"eventId\\" AS \\"lastEventId\\",
          \\"timestamp\\" AS \\"lastTimestamp\\"
          FROM \\"event-store\\".\\"events\\"
          ORDER BY \\"eventId\\" DESC
          LIMIT 1)
        UNION ALL
          (SELECT \\"lastEventId\\", \\"lastTimestamp\\"
          FROM \\"freeze_check\\")
      ) INSERT INTO \\"event-store\\".\\"events\\"(
        \\"eventId\\",
        \\"timestamp\\",
        \\"aggregateId\\",
        \\"aggregateVersion\\",
        \\"type\\",
        \\"payload\\",
        \\"eventSize\\"
      ) VALUES (
        (SELECT MAX(\\"lastEventId\\") + 1
        FROM \\"last_event\\"),
        (SELECT GREATEST(
          CAST(extract(epoch from now()) * 1000 AS BIGINT),
          MAX(\\"lastTimestamp\\")
        ) FROM \\"last_event\\"), 
        'id1',1,'AAA','{\\"index\\":1}',
        93
      )",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "WITH \\"cte\\" AS (
        SELECT \\"filteredEvents\\".*,
        SUM(\\"filteredEvents\\".\\"eventSize\\")
        OVER (ORDER BY \\"filteredEvents\\".\\"eventId\\") AS \\"totalEventSize\\"
        FROM (
          SELECT * FROM \\"event-store\\".\\"events\\" 
          ORDER BY \\"eventId\\" ASC
          OFFSET 0
          LIMIT 200
        ) \\"filteredEvents\\"
      )
      SELECT * FROM \\"cte\\"
      WHERE \\"cte\\".\\"totalEventSize\\" < 512000
      ORDER BY \\"cte\\".\\"eventId\\" ASC
      ",
  },
]
`;

exports[`resolve-storage-postgres-serverless index "saveEvent" should save an event with empty payload 1`] = `
Array [
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "WITH \\"freeze_check\\" AS (
        SELECT 0 AS \\"lastEventId\\",
        0 AS \\"lastTimestamp\\" WHERE (
          (SELECT 'Event store is frozen' AS \\"EventStoreIsFrozen\\")
        UNION ALL
          (SELECT 'Event store is frozen' AS \\"EventStoreIsFrozen\\"
          FROM \\"information_schema\\".\\"tables\\"
          WHERE \\"table_schema\\" = 'event-store'
          AND \\"table_name\\" = 'events-freeze')
        ) = 'OK'
      ), \\"last_event\\" AS (
          (SELECT \\"eventId\\" AS \\"lastEventId\\",
          \\"timestamp\\" AS \\"lastTimestamp\\"
          FROM \\"event-store\\".\\"events\\"
          ORDER BY \\"eventId\\" DESC
          LIMIT 1)
        UNION ALL
          (SELECT \\"lastEventId\\", \\"lastTimestamp\\"
          FROM \\"freeze_check\\")
      ) INSERT INTO \\"event-store\\".\\"events\\"(
        \\"eventId\\",
        \\"timestamp\\",
        \\"aggregateId\\",
        \\"aggregateVersion\\",
        \\"type\\",
        \\"payload\\",
        \\"eventSize\\"
      ) VALUES (
        (SELECT MAX(\\"lastEventId\\") + 1
        FROM \\"last_event\\"),
        (SELECT GREATEST(
          CAST(extract(epoch from now()) * 1000 AS BIGINT),
          MAX(\\"lastTimestamp\\")
        ) FROM \\"last_event\\"), 
        'id1',1,'AAA','null',
        86
      )",
  },
  "executeStatement",
  Object {
    "continueAfterTimeout": false,
    "database": "postgres",
    "includeResultMetadata": true,
    "resourceArn": "dbClusterOrInstanceArn",
    "secretArn": "awsSecretStoreArn",
    "sql": "WITH \\"cte\\" AS (
        SELECT \\"filteredEvents\\".*,
        SUM(\\"filteredEvents\\".\\"eventSize\\")
        OVER (ORDER BY \\"filteredEvents\\".\\"eventId\\") AS \\"totalEventSize\\"
        FROM (
          SELECT * FROM \\"event-store\\".\\"events\\" 
          ORDER BY \\"eventId\\" ASC
          OFFSET 0
          LIMIT 200
        ) \\"filteredEvents\\"
      )
      SELECT * FROM \\"cte\\"
      WHERE \\"cte\\".\\"totalEventSize\\" < 512000
      ORDER BY \\"cte\\".\\"eventId\\" ASC
      ",
  },
]
`;
