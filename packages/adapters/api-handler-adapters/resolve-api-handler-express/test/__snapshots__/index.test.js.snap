// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`API handler wrapper for express.js should work with custom handler with any client request 1`] = `
Object {
  "callCount": 3,
  "callsInfo": Array [
    Object {
      "args": Array [
        "error",
        [Function],
      ],
      "returnValue": undefined,
    },
    Object {
      "args": Array [
        "data",
        [Function],
      ],
      "returnValue": undefined,
    },
    Object {
      "args": Array [
        "end",
        [Function],
      ],
      "returnValue": undefined,
    },
  ],
}
`;

exports[`API handler wrapper for express.js should work with custom handler with any client request 2`] = `
Object {
  "callCount": 1,
  "callsInfo": Array [
    Object {
      "args": Array [
        500,
      ],
      "returnValue": Object {
        "append": [Function],
        "end": [Function],
        "status": [Function],
      },
    },
  ],
}
`;

exports[`API handler wrapper for express.js should work with custom handler with any client request 3`] = `
Object {
  "callCount": 0,
  "callsInfo": Array [],
}
`;

exports[`API handler wrapper for express.js should work with custom handler with any client request 4`] = `
Object {
  "callCount": 1,
  "callsInfo": Array [
    Object {
      "args": Array [
        "ReferenceError: resolveApiPath is not defined
    at resolveApiPath (/home/vladv/resolve/packages/adapters/api-handler-adapters/resolve-api-handler-express/src/index.js:43:5)
    at tryCatch (/home/vladv/resolve/node_modules/regenerator-runtime/runtime.js:62:40)
    at Generator.invoke [as _invoke] (/home/vladv/resolve/node_modules/regenerator-runtime/runtime.js:288:22)
    at Generator.prototype.(anonymous function) [as next] (/home/vladv/resolve/node_modules/regenerator-runtime/runtime.js:114:21)
    at asyncGeneratorStep (/home/vladv/resolve/node_modules/@babel/runtime/helpers/asyncToGenerator.js:3:24)
    at _next (/home/vladv/resolve/node_modules/@babel/runtime/helpers/asyncToGenerator.js:25:9)
    at <anonymous>
    at process._tickCallback (internal/process/next_tick.js:188:7)",
      ],
      "returnValue": Object {
        "append": [Function],
        "end": [Function],
        "status": [Function],
      },
    },
  ],
}
`;

exports[`API handler wrapper for express.js should work with custom handler with any client request 5`] = `
Object {
  "callCount": 1,
  "callsInfo": Array [
    Object {
      "args": Array [
        Object {
          "headers": Object {
            "cookie": "cookie-content",
            "header-name-1": "header-value-1",
            "header-name-2": "header-value-2",
            "host": "host-content",
          },
          "method": "HTTP-VERB",
          "on": [Function],
          "path": "PATH_INFO",
          "query": Object {
            "query-name-1": "query-value-1",
            "query-name-2": "query-value-2",
          },
        },
        Object {
          "append": [Function],
          "end": [Function],
          "status": [Function],
        },
      ],
      "returnValue": Object {
        "param": "value",
      },
    },
  ],
}
`;

exports[`API handler wrapper for express.js should work with error throwing handler 1`] = `
Object {
  "callCount": 3,
  "callsInfo": Array [
    Object {
      "args": Array [
        "error",
        [Function],
      ],
      "returnValue": undefined,
    },
    Object {
      "args": Array [
        "data",
        [Function],
      ],
      "returnValue": undefined,
    },
    Object {
      "args": Array [
        "end",
        [Function],
      ],
      "returnValue": undefined,
    },
  ],
}
`;

exports[`API handler wrapper for express.js should work with error throwing handler 2`] = `
Object {
  "callCount": 1,
  "callsInfo": Array [
    Object {
      "args": Array [
        500,
      ],
      "returnValue": Object {
        "append": [Function],
        "end": [Function],
        "status": [Function],
      },
    },
  ],
}
`;

exports[`API handler wrapper for express.js should work with error throwing handler 3`] = `
Object {
  "callCount": 0,
  "callsInfo": Array [],
}
`;

exports[`API handler wrapper for express.js should work with error throwing handler 4`] = `
Object {
  "callCount": 1,
  "callsInfo": Array [
    Object {
      "args": Array [
        "ReferenceError: resolveApiPath is not defined
    at resolveApiPath (/home/vladv/resolve/packages/adapters/api-handler-adapters/resolve-api-handler-express/src/index.js:43:5)
    at tryCatch (/home/vladv/resolve/node_modules/regenerator-runtime/runtime.js:62:40)
    at Generator.invoke [as _invoke] (/home/vladv/resolve/node_modules/regenerator-runtime/runtime.js:288:22)
    at Generator.prototype.(anonymous function) [as next] (/home/vladv/resolve/node_modules/regenerator-runtime/runtime.js:114:21)
    at asyncGeneratorStep (/home/vladv/resolve/node_modules/@babel/runtime/helpers/asyncToGenerator.js:3:24)
    at _next (/home/vladv/resolve/node_modules/@babel/runtime/helpers/asyncToGenerator.js:25:9)
    at <anonymous>
    at process._tickCallback (internal/process/next_tick.js:188:7)",
      ],
      "returnValue": Object {
        "append": [Function],
        "end": [Function],
        "status": [Function],
      },
    },
  ],
}
`;

exports[`API handler wrapper for express.js should work with error throwing handler 5`] = `
Object {
  "callCount": 1,
  "callsInfo": Array [
    Object {
      "args": Array [
        Object {
          "headers": Object {
            "cookie": "cookie-content",
            "header-name-1": "header-value-1",
            "header-name-2": "header-value-2",
            "host": "host-content",
          },
          "method": "HTTP-VERB",
          "on": [Function],
          "path": "PATH_INFO",
          "query": Object {
            "query-name-1": "query-value-1",
            "query-name-2": "query-value-2",
          },
        },
        Object {
          "append": [Function],
          "end": [Function],
          "status": [Function],
        },
      ],
      "returnValue": Object {
        "param": "value",
      },
    },
  ],
}
`;

exports[`API handler wrapper for express.js should work with file handler with any client request 1`] = `
Object {
  "callCount": 3,
  "callsInfo": Array [
    Object {
      "args": Array [
        "error",
        [Function],
      ],
      "returnValue": undefined,
    },
    Object {
      "args": Array [
        "data",
        [Function],
      ],
      "returnValue": undefined,
    },
    Object {
      "args": Array [
        "end",
        [Function],
      ],
      "returnValue": undefined,
    },
  ],
}
`;

exports[`API handler wrapper for express.js should work with file handler with any client request 2`] = `
Object {
  "callCount": 1,
  "callsInfo": Array [
    Object {
      "args": Array [
        500,
      ],
      "returnValue": Object {
        "append": [Function],
        "end": [Function],
        "status": [Function],
      },
    },
  ],
}
`;

exports[`API handler wrapper for express.js should work with file handler with any client request 3`] = `
Object {
  "callCount": 0,
  "callsInfo": Array [],
}
`;

exports[`API handler wrapper for express.js should work with file handler with any client request 4`] = `
Object {
  "callCount": 1,
  "callsInfo": Array [
    Object {
      "args": Array [
        "ReferenceError: resolveApiPath is not defined
    at resolveApiPath (/home/vladv/resolve/packages/adapters/api-handler-adapters/resolve-api-handler-express/src/index.js:43:5)
    at tryCatch (/home/vladv/resolve/node_modules/regenerator-runtime/runtime.js:62:40)
    at Generator.invoke [as _invoke] (/home/vladv/resolve/node_modules/regenerator-runtime/runtime.js:288:22)
    at Generator.prototype.(anonymous function) [as next] (/home/vladv/resolve/node_modules/regenerator-runtime/runtime.js:114:21)
    at asyncGeneratorStep (/home/vladv/resolve/node_modules/@babel/runtime/helpers/asyncToGenerator.js:3:24)
    at _next (/home/vladv/resolve/node_modules/@babel/runtime/helpers/asyncToGenerator.js:25:9)
    at <anonymous>
    at process._tickCallback (internal/process/next_tick.js:188:7)",
      ],
      "returnValue": Object {
        "append": [Function],
        "end": [Function],
        "status": [Function],
      },
    },
  ],
}
`;

exports[`API handler wrapper for express.js should work with file handler with any client request 5`] = `
Object {
  "callCount": 1,
  "callsInfo": Array [
    Object {
      "args": Array [
        Object {
          "headers": Object {
            "cookie": "cookie-content",
            "header-name-1": "header-value-1",
            "header-name-2": "header-value-2",
            "host": "host-content",
          },
          "method": "HTTP-VERB",
          "on": [Function],
          "path": "PATH_INFO",
          "query": Object {
            "query-name-1": "query-value-1",
            "query-name-2": "query-value-2",
          },
        },
        Object {
          "append": [Function],
          "end": [Function],
          "status": [Function],
        },
      ],
      "returnValue": Object {
        "param": "value",
      },
    },
  ],
}
`;

exports[`API handler wrapper for express.js should work with primitive JSON handler with GET client request 1`] = `
Object {
  "callCount": 3,
  "callsInfo": Array [
    Object {
      "args": Array [
        "error",
        [Function],
      ],
      "returnValue": undefined,
    },
    Object {
      "args": Array [
        "data",
        [Function],
      ],
      "returnValue": undefined,
    },
    Object {
      "args": Array [
        "end",
        [Function],
      ],
      "returnValue": undefined,
    },
  ],
}
`;

exports[`API handler wrapper for express.js should work with primitive JSON handler with GET client request 2`] = `
Object {
  "callCount": 1,
  "callsInfo": Array [
    Object {
      "args": Array [
        500,
      ],
      "returnValue": Object {
        "append": [Function],
        "end": [Function],
        "status": [Function],
      },
    },
  ],
}
`;

exports[`API handler wrapper for express.js should work with primitive JSON handler with GET client request 3`] = `
Object {
  "callCount": 0,
  "callsInfo": Array [],
}
`;

exports[`API handler wrapper for express.js should work with primitive JSON handler with GET client request 4`] = `
Object {
  "callCount": 1,
  "callsInfo": Array [
    Object {
      "args": Array [
        "ReferenceError: resolveApiPath is not defined
    at resolveApiPath (/home/vladv/resolve/packages/adapters/api-handler-adapters/resolve-api-handler-express/src/index.js:43:5)
    at tryCatch (/home/vladv/resolve/node_modules/regenerator-runtime/runtime.js:62:40)
    at Generator.invoke [as _invoke] (/home/vladv/resolve/node_modules/regenerator-runtime/runtime.js:288:22)
    at Generator.prototype.(anonymous function) [as next] (/home/vladv/resolve/node_modules/regenerator-runtime/runtime.js:114:21)
    at asyncGeneratorStep (/home/vladv/resolve/node_modules/@babel/runtime/helpers/asyncToGenerator.js:3:24)
    at _next (/home/vladv/resolve/node_modules/@babel/runtime/helpers/asyncToGenerator.js:25:9)
    at <anonymous>
    at process._tickCallback (internal/process/next_tick.js:188:7)",
      ],
      "returnValue": Object {
        "append": [Function],
        "end": [Function],
        "status": [Function],
      },
    },
  ],
}
`;

exports[`API handler wrapper for express.js should work with primitive JSON handler with GET client request 5`] = `
Object {
  "callCount": 1,
  "callsInfo": Array [
    Object {
      "args": Array [
        Object {
          "headers": Object {
            "cookie": "cookie-content",
            "header-name-1": "header-value-1",
            "header-name-2": "header-value-2",
            "host": "host-content",
          },
          "method": "HTTP-VERB",
          "on": [Function],
          "path": "PATH_INFO",
          "query": Object {
            "query-name-1": "query-value-1",
            "query-name-2": "query-value-2",
          },
        },
        Object {
          "append": [Function],
          "end": [Function],
          "status": [Function],
        },
      ],
      "returnValue": Object {
        "param": "value",
      },
    },
  ],
}
`;

exports[`API handler wrapper for express.js should work with primitive JSON handler with POST client request 1`] = `
Object {
  "callCount": 3,
  "callsInfo": Array [
    Object {
      "args": Array [
        "error",
        [Function],
      ],
      "returnValue": undefined,
    },
    Object {
      "args": Array [
        "data",
        [Function],
      ],
      "returnValue": undefined,
    },
    Object {
      "args": Array [
        "end",
        [Function],
      ],
      "returnValue": undefined,
    },
  ],
}
`;

exports[`API handler wrapper for express.js should work with primitive JSON handler with POST client request 2`] = `
Object {
  "callCount": 1,
  "callsInfo": Array [
    Object {
      "args": Array [
        500,
      ],
      "returnValue": Object {
        "append": [Function],
        "end": [Function],
        "status": [Function],
      },
    },
  ],
}
`;

exports[`API handler wrapper for express.js should work with primitive JSON handler with POST client request 3`] = `
Object {
  "callCount": 0,
  "callsInfo": Array [],
}
`;

exports[`API handler wrapper for express.js should work with primitive JSON handler with POST client request 4`] = `
Object {
  "callCount": 1,
  "callsInfo": Array [
    Object {
      "args": Array [
        "ReferenceError: resolveApiPath is not defined
    at resolveApiPath (/home/vladv/resolve/packages/adapters/api-handler-adapters/resolve-api-handler-express/src/index.js:43:5)
    at tryCatch (/home/vladv/resolve/node_modules/regenerator-runtime/runtime.js:62:40)
    at Generator.invoke [as _invoke] (/home/vladv/resolve/node_modules/regenerator-runtime/runtime.js:288:22)
    at Generator.prototype.(anonymous function) [as next] (/home/vladv/resolve/node_modules/regenerator-runtime/runtime.js:114:21)
    at asyncGeneratorStep (/home/vladv/resolve/node_modules/@babel/runtime/helpers/asyncToGenerator.js:3:24)
    at _next (/home/vladv/resolve/node_modules/@babel/runtime/helpers/asyncToGenerator.js:25:9)
    at <anonymous>
    at process._tickCallback (internal/process/next_tick.js:188:7)",
      ],
      "returnValue": Object {
        "append": [Function],
        "end": [Function],
        "status": [Function],
      },
    },
  ],
}
`;

exports[`API handler wrapper for express.js should work with primitive JSON handler with POST client request 5`] = `
Object {
  "callCount": 1,
  "callsInfo": Array [
    Object {
      "args": Array [
        Object {
          "headers": Object {
            "cookie": "cookie-content",
            "header-name-1": "header-value-1",
            "header-name-2": "header-value-2",
            "host": "host-content",
          },
          "method": "HTTP-VERB",
          "on": [Function],
          "path": "PATH_INFO",
          "query": Object {
            "query-name-1": "query-value-1",
            "query-name-2": "query-value-2",
          },
        },
        Object {
          "append": [Function],
          "end": [Function],
          "status": [Function],
        },
      ],
      "returnValue": Object {
        "param": "value",
      },
    },
  ],
}
`;

exports[`API handler wrapper for express.js should work with redirect handler with any client request 1`] = `
Object {
  "callCount": 3,
  "callsInfo": Array [
    Object {
      "args": Array [
        "error",
        [Function],
      ],
      "returnValue": undefined,
    },
    Object {
      "args": Array [
        "data",
        [Function],
      ],
      "returnValue": undefined,
    },
    Object {
      "args": Array [
        "end",
        [Function],
      ],
      "returnValue": undefined,
    },
  ],
}
`;

exports[`API handler wrapper for express.js should work with redirect handler with any client request 2`] = `
Object {
  "callCount": 1,
  "callsInfo": Array [
    Object {
      "args": Array [
        500,
      ],
      "returnValue": Object {
        "append": [Function],
        "end": [Function],
        "status": [Function],
      },
    },
  ],
}
`;

exports[`API handler wrapper for express.js should work with redirect handler with any client request 3`] = `
Object {
  "callCount": 0,
  "callsInfo": Array [],
}
`;

exports[`API handler wrapper for express.js should work with redirect handler with any client request 4`] = `
Object {
  "callCount": 1,
  "callsInfo": Array [
    Object {
      "args": Array [
        "ReferenceError: resolveApiPath is not defined
    at resolveApiPath (/home/vladv/resolve/packages/adapters/api-handler-adapters/resolve-api-handler-express/src/index.js:43:5)
    at tryCatch (/home/vladv/resolve/node_modules/regenerator-runtime/runtime.js:62:40)
    at Generator.invoke [as _invoke] (/home/vladv/resolve/node_modules/regenerator-runtime/runtime.js:288:22)
    at Generator.prototype.(anonymous function) [as next] (/home/vladv/resolve/node_modules/regenerator-runtime/runtime.js:114:21)
    at asyncGeneratorStep (/home/vladv/resolve/node_modules/@babel/runtime/helpers/asyncToGenerator.js:3:24)
    at _next (/home/vladv/resolve/node_modules/@babel/runtime/helpers/asyncToGenerator.js:25:9)
    at <anonymous>
    at process._tickCallback (internal/process/next_tick.js:188:7)",
      ],
      "returnValue": Object {
        "append": [Function],
        "end": [Function],
        "status": [Function],
      },
    },
  ],
}
`;

exports[`API handler wrapper for express.js should work with redirect handler with any client request 5`] = `
Object {
  "callCount": 1,
  "callsInfo": Array [
    Object {
      "args": Array [
        Object {
          "headers": Object {
            "cookie": "cookie-content",
            "header-name-1": "header-value-1",
            "header-name-2": "header-value-2",
            "host": "host-content",
          },
          "method": "HTTP-VERB",
          "on": [Function],
          "path": "PATH_INFO",
          "query": Object {
            "query-name-1": "query-value-1",
            "query-name-2": "query-value-2",
          },
        },
        Object {
          "append": [Function],
          "end": [Function],
          "status": [Function],
        },
      ],
      "returnValue": Object {
        "param": "value",
      },
    },
  ],
}
`;

exports[`API handler wrapper for express.js should work with text handler with any client request 1`] = `
Object {
  "callCount": 3,
  "callsInfo": Array [
    Object {
      "args": Array [
        "error",
        [Function],
      ],
      "returnValue": undefined,
    },
    Object {
      "args": Array [
        "data",
        [Function],
      ],
      "returnValue": undefined,
    },
    Object {
      "args": Array [
        "end",
        [Function],
      ],
      "returnValue": undefined,
    },
  ],
}
`;

exports[`API handler wrapper for express.js should work with text handler with any client request 2`] = `
Object {
  "callCount": 1,
  "callsInfo": Array [
    Object {
      "args": Array [
        500,
      ],
      "returnValue": Object {
        "append": [Function],
        "end": [Function],
        "status": [Function],
      },
    },
  ],
}
`;

exports[`API handler wrapper for express.js should work with text handler with any client request 3`] = `
Object {
  "callCount": 0,
  "callsInfo": Array [],
}
`;

exports[`API handler wrapper for express.js should work with text handler with any client request 4`] = `
Object {
  "callCount": 1,
  "callsInfo": Array [
    Object {
      "args": Array [
        "ReferenceError: resolveApiPath is not defined
    at resolveApiPath (/home/vladv/resolve/packages/adapters/api-handler-adapters/resolve-api-handler-express/src/index.js:43:5)
    at tryCatch (/home/vladv/resolve/node_modules/regenerator-runtime/runtime.js:62:40)
    at Generator.invoke [as _invoke] (/home/vladv/resolve/node_modules/regenerator-runtime/runtime.js:288:22)
    at Generator.prototype.(anonymous function) [as next] (/home/vladv/resolve/node_modules/regenerator-runtime/runtime.js:114:21)
    at asyncGeneratorStep (/home/vladv/resolve/node_modules/@babel/runtime/helpers/asyncToGenerator.js:3:24)
    at _next (/home/vladv/resolve/node_modules/@babel/runtime/helpers/asyncToGenerator.js:25:9)
    at <anonymous>
    at process._tickCallback (internal/process/next_tick.js:188:7)",
      ],
      "returnValue": Object {
        "append": [Function],
        "end": [Function],
        "status": [Function],
      },
    },
  ],
}
`;

exports[`API handler wrapper for express.js should work with text handler with any client request 5`] = `
Object {
  "callCount": 1,
  "callsInfo": Array [
    Object {
      "args": Array [
        Object {
          "headers": Object {
            "cookie": "cookie-content",
            "header-name-1": "header-value-1",
            "header-name-2": "header-value-2",
            "host": "host-content",
          },
          "method": "HTTP-VERB",
          "on": [Function],
          "path": "PATH_INFO",
          "query": Object {
            "query-name-1": "query-value-1",
            "query-name-2": "query-value-2",
          },
        },
        Object {
          "append": [Function],
          "end": [Function],
          "status": [Function],
        },
      ],
      "returnValue": Object {
        "param": "value",
      },
    },
  ],
}
`;
